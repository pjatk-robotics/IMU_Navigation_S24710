
IMU_Navigation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b5c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002cf0  08002cf0  00003cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d28  08002d28  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002d28  08002d28  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002d28  08002d28  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d28  08002d28  00003d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d2c  08002d2c  00003d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002d30  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          000000a8  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000b4  200000b4  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008763  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000165a  00000000  00000000  0000c79f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000698  00000000  00000000  0000de00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000502  00000000  00000000  0000e498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f139  00000000  00000000  0000e99a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009a32  00000000  00000000  0002dad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc4de  00000000  00000000  00037505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f39e3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001904  00000000  00000000  000f3a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  000f532c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002cd8 	.word	0x08002cd8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002cd8 	.word	0x08002cd8

080001d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08a      	sub	sp, #40	@ 0x28
 80001d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001da:	f107 0314 	add.w	r3, r7, #20
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000298 <MX_GPIO_Init+0xc4>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	4a2a      	ldr	r2, [pc, #168]	@ (8000298 <MX_GPIO_Init+0xc4>)
 80001f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80001f4:	6153      	str	r3, [r2, #20]
 80001f6:	4b28      	ldr	r3, [pc, #160]	@ (8000298 <MX_GPIO_Init+0xc4>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80001fe:	613b      	str	r3, [r7, #16]
 8000200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000202:	4b25      	ldr	r3, [pc, #148]	@ (8000298 <MX_GPIO_Init+0xc4>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	4a24      	ldr	r2, [pc, #144]	@ (8000298 <MX_GPIO_Init+0xc4>)
 8000208:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800020c:	6153      	str	r3, [r2, #20]
 800020e:	4b22      	ldr	r3, [pc, #136]	@ (8000298 <MX_GPIO_Init+0xc4>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000216:	60fb      	str	r3, [r7, #12]
 8000218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800021a:	4b1f      	ldr	r3, [pc, #124]	@ (8000298 <MX_GPIO_Init+0xc4>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	4a1e      	ldr	r2, [pc, #120]	@ (8000298 <MX_GPIO_Init+0xc4>)
 8000220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000224:	6153      	str	r3, [r2, #20]
 8000226:	4b1c      	ldr	r3, [pc, #112]	@ (8000298 <MX_GPIO_Init+0xc4>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800022e:	60bb      	str	r3, [r7, #8]
 8000230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000232:	4b19      	ldr	r3, [pc, #100]	@ (8000298 <MX_GPIO_Init+0xc4>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	4a18      	ldr	r2, [pc, #96]	@ (8000298 <MX_GPIO_Init+0xc4>)
 8000238:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800023c:	6153      	str	r3, [r2, #20]
 800023e:	4b16      	ldr	r3, [pc, #88]	@ (8000298 <MX_GPIO_Init+0xc4>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800024a:	2200      	movs	r2, #0
 800024c:	2120      	movs	r1, #32
 800024e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000252:	f000 fc6d 	bl	8000b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000256:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800025a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800025c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000262:	2300      	movs	r3, #0
 8000264:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000266:	f107 0314 	add.w	r3, r7, #20
 800026a:	4619      	mov	r1, r3
 800026c:	480b      	ldr	r0, [pc, #44]	@ (800029c <MX_GPIO_Init+0xc8>)
 800026e:	f000 fad5 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000272:	2320      	movs	r3, #32
 8000274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000276:	2301      	movs	r3, #1
 8000278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800027a:	2300      	movs	r3, #0
 800027c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800027e:	2300      	movs	r3, #0
 8000280:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000282:	f107 0314 	add.w	r3, r7, #20
 8000286:	4619      	mov	r1, r3
 8000288:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800028c:	f000 fac6 	bl	800081c <HAL_GPIO_Init>

}
 8000290:	bf00      	nop
 8000292:	3728      	adds	r7, #40	@ 0x28
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	40021000 	.word	0x40021000
 800029c:	48000800 	.word	0x48000800

080002a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a4:	f000 f96e 	bl	8000584 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a8:	f000 f806 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ac:	f7ff ff92 	bl	80001d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002b0:	f000 f8cc 	bl	800044c <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b4:	bf00      	nop
 80002b6:	e7fd      	b.n	80002b4 <main+0x14>

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b0a6      	sub	sp, #152	@ 0x98
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80002c2:	2228      	movs	r2, #40	@ 0x28
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f002 fcd9 	bl	8002c7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2258      	movs	r2, #88	@ 0x58
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f002 fccb 	bl	8002c7e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e8:	2302      	movs	r3, #2
 80002ea:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ec:	2301      	movs	r3, #1
 80002ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f0:	2310      	movs	r3, #16
 80002f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f6:	2302      	movs	r3, #2
 80002f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000300:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000304:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000308:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800030c:	2300      	movs	r3, #0
 800030e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000312:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000316:	4618      	mov	r0, r3
 8000318:	f000 fc22 	bl	8000b60 <HAL_RCC_OscConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000322:	f000 f827 	bl	8000374 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000326:	230f      	movs	r3, #15
 8000328:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032a:	2302      	movs	r3, #2
 800032c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000336:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800033c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000340:	2102      	movs	r1, #2
 8000342:	4618      	mov	r0, r3
 8000344:	f001 fc30 	bl	8001ba8 <HAL_RCC_ClockConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800034e:	f000 f811 	bl	8000374 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000352:	2302      	movs	r3, #2
 8000354:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000356:	2300      	movs	r3, #0
 8000358:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	4618      	mov	r0, r3
 800035e:	f001 fe35 	bl	8001fcc <HAL_RCCEx_PeriphCLKConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000368:	f000 f804 	bl	8000374 <Error_Handler>
  }
}
 800036c:	bf00      	nop
 800036e:	3798      	adds	r7, #152	@ 0x98
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000378:	b672      	cpsid	i
}
 800037a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800037c:	bf00      	nop
 800037e:	e7fd      	b.n	800037c <Error_Handler+0x8>

08000380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000386:	4b0f      	ldr	r3, [pc, #60]	@ (80003c4 <HAL_MspInit+0x44>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	4a0e      	ldr	r2, [pc, #56]	@ (80003c4 <HAL_MspInit+0x44>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6193      	str	r3, [r2, #24]
 8000392:	4b0c      	ldr	r3, [pc, #48]	@ (80003c4 <HAL_MspInit+0x44>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	f003 0301 	and.w	r3, r3, #1
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039e:	4b09      	ldr	r3, [pc, #36]	@ (80003c4 <HAL_MspInit+0x44>)
 80003a0:	69db      	ldr	r3, [r3, #28]
 80003a2:	4a08      	ldr	r2, [pc, #32]	@ (80003c4 <HAL_MspInit+0x44>)
 80003a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003a8:	61d3      	str	r3, [r2, #28]
 80003aa:	4b06      	ldr	r3, [pc, #24]	@ (80003c4 <HAL_MspInit+0x44>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003b2:	603b      	str	r3, [r7, #0]
 80003b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80003b6:	2007      	movs	r0, #7
 80003b8:	f000 f9fc 	bl	80007b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003bc:	bf00      	nop
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40021000 	.word	0x40021000

080003c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003cc:	bf00      	nop
 80003ce:	e7fd      	b.n	80003cc <NMI_Handler+0x4>

080003d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003d4:	bf00      	nop
 80003d6:	e7fd      	b.n	80003d4 <HardFault_Handler+0x4>

080003d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003dc:	bf00      	nop
 80003de:	e7fd      	b.n	80003dc <MemManage_Handler+0x4>

080003e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003e4:	bf00      	nop
 80003e6:	e7fd      	b.n	80003e4 <BusFault_Handler+0x4>

080003e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003ec:	bf00      	nop
 80003ee:	e7fd      	b.n	80003ec <UsageFault_Handler+0x4>

080003f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003fe:	b480      	push	{r7}
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000402:	bf00      	nop
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr

0800040c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr

0800041a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800041a:	b580      	push	{r7, lr}
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800041e:	f000 f8f7 	bl	8000610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
	...

08000428 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800042c:	4b06      	ldr	r3, [pc, #24]	@ (8000448 <SystemInit+0x20>)
 800042e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000432:	4a05      	ldr	r2, [pc, #20]	@ (8000448 <SystemInit+0x20>)
 8000434:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000438:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	e000ed00 	.word	0xe000ed00

0800044c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000450:	4b14      	ldr	r3, [pc, #80]	@ (80004a4 <MX_USART2_UART_Init+0x58>)
 8000452:	4a15      	ldr	r2, [pc, #84]	@ (80004a8 <MX_USART2_UART_Init+0x5c>)
 8000454:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000456:	4b13      	ldr	r3, [pc, #76]	@ (80004a4 <MX_USART2_UART_Init+0x58>)
 8000458:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800045c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800045e:	4b11      	ldr	r3, [pc, #68]	@ (80004a4 <MX_USART2_UART_Init+0x58>)
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000464:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <MX_USART2_UART_Init+0x58>)
 8000466:	2200      	movs	r2, #0
 8000468:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800046a:	4b0e      	ldr	r3, [pc, #56]	@ (80004a4 <MX_USART2_UART_Init+0x58>)
 800046c:	2200      	movs	r2, #0
 800046e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000470:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <MX_USART2_UART_Init+0x58>)
 8000472:	220c      	movs	r2, #12
 8000474:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000476:	4b0b      	ldr	r3, [pc, #44]	@ (80004a4 <MX_USART2_UART_Init+0x58>)
 8000478:	2200      	movs	r2, #0
 800047a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800047c:	4b09      	ldr	r3, [pc, #36]	@ (80004a4 <MX_USART2_UART_Init+0x58>)
 800047e:	2200      	movs	r2, #0
 8000480:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000482:	4b08      	ldr	r3, [pc, #32]	@ (80004a4 <MX_USART2_UART_Init+0x58>)
 8000484:	2200      	movs	r2, #0
 8000486:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000488:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <MX_USART2_UART_Init+0x58>)
 800048a:	2200      	movs	r2, #0
 800048c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800048e:	4805      	ldr	r0, [pc, #20]	@ (80004a4 <MX_USART2_UART_Init+0x58>)
 8000490:	f001 ffb8 	bl	8002404 <HAL_UART_Init>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800049a:	f7ff ff6b 	bl	8000374 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000028 	.word	0x20000028
 80004a8:	40004400 	.word	0x40004400

080004ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b08a      	sub	sp, #40	@ 0x28
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b4:	f107 0314 	add.w	r3, r7, #20
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]
 80004c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a17      	ldr	r2, [pc, #92]	@ (8000528 <HAL_UART_MspInit+0x7c>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d128      	bne.n	8000520 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004ce:	4b17      	ldr	r3, [pc, #92]	@ (800052c <HAL_UART_MspInit+0x80>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	4a16      	ldr	r2, [pc, #88]	@ (800052c <HAL_UART_MspInit+0x80>)
 80004d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004d8:	61d3      	str	r3, [r2, #28]
 80004da:	4b14      	ldr	r3, [pc, #80]	@ (800052c <HAL_UART_MspInit+0x80>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004e2:	613b      	str	r3, [r7, #16]
 80004e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e6:	4b11      	ldr	r3, [pc, #68]	@ (800052c <HAL_UART_MspInit+0x80>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	4a10      	ldr	r2, [pc, #64]	@ (800052c <HAL_UART_MspInit+0x80>)
 80004ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004f0:	6153      	str	r3, [r2, #20]
 80004f2:	4b0e      	ldr	r3, [pc, #56]	@ (800052c <HAL_UART_MspInit+0x80>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80004fe:	230c      	movs	r3, #12
 8000500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000502:	2302      	movs	r3, #2
 8000504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050a:	2300      	movs	r3, #0
 800050c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800050e:	2307      	movs	r3, #7
 8000510:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	4619      	mov	r1, r3
 8000518:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800051c:	f000 f97e 	bl	800081c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000520:	bf00      	nop
 8000522:	3728      	adds	r7, #40	@ 0x28
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40004400 	.word	0x40004400
 800052c:	40021000 	.word	0x40021000

08000530 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000530:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000568 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000534:	f7ff ff78 	bl	8000428 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000538:	480c      	ldr	r0, [pc, #48]	@ (800056c <LoopForever+0x6>)
  ldr r1, =_edata
 800053a:	490d      	ldr	r1, [pc, #52]	@ (8000570 <LoopForever+0xa>)
  ldr r2, =_sidata
 800053c:	4a0d      	ldr	r2, [pc, #52]	@ (8000574 <LoopForever+0xe>)
  movs r3, #0
 800053e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000540:	e002      	b.n	8000548 <LoopCopyDataInit>

08000542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000546:	3304      	adds	r3, #4

08000548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800054a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800054c:	d3f9      	bcc.n	8000542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054e:	4a0a      	ldr	r2, [pc, #40]	@ (8000578 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000550:	4c0a      	ldr	r4, [pc, #40]	@ (800057c <LoopForever+0x16>)
  movs r3, #0
 8000552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000554:	e001      	b.n	800055a <LoopFillZerobss>

08000556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000558:	3204      	adds	r2, #4

0800055a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800055a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800055c:	d3fb      	bcc.n	8000556 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800055e:	f002 fb97 	bl	8002c90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000562:	f7ff fe9d 	bl	80002a0 <main>

08000566 <LoopForever>:

LoopForever:
    b LoopForever
 8000566:	e7fe      	b.n	8000566 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000568:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800056c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000570:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000574:	08002d30 	.word	0x08002d30
  ldr r2, =_sbss
 8000578:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800057c:	200000b4 	.word	0x200000b4

08000580 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000580:	e7fe      	b.n	8000580 <ADC1_2_IRQHandler>
	...

08000584 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000588:	4b08      	ldr	r3, [pc, #32]	@ (80005ac <HAL_Init+0x28>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a07      	ldr	r2, [pc, #28]	@ (80005ac <HAL_Init+0x28>)
 800058e:	f043 0310 	orr.w	r3, r3, #16
 8000592:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000594:	2003      	movs	r0, #3
 8000596:	f000 f90d 	bl	80007b4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059a:	2000      	movs	r0, #0
 800059c:	f000 f808 	bl	80005b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a0:	f7ff feee 	bl	8000380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a4:	2300      	movs	r3, #0
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40022000 	.word	0x40022000

080005b0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005b8:	4b12      	ldr	r3, [pc, #72]	@ (8000604 <HAL_InitTick+0x54>)
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <HAL_InitTick+0x58>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	4619      	mov	r1, r3
 80005c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 f917 	bl	8000802 <HAL_SYSTICK_Config>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005da:	2301      	movs	r3, #1
 80005dc:	e00e      	b.n	80005fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b0f      	cmp	r3, #15
 80005e2:	d80a      	bhi.n	80005fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e4:	2200      	movs	r2, #0
 80005e6:	6879      	ldr	r1, [r7, #4]
 80005e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80005ec:	f000 f8ed 	bl	80007ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f0:	4a06      	ldr	r2, [pc, #24]	@ (800060c <HAL_InitTick+0x5c>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80005f6:	2300      	movs	r3, #0
 80005f8:	e000      	b.n	80005fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005fa:	2301      	movs	r3, #1
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000000 	.word	0x20000000
 8000608:	20000008 	.word	0x20000008
 800060c:	20000004 	.word	0x20000004

08000610 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <HAL_IncTick+0x20>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	461a      	mov	r2, r3
 800061a:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <HAL_IncTick+0x24>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4413      	add	r3, r2
 8000620:	4a04      	ldr	r2, [pc, #16]	@ (8000634 <HAL_IncTick+0x24>)
 8000622:	6013      	str	r3, [r2, #0]
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	20000008 	.word	0x20000008
 8000634:	200000b0 	.word	0x200000b0

08000638 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return uwTick;  
 800063c:	4b03      	ldr	r3, [pc, #12]	@ (800064c <HAL_GetTick+0x14>)
 800063e:	681b      	ldr	r3, [r3, #0]
}
 8000640:	4618      	mov	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	200000b0 	.word	0x200000b0

08000650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f003 0307 	and.w	r3, r3, #7
 800065e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <__NVIC_SetPriorityGrouping+0x44>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000666:	68ba      	ldr	r2, [r7, #8]
 8000668:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800066c:	4013      	ands	r3, r2
 800066e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000678:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800067c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000682:	4a04      	ldr	r2, [pc, #16]	@ (8000694 <__NVIC_SetPriorityGrouping+0x44>)
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	60d3      	str	r3, [r2, #12]
}
 8000688:	bf00      	nop
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800069c:	4b04      	ldr	r3, [pc, #16]	@ (80006b0 <__NVIC_GetPriorityGrouping+0x18>)
 800069e:	68db      	ldr	r3, [r3, #12]
 80006a0:	0a1b      	lsrs	r3, r3, #8
 80006a2:	f003 0307 	and.w	r3, r3, #7
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	6039      	str	r1, [r7, #0]
 80006be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	db0a      	blt.n	80006de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	490c      	ldr	r1, [pc, #48]	@ (8000700 <__NVIC_SetPriority+0x4c>)
 80006ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d2:	0112      	lsls	r2, r2, #4
 80006d4:	b2d2      	uxtb	r2, r2
 80006d6:	440b      	add	r3, r1
 80006d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006dc:	e00a      	b.n	80006f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4908      	ldr	r1, [pc, #32]	@ (8000704 <__NVIC_SetPriority+0x50>)
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	f003 030f 	and.w	r3, r3, #15
 80006ea:	3b04      	subs	r3, #4
 80006ec:	0112      	lsls	r2, r2, #4
 80006ee:	b2d2      	uxtb	r2, r2
 80006f0:	440b      	add	r3, r1
 80006f2:	761a      	strb	r2, [r3, #24]
}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	e000e100 	.word	0xe000e100
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000708:	b480      	push	{r7}
 800070a:	b089      	sub	sp, #36	@ 0x24
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	f1c3 0307 	rsb	r3, r3, #7
 8000722:	2b04      	cmp	r3, #4
 8000724:	bf28      	it	cs
 8000726:	2304      	movcs	r3, #4
 8000728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	3304      	adds	r3, #4
 800072e:	2b06      	cmp	r3, #6
 8000730:	d902      	bls.n	8000738 <NVIC_EncodePriority+0x30>
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	3b03      	subs	r3, #3
 8000736:	e000      	b.n	800073a <NVIC_EncodePriority+0x32>
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	fa02 f303 	lsl.w	r3, r2, r3
 8000746:	43da      	mvns	r2, r3
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	401a      	ands	r2, r3
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000750:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	fa01 f303 	lsl.w	r3, r1, r3
 800075a:	43d9      	mvns	r1, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000760:	4313      	orrs	r3, r2
         );
}
 8000762:	4618      	mov	r0, r3
 8000764:	3724      	adds	r7, #36	@ 0x24
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
	...

08000770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3b01      	subs	r3, #1
 800077c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000780:	d301      	bcc.n	8000786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000782:	2301      	movs	r3, #1
 8000784:	e00f      	b.n	80007a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000786:	4a0a      	ldr	r2, [pc, #40]	@ (80007b0 <SysTick_Config+0x40>)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3b01      	subs	r3, #1
 800078c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800078e:	210f      	movs	r1, #15
 8000790:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000794:	f7ff ff8e 	bl	80006b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000798:	4b05      	ldr	r3, [pc, #20]	@ (80007b0 <SysTick_Config+0x40>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800079e:	4b04      	ldr	r3, [pc, #16]	@ (80007b0 <SysTick_Config+0x40>)
 80007a0:	2207      	movs	r2, #7
 80007a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	e000e010 	.word	0xe000e010

080007b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff ff47 	bl	8000650 <__NVIC_SetPriorityGrouping>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b086      	sub	sp, #24
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4603      	mov	r3, r0
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	607a      	str	r2, [r7, #4]
 80007d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007dc:	f7ff ff5c 	bl	8000698 <__NVIC_GetPriorityGrouping>
 80007e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	68b9      	ldr	r1, [r7, #8]
 80007e6:	6978      	ldr	r0, [r7, #20]
 80007e8:	f7ff ff8e 	bl	8000708 <NVIC_EncodePriority>
 80007ec:	4602      	mov	r2, r0
 80007ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff5d 	bl	80006b4 <__NVIC_SetPriority>
}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff ffb0 	bl	8000770 <SysTick_Config>
 8000810:	4603      	mov	r3, r0
}
 8000812:	4618      	mov	r0, r3
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800081c:	b480      	push	{r7}
 800081e:	b087      	sub	sp, #28
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800082a:	e160      	b.n	8000aee <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	2101      	movs	r1, #1
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	fa01 f303 	lsl.w	r3, r1, r3
 8000838:	4013      	ands	r3, r2
 800083a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	2b00      	cmp	r3, #0
 8000840:	f000 8152 	beq.w	8000ae8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	f003 0303 	and.w	r3, r3, #3
 800084c:	2b01      	cmp	r3, #1
 800084e:	d005      	beq.n	800085c <HAL_GPIO_Init+0x40>
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	f003 0303 	and.w	r3, r3, #3
 8000858:	2b02      	cmp	r3, #2
 800085a:	d130      	bne.n	80008be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	2203      	movs	r2, #3
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	43db      	mvns	r3, r3
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	4013      	ands	r3, r2
 8000872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	68da      	ldr	r2, [r3, #12]
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	693a      	ldr	r2, [r7, #16]
 8000882:	4313      	orrs	r3, r2
 8000884:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	693a      	ldr	r2, [r7, #16]
 800088a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000892:	2201      	movs	r2, #1
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	43db      	mvns	r3, r3
 800089c:	693a      	ldr	r2, [r7, #16]
 800089e:	4013      	ands	r3, r2
 80008a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	091b      	lsrs	r3, r3, #4
 80008a8:	f003 0201 	and.w	r2, r3, #1
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	693a      	ldr	r2, [r7, #16]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f003 0303 	and.w	r3, r3, #3
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	d017      	beq.n	80008fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	2203      	movs	r2, #3
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43db      	mvns	r3, r3
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	4013      	ands	r3, r2
 80008e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	689a      	ldr	r2, [r3, #8]
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	f003 0303 	and.w	r3, r3, #3
 8000902:	2b02      	cmp	r3, #2
 8000904:	d123      	bne.n	800094e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	08da      	lsrs	r2, r3, #3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	3208      	adds	r2, #8
 800090e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000912:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	f003 0307 	and.w	r3, r3, #7
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	220f      	movs	r2, #15
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	43db      	mvns	r3, r3
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	4013      	ands	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	691a      	ldr	r2, [r3, #16]
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	f003 0307 	and.w	r3, r3, #7
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	4313      	orrs	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	08da      	lsrs	r2, r3, #3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3208      	adds	r2, #8
 8000948:	6939      	ldr	r1, [r7, #16]
 800094a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	2203      	movs	r2, #3
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	43db      	mvns	r3, r3
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	4013      	ands	r3, r2
 8000964:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f003 0203 	and.w	r2, r3, #3
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	4313      	orrs	r3, r2
 800097a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800098a:	2b00      	cmp	r3, #0
 800098c:	f000 80ac 	beq.w	8000ae8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000990:	4b5e      	ldr	r3, [pc, #376]	@ (8000b0c <HAL_GPIO_Init+0x2f0>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a5d      	ldr	r2, [pc, #372]	@ (8000b0c <HAL_GPIO_Init+0x2f0>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b5b      	ldr	r3, [pc, #364]	@ (8000b0c <HAL_GPIO_Init+0x2f0>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009a8:	4a59      	ldr	r2, [pc, #356]	@ (8000b10 <HAL_GPIO_Init+0x2f4>)
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	089b      	lsrs	r3, r3, #2
 80009ae:	3302      	adds	r3, #2
 80009b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	f003 0303 	and.w	r3, r3, #3
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	220f      	movs	r2, #15
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	43db      	mvns	r3, r3
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	4013      	ands	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80009d2:	d025      	beq.n	8000a20 <HAL_GPIO_Init+0x204>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a4f      	ldr	r2, [pc, #316]	@ (8000b14 <HAL_GPIO_Init+0x2f8>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d01f      	beq.n	8000a1c <HAL_GPIO_Init+0x200>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a4e      	ldr	r2, [pc, #312]	@ (8000b18 <HAL_GPIO_Init+0x2fc>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d019      	beq.n	8000a18 <HAL_GPIO_Init+0x1fc>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a4d      	ldr	r2, [pc, #308]	@ (8000b1c <HAL_GPIO_Init+0x300>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d013      	beq.n	8000a14 <HAL_GPIO_Init+0x1f8>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a4c      	ldr	r2, [pc, #304]	@ (8000b20 <HAL_GPIO_Init+0x304>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d00d      	beq.n	8000a10 <HAL_GPIO_Init+0x1f4>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a4b      	ldr	r2, [pc, #300]	@ (8000b24 <HAL_GPIO_Init+0x308>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d007      	beq.n	8000a0c <HAL_GPIO_Init+0x1f0>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a4a      	ldr	r2, [pc, #296]	@ (8000b28 <HAL_GPIO_Init+0x30c>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d101      	bne.n	8000a08 <HAL_GPIO_Init+0x1ec>
 8000a04:	2306      	movs	r3, #6
 8000a06:	e00c      	b.n	8000a22 <HAL_GPIO_Init+0x206>
 8000a08:	2307      	movs	r3, #7
 8000a0a:	e00a      	b.n	8000a22 <HAL_GPIO_Init+0x206>
 8000a0c:	2305      	movs	r3, #5
 8000a0e:	e008      	b.n	8000a22 <HAL_GPIO_Init+0x206>
 8000a10:	2304      	movs	r3, #4
 8000a12:	e006      	b.n	8000a22 <HAL_GPIO_Init+0x206>
 8000a14:	2303      	movs	r3, #3
 8000a16:	e004      	b.n	8000a22 <HAL_GPIO_Init+0x206>
 8000a18:	2302      	movs	r3, #2
 8000a1a:	e002      	b.n	8000a22 <HAL_GPIO_Init+0x206>
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e000      	b.n	8000a22 <HAL_GPIO_Init+0x206>
 8000a20:	2300      	movs	r3, #0
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	f002 0203 	and.w	r2, r2, #3
 8000a28:	0092      	lsls	r2, r2, #2
 8000a2a:	4093      	lsls	r3, r2
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a32:	4937      	ldr	r1, [pc, #220]	@ (8000b10 <HAL_GPIO_Init+0x2f4>)
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	089b      	lsrs	r3, r3, #2
 8000a38:	3302      	adds	r3, #2
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a40:	4b3a      	ldr	r3, [pc, #232]	@ (8000b2c <HAL_GPIO_Init+0x310>)
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d003      	beq.n	8000a64 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a64:	4a31      	ldr	r2, [pc, #196]	@ (8000b2c <HAL_GPIO_Init+0x310>)
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a6a:	4b30      	ldr	r3, [pc, #192]	@ (8000b2c <HAL_GPIO_Init+0x310>)
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	43db      	mvns	r3, r3
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	4013      	ands	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d003      	beq.n	8000a8e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a8e:	4a27      	ldr	r2, [pc, #156]	@ (8000b2c <HAL_GPIO_Init+0x310>)
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000a94:	4b25      	ldr	r3, [pc, #148]	@ (8000b2c <HAL_GPIO_Init+0x310>)
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d003      	beq.n	8000ab8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8000b2c <HAL_GPIO_Init+0x310>)
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000abe:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <HAL_GPIO_Init+0x310>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	4013      	ands	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ae2:	4a12      	ldr	r2, [pc, #72]	@ (8000b2c <HAL_GPIO_Init+0x310>)
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	3301      	adds	r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	fa22 f303 	lsr.w	r3, r2, r3
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	f47f ae97 	bne.w	800082c <HAL_GPIO_Init+0x10>
  }
}
 8000afe:	bf00      	nop
 8000b00:	bf00      	nop
 8000b02:	371c      	adds	r7, #28
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40010000 	.word	0x40010000
 8000b14:	48000400 	.word	0x48000400
 8000b18:	48000800 	.word	0x48000800
 8000b1c:	48000c00 	.word	0x48000c00
 8000b20:	48001000 	.word	0x48001000
 8000b24:	48001400 	.word	0x48001400
 8000b28:	48001800 	.word	0x48001800
 8000b2c:	40010400 	.word	0x40010400

08000b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	807b      	strh	r3, [r7, #2]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b40:	787b      	ldrb	r3, [r7, #1]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d003      	beq.n	8000b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b46:	887a      	ldrh	r2, [r7, #2]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b4c:	e002      	b.n	8000b54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b4e:	887a      	ldrh	r2, [r7, #2]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b6c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b70:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b76:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d102      	bne.n	8000b86 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	f001 b80a 	b.w	8001b9a <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b8a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f000 8161 	beq.w	8000e5e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b9c:	4bae      	ldr	r3, [pc, #696]	@ (8000e58 <HAL_RCC_OscConfig+0x2f8>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f003 030c 	and.w	r3, r3, #12
 8000ba4:	2b04      	cmp	r3, #4
 8000ba6:	d00c      	beq.n	8000bc2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ba8:	4bab      	ldr	r3, [pc, #684]	@ (8000e58 <HAL_RCC_OscConfig+0x2f8>)
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f003 030c 	and.w	r3, r3, #12
 8000bb0:	2b08      	cmp	r3, #8
 8000bb2:	d157      	bne.n	8000c64 <HAL_RCC_OscConfig+0x104>
 8000bb4:	4ba8      	ldr	r3, [pc, #672]	@ (8000e58 <HAL_RCC_OscConfig+0x2f8>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bc0:	d150      	bne.n	8000c64 <HAL_RCC_OscConfig+0x104>
 8000bc2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000bc6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000bce:	fa93 f3a3 	rbit	r3, r3
 8000bd2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000bd6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bda:	fab3 f383 	clz	r3, r3
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b3f      	cmp	r3, #63	@ 0x3f
 8000be2:	d802      	bhi.n	8000bea <HAL_RCC_OscConfig+0x8a>
 8000be4:	4b9c      	ldr	r3, [pc, #624]	@ (8000e58 <HAL_RCC_OscConfig+0x2f8>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	e015      	b.n	8000c16 <HAL_RCC_OscConfig+0xb6>
 8000bea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000bee:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bf2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000bf6:	fa93 f3a3 	rbit	r3, r3
 8000bfa:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000bfe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c02:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000c06:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000c0a:	fa93 f3a3 	rbit	r3, r3
 8000c0e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000c12:	4b91      	ldr	r3, [pc, #580]	@ (8000e58 <HAL_RCC_OscConfig+0x2f8>)
 8000c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c16:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c1a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000c1e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000c22:	fa92 f2a2 	rbit	r2, r2
 8000c26:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000c2a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	f042 0220 	orr.w	r2, r2, #32
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	f002 021f 	and.w	r2, r2, #31
 8000c3e:	2101      	movs	r1, #1
 8000c40:	fa01 f202 	lsl.w	r2, r1, r2
 8000c44:	4013      	ands	r3, r2
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f000 8108 	beq.w	8000e5c <HAL_RCC_OscConfig+0x2fc>
 8000c4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c50:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	f040 80ff 	bne.w	8000e5c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	f000 bf9b 	b.w	8001b9a <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c68:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c74:	d106      	bne.n	8000c84 <HAL_RCC_OscConfig+0x124>
 8000c76:	4b78      	ldr	r3, [pc, #480]	@ (8000e58 <HAL_RCC_OscConfig+0x2f8>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a77      	ldr	r2, [pc, #476]	@ (8000e58 <HAL_RCC_OscConfig+0x2f8>)
 8000c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	e036      	b.n	8000cf2 <HAL_RCC_OscConfig+0x192>
 8000c84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c88:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d10c      	bne.n	8000cae <HAL_RCC_OscConfig+0x14e>
 8000c94:	4b70      	ldr	r3, [pc, #448]	@ (8000e58 <HAL_RCC_OscConfig+0x2f8>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a6f      	ldr	r2, [pc, #444]	@ (8000e58 <HAL_RCC_OscConfig+0x2f8>)
 8000c9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	4b6d      	ldr	r3, [pc, #436]	@ (8000e58 <HAL_RCC_OscConfig+0x2f8>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a6c      	ldr	r2, [pc, #432]	@ (8000e58 <HAL_RCC_OscConfig+0x2f8>)
 8000ca6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	e021      	b.n	8000cf2 <HAL_RCC_OscConfig+0x192>
 8000cae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cb2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000cbe:	d10c      	bne.n	8000cda <HAL_RCC_OscConfig+0x17a>
 8000cc0:	4b65      	ldr	r3, [pc, #404]	@ (8000e58 <HAL_RCC_OscConfig+0x2f8>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a64      	ldr	r2, [pc, #400]	@ (8000e58 <HAL_RCC_OscConfig+0x2f8>)
 8000cc6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	4b62      	ldr	r3, [pc, #392]	@ (8000e58 <HAL_RCC_OscConfig+0x2f8>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a61      	ldr	r2, [pc, #388]	@ (8000e58 <HAL_RCC_OscConfig+0x2f8>)
 8000cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cd6:	6013      	str	r3, [r2, #0]
 8000cd8:	e00b      	b.n	8000cf2 <HAL_RCC_OscConfig+0x192>
 8000cda:	4b5f      	ldr	r3, [pc, #380]	@ (8000e58 <HAL_RCC_OscConfig+0x2f8>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a5e      	ldr	r2, [pc, #376]	@ (8000e58 <HAL_RCC_OscConfig+0x2f8>)
 8000ce0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	4b5c      	ldr	r3, [pc, #368]	@ (8000e58 <HAL_RCC_OscConfig+0x2f8>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a5b      	ldr	r2, [pc, #364]	@ (8000e58 <HAL_RCC_OscConfig+0x2f8>)
 8000cec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cf0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cf6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d054      	beq.n	8000dac <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d02:	f7ff fc99 	bl	8000638 <HAL_GetTick>
 8000d06:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d0a:	e00a      	b.n	8000d22 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d0c:	f7ff fc94 	bl	8000638 <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	2b64      	cmp	r3, #100	@ 0x64
 8000d1a:	d902      	bls.n	8000d22 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	f000 bf3c 	b.w	8001b9a <HAL_RCC_OscConfig+0x103a>
 8000d22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d26:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d2a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000d2e:	fa93 f3a3 	rbit	r3, r3
 8000d32:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000d36:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d3a:	fab3 f383 	clz	r3, r3
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d42:	d802      	bhi.n	8000d4a <HAL_RCC_OscConfig+0x1ea>
 8000d44:	4b44      	ldr	r3, [pc, #272]	@ (8000e58 <HAL_RCC_OscConfig+0x2f8>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	e015      	b.n	8000d76 <HAL_RCC_OscConfig+0x216>
 8000d4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d4e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d52:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000d56:	fa93 f3a3 	rbit	r3, r3
 8000d5a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000d5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d62:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000d66:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000d6a:	fa93 f3a3 	rbit	r3, r3
 8000d6e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000d72:	4b39      	ldr	r3, [pc, #228]	@ (8000e58 <HAL_RCC_OscConfig+0x2f8>)
 8000d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d76:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d7a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000d7e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000d82:	fa92 f2a2 	rbit	r2, r2
 8000d86:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8000d8a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000d8e:	fab2 f282 	clz	r2, r2
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	f042 0220 	orr.w	r2, r2, #32
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	f002 021f 	and.w	r2, r2, #31
 8000d9e:	2101      	movs	r1, #1
 8000da0:	fa01 f202 	lsl.w	r2, r1, r2
 8000da4:	4013      	ands	r3, r2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0b0      	beq.n	8000d0c <HAL_RCC_OscConfig+0x1ac>
 8000daa:	e058      	b.n	8000e5e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dac:	f7ff fc44 	bl	8000638 <HAL_GetTick>
 8000db0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000db4:	e00a      	b.n	8000dcc <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000db6:	f7ff fc3f 	bl	8000638 <HAL_GetTick>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b64      	cmp	r3, #100	@ 0x64
 8000dc4:	d902      	bls.n	8000dcc <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	f000 bee7 	b.w	8001b9a <HAL_RCC_OscConfig+0x103a>
 8000dcc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dd0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000dd8:	fa93 f3a3 	rbit	r3, r3
 8000ddc:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8000de0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000de4:	fab3 f383 	clz	r3, r3
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b3f      	cmp	r3, #63	@ 0x3f
 8000dec:	d802      	bhi.n	8000df4 <HAL_RCC_OscConfig+0x294>
 8000dee:	4b1a      	ldr	r3, [pc, #104]	@ (8000e58 <HAL_RCC_OscConfig+0x2f8>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	e015      	b.n	8000e20 <HAL_RCC_OscConfig+0x2c0>
 8000df4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000df8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000e00:	fa93 f3a3 	rbit	r3, r3
 8000e04:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000e08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e0c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000e10:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000e14:	fa93 f3a3 	rbit	r3, r3
 8000e18:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <HAL_RCC_OscConfig+0x2f8>)
 8000e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e20:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e24:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8000e28:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8000e2c:	fa92 f2a2 	rbit	r2, r2
 8000e30:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8000e34:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000e38:	fab2 f282 	clz	r2, r2
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	f042 0220 	orr.w	r2, r2, #32
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	f002 021f 	and.w	r2, r2, #31
 8000e48:	2101      	movs	r1, #1
 8000e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4e:	4013      	ands	r3, r2
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d1b0      	bne.n	8000db6 <HAL_RCC_OscConfig+0x256>
 8000e54:	e003      	b.n	8000e5e <HAL_RCC_OscConfig+0x2fe>
 8000e56:	bf00      	nop
 8000e58:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e62:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 816d 	beq.w	800114e <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e74:	4bcd      	ldr	r3, [pc, #820]	@ (80011ac <HAL_RCC_OscConfig+0x64c>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 030c 	and.w	r3, r3, #12
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00c      	beq.n	8000e9a <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e80:	4bca      	ldr	r3, [pc, #808]	@ (80011ac <HAL_RCC_OscConfig+0x64c>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 030c 	and.w	r3, r3, #12
 8000e88:	2b08      	cmp	r3, #8
 8000e8a:	d16e      	bne.n	8000f6a <HAL_RCC_OscConfig+0x40a>
 8000e8c:	4bc7      	ldr	r3, [pc, #796]	@ (80011ac <HAL_RCC_OscConfig+0x64c>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000e94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000e98:	d167      	bne.n	8000f6a <HAL_RCC_OscConfig+0x40a>
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000ea4:	fa93 f3a3 	rbit	r3, r3
 8000ea8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8000eac:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eb0:	fab3 f383 	clz	r3, r3
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000eb8:	d802      	bhi.n	8000ec0 <HAL_RCC_OscConfig+0x360>
 8000eba:	4bbc      	ldr	r3, [pc, #752]	@ (80011ac <HAL_RCC_OscConfig+0x64c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	e013      	b.n	8000ee8 <HAL_RCC_OscConfig+0x388>
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8000eca:	fa93 f3a3 	rbit	r3, r3
 8000ece:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000ed8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8000edc:	fa93 f3a3 	rbit	r3, r3
 8000ee0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8000ee4:	4bb1      	ldr	r3, [pc, #708]	@ (80011ac <HAL_RCC_OscConfig+0x64c>)
 8000ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ee8:	2202      	movs	r2, #2
 8000eea:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8000eee:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8000ef2:	fa92 f2a2 	rbit	r2, r2
 8000ef6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8000efa:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8000efe:	fab2 f282 	clz	r2, r2
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	f042 0220 	orr.w	r2, r2, #32
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	f002 021f 	and.w	r2, r2, #31
 8000f0e:	2101      	movs	r1, #1
 8000f10:	fa01 f202 	lsl.w	r2, r1, r2
 8000f14:	4013      	ands	r3, r2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d00a      	beq.n	8000f30 <HAL_RCC_OscConfig+0x3d0>
 8000f1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f1e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d002      	beq.n	8000f30 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	f000 be35 	b.w	8001b9a <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f30:	4b9e      	ldr	r3, [pc, #632]	@ (80011ac <HAL_RCC_OscConfig+0x64c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f3c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	691b      	ldr	r3, [r3, #16]
 8000f44:	21f8      	movs	r1, #248	@ 0xf8
 8000f46:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4a:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8000f4e:	fa91 f1a1 	rbit	r1, r1
 8000f52:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8000f56:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8000f5a:	fab1 f181 	clz	r1, r1
 8000f5e:	b2c9      	uxtb	r1, r1
 8000f60:	408b      	lsls	r3, r1
 8000f62:	4992      	ldr	r1, [pc, #584]	@ (80011ac <HAL_RCC_OscConfig+0x64c>)
 8000f64:	4313      	orrs	r3, r2
 8000f66:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f68:	e0f1      	b.n	800114e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f6e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 8083 	beq.w	8001082 <HAL_RCC_OscConfig+0x522>
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f82:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8000f86:	fa93 f3a3 	rbit	r3, r3
 8000f8a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8000f8e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f92:	fab3 f383 	clz	r3, r3
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000f9c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fb46 	bl	8000638 <HAL_GetTick>
 8000fac:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb0:	e00a      	b.n	8000fc8 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fb2:	f7ff fb41 	bl	8000638 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d902      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	f000 bde9 	b.w	8001b9a <HAL_RCC_OscConfig+0x103a>
 8000fc8:	2302      	movs	r3, #2
 8000fca:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fce:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000fd2:	fa93 f3a3 	rbit	r3, r3
 8000fd6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8000fda:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fde:	fab3 f383 	clz	r3, r3
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fe6:	d802      	bhi.n	8000fee <HAL_RCC_OscConfig+0x48e>
 8000fe8:	4b70      	ldr	r3, [pc, #448]	@ (80011ac <HAL_RCC_OscConfig+0x64c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	e013      	b.n	8001016 <HAL_RCC_OscConfig+0x4b6>
 8000fee:	2302      	movs	r3, #2
 8000ff0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000ff8:	fa93 f3a3 	rbit	r3, r3
 8000ffc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001000:	2302      	movs	r3, #2
 8001002:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001006:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800100a:	fa93 f3a3 	rbit	r3, r3
 800100e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001012:	4b66      	ldr	r3, [pc, #408]	@ (80011ac <HAL_RCC_OscConfig+0x64c>)
 8001014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001016:	2202      	movs	r2, #2
 8001018:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800101c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001020:	fa92 f2a2 	rbit	r2, r2
 8001024:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001028:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800102c:	fab2 f282 	clz	r2, r2
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	f042 0220 	orr.w	r2, r2, #32
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	f002 021f 	and.w	r2, r2, #31
 800103c:	2101      	movs	r1, #1
 800103e:	fa01 f202 	lsl.w	r2, r1, r2
 8001042:	4013      	ands	r3, r2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0b4      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001048:	4b58      	ldr	r3, [pc, #352]	@ (80011ac <HAL_RCC_OscConfig+0x64c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001050:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001054:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	21f8      	movs	r1, #248	@ 0xf8
 800105e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001062:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001066:	fa91 f1a1 	rbit	r1, r1
 800106a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800106e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001072:	fab1 f181 	clz	r1, r1
 8001076:	b2c9      	uxtb	r1, r1
 8001078:	408b      	lsls	r3, r1
 800107a:	494c      	ldr	r1, [pc, #304]	@ (80011ac <HAL_RCC_OscConfig+0x64c>)
 800107c:	4313      	orrs	r3, r2
 800107e:	600b      	str	r3, [r1, #0]
 8001080:	e065      	b.n	800114e <HAL_RCC_OscConfig+0x5ee>
 8001082:	2301      	movs	r3, #1
 8001084:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001088:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800108c:	fa93 f3a3 	rbit	r3, r3
 8001090:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001094:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001098:	fab3 f383 	clz	r3, r3
 800109c:	b2db      	uxtb	r3, r3
 800109e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80010a2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	461a      	mov	r2, r3
 80010aa:	2300      	movs	r3, #0
 80010ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ae:	f7ff fac3 	bl	8000638 <HAL_GetTick>
 80010b2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b6:	e00a      	b.n	80010ce <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010b8:	f7ff fabe 	bl	8000638 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d902      	bls.n	80010ce <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	f000 bd66 	b.w	8001b9a <HAL_RCC_OscConfig+0x103a>
 80010ce:	2302      	movs	r3, #2
 80010d0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80010d8:	fa93 f3a3 	rbit	r3, r3
 80010dc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80010e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e4:	fab3 f383 	clz	r3, r3
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80010ec:	d802      	bhi.n	80010f4 <HAL_RCC_OscConfig+0x594>
 80010ee:	4b2f      	ldr	r3, [pc, #188]	@ (80011ac <HAL_RCC_OscConfig+0x64c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	e013      	b.n	800111c <HAL_RCC_OscConfig+0x5bc>
 80010f4:	2302      	movs	r3, #2
 80010f6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80010fe:	fa93 f3a3 	rbit	r3, r3
 8001102:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001106:	2302      	movs	r3, #2
 8001108:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800110c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001110:	fa93 f3a3 	rbit	r3, r3
 8001114:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001118:	4b24      	ldr	r3, [pc, #144]	@ (80011ac <HAL_RCC_OscConfig+0x64c>)
 800111a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800111c:	2202      	movs	r2, #2
 800111e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001122:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001126:	fa92 f2a2 	rbit	r2, r2
 800112a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800112e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001132:	fab2 f282 	clz	r2, r2
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	f042 0220 	orr.w	r2, r2, #32
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	f002 021f 	and.w	r2, r2, #31
 8001142:	2101      	movs	r1, #1
 8001144:	fa01 f202 	lsl.w	r2, r1, r2
 8001148:	4013      	ands	r3, r2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1b4      	bne.n	80010b8 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800114e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001152:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0308 	and.w	r3, r3, #8
 800115e:	2b00      	cmp	r3, #0
 8001160:	f000 8119 	beq.w	8001396 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001164:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001168:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 8082 	beq.w	800127a <HAL_RCC_OscConfig+0x71a>
 8001176:	2301      	movs	r3, #1
 8001178:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001180:	fa93 f3a3 	rbit	r3, r3
 8001184:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001188:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800118c:	fab3 f383 	clz	r3, r3
 8001190:	b2db      	uxtb	r3, r3
 8001192:	461a      	mov	r2, r3
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <HAL_RCC_OscConfig+0x650>)
 8001196:	4413      	add	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	461a      	mov	r2, r3
 800119c:	2301      	movs	r3, #1
 800119e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a0:	f7ff fa4a 	bl	8000638 <HAL_GetTick>
 80011a4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a8:	e00f      	b.n	80011ca <HAL_RCC_OscConfig+0x66a>
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000
 80011b0:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011b4:	f7ff fa40 	bl	8000638 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d902      	bls.n	80011ca <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	f000 bce8 	b.w	8001b9a <HAL_RCC_OscConfig+0x103a>
 80011ca:	2302      	movs	r3, #2
 80011cc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80011d4:	fa93 f2a3 	rbit	r2, r3
 80011d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011dc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011ea:	2202      	movs	r2, #2
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	fa93 f2a3 	rbit	r2, r3
 80011fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001200:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800120a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800120e:	2202      	movs	r2, #2
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001216:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	fa93 f2a3 	rbit	r2, r3
 8001220:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001224:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001228:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800122a:	4bb0      	ldr	r3, [pc, #704]	@ (80014ec <HAL_RCC_OscConfig+0x98c>)
 800122c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800122e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001232:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001236:	2102      	movs	r1, #2
 8001238:	6019      	str	r1, [r3, #0]
 800123a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800123e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	fa93 f1a3 	rbit	r1, r3
 8001248:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800124c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001250:	6019      	str	r1, [r3, #0]
  return result;
 8001252:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001256:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	fab3 f383 	clz	r3, r3
 8001260:	b2db      	uxtb	r3, r3
 8001262:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001266:	b2db      	uxtb	r3, r3
 8001268:	f003 031f 	and.w	r3, r3, #31
 800126c:	2101      	movs	r1, #1
 800126e:	fa01 f303 	lsl.w	r3, r1, r3
 8001272:	4013      	ands	r3, r2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d09d      	beq.n	80011b4 <HAL_RCC_OscConfig+0x654>
 8001278:	e08d      	b.n	8001396 <HAL_RCC_OscConfig+0x836>
 800127a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800127e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001282:	2201      	movs	r2, #1
 8001284:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001286:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800128a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	fa93 f2a3 	rbit	r2, r3
 8001294:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001298:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800129c:	601a      	str	r2, [r3, #0]
  return result;
 800129e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012a2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80012a6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012a8:	fab3 f383 	clz	r3, r3
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b8f      	ldr	r3, [pc, #572]	@ (80014f0 <HAL_RCC_OscConfig+0x990>)
 80012b2:	4413      	add	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	461a      	mov	r2, r3
 80012b8:	2300      	movs	r3, #0
 80012ba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012bc:	f7ff f9bc 	bl	8000638 <HAL_GetTick>
 80012c0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c4:	e00a      	b.n	80012dc <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c6:	f7ff f9b7 	bl	8000638 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d902      	bls.n	80012dc <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	f000 bc5f 	b.w	8001b9a <HAL_RCC_OscConfig+0x103a>
 80012dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012e0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012e4:	2202      	movs	r2, #2
 80012e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	fa93 f2a3 	rbit	r2, r3
 80012f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012fa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001304:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001308:	2202      	movs	r2, #2
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001310:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	fa93 f2a3 	rbit	r2, r3
 800131a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800131e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001328:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800132c:	2202      	movs	r2, #2
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001334:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	fa93 f2a3 	rbit	r2, r3
 800133e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001342:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001346:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001348:	4b68      	ldr	r3, [pc, #416]	@ (80014ec <HAL_RCC_OscConfig+0x98c>)
 800134a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800134c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001350:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001354:	2102      	movs	r1, #2
 8001356:	6019      	str	r1, [r3, #0]
 8001358:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800135c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	fa93 f1a3 	rbit	r1, r3
 8001366:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800136a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800136e:	6019      	str	r1, [r3, #0]
  return result;
 8001370:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001374:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	fab3 f383 	clz	r3, r3
 800137e:	b2db      	uxtb	r3, r3
 8001380:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001384:	b2db      	uxtb	r3, r3
 8001386:	f003 031f 	and.w	r3, r3, #31
 800138a:	2101      	movs	r1, #1
 800138c:	fa01 f303 	lsl.w	r3, r1, r3
 8001390:	4013      	ands	r3, r2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d197      	bne.n	80012c6 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001396:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800139a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 819c 	beq.w	80016e4 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ac:	2300      	movs	r3, #0
 80013ae:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013b2:	4b4e      	ldr	r3, [pc, #312]	@ (80014ec <HAL_RCC_OscConfig+0x98c>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d116      	bne.n	80013ec <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	4b4b      	ldr	r3, [pc, #300]	@ (80014ec <HAL_RCC_OscConfig+0x98c>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	4a4a      	ldr	r2, [pc, #296]	@ (80014ec <HAL_RCC_OscConfig+0x98c>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013c8:	61d3      	str	r3, [r2, #28]
 80013ca:	4b48      	ldr	r3, [pc, #288]	@ (80014ec <HAL_RCC_OscConfig+0x98c>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80013d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013e4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80013e6:	2301      	movs	r3, #1
 80013e8:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ec:	4b41      	ldr	r3, [pc, #260]	@ (80014f4 <HAL_RCC_OscConfig+0x994>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d11a      	bne.n	800142e <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013f8:	4b3e      	ldr	r3, [pc, #248]	@ (80014f4 <HAL_RCC_OscConfig+0x994>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a3d      	ldr	r2, [pc, #244]	@ (80014f4 <HAL_RCC_OscConfig+0x994>)
 80013fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001402:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001404:	f7ff f918 	bl	8000638 <HAL_GetTick>
 8001408:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140c:	e009      	b.n	8001422 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800140e:	f7ff f913 	bl	8000638 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b64      	cmp	r3, #100	@ 0x64
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e3bb      	b.n	8001b9a <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001422:	4b34      	ldr	r3, [pc, #208]	@ (80014f4 <HAL_RCC_OscConfig+0x994>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0ef      	beq.n	800140e <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800142e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001432:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d106      	bne.n	800144c <HAL_RCC_OscConfig+0x8ec>
 800143e:	4b2b      	ldr	r3, [pc, #172]	@ (80014ec <HAL_RCC_OscConfig+0x98c>)
 8001440:	6a1b      	ldr	r3, [r3, #32]
 8001442:	4a2a      	ldr	r2, [pc, #168]	@ (80014ec <HAL_RCC_OscConfig+0x98c>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6213      	str	r3, [r2, #32]
 800144a:	e035      	b.n	80014b8 <HAL_RCC_OscConfig+0x958>
 800144c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001450:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d10c      	bne.n	8001476 <HAL_RCC_OscConfig+0x916>
 800145c:	4b23      	ldr	r3, [pc, #140]	@ (80014ec <HAL_RCC_OscConfig+0x98c>)
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	4a22      	ldr	r2, [pc, #136]	@ (80014ec <HAL_RCC_OscConfig+0x98c>)
 8001462:	f023 0301 	bic.w	r3, r3, #1
 8001466:	6213      	str	r3, [r2, #32]
 8001468:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <HAL_RCC_OscConfig+0x98c>)
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	4a1f      	ldr	r2, [pc, #124]	@ (80014ec <HAL_RCC_OscConfig+0x98c>)
 800146e:	f023 0304 	bic.w	r3, r3, #4
 8001472:	6213      	str	r3, [r2, #32]
 8001474:	e020      	b.n	80014b8 <HAL_RCC_OscConfig+0x958>
 8001476:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800147a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b05      	cmp	r3, #5
 8001484:	d10c      	bne.n	80014a0 <HAL_RCC_OscConfig+0x940>
 8001486:	4b19      	ldr	r3, [pc, #100]	@ (80014ec <HAL_RCC_OscConfig+0x98c>)
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	4a18      	ldr	r2, [pc, #96]	@ (80014ec <HAL_RCC_OscConfig+0x98c>)
 800148c:	f043 0304 	orr.w	r3, r3, #4
 8001490:	6213      	str	r3, [r2, #32]
 8001492:	4b16      	ldr	r3, [pc, #88]	@ (80014ec <HAL_RCC_OscConfig+0x98c>)
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	4a15      	ldr	r2, [pc, #84]	@ (80014ec <HAL_RCC_OscConfig+0x98c>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6213      	str	r3, [r2, #32]
 800149e:	e00b      	b.n	80014b8 <HAL_RCC_OscConfig+0x958>
 80014a0:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <HAL_RCC_OscConfig+0x98c>)
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	4a11      	ldr	r2, [pc, #68]	@ (80014ec <HAL_RCC_OscConfig+0x98c>)
 80014a6:	f023 0301 	bic.w	r3, r3, #1
 80014aa:	6213      	str	r3, [r2, #32]
 80014ac:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <HAL_RCC_OscConfig+0x98c>)
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4a0e      	ldr	r2, [pc, #56]	@ (80014ec <HAL_RCC_OscConfig+0x98c>)
 80014b2:	f023 0304 	bic.w	r3, r3, #4
 80014b6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f000 8085 	beq.w	80015d4 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ca:	f7ff f8b5 	bl	8000638 <HAL_GetTick>
 80014ce:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d2:	e011      	b.n	80014f8 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d4:	f7ff f8b0 	bl	8000638 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d907      	bls.n	80014f8 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e356      	b.n	8001b9a <HAL_RCC_OscConfig+0x103a>
 80014ec:	40021000 	.word	0x40021000
 80014f0:	10908120 	.word	0x10908120
 80014f4:	40007000 	.word	0x40007000
 80014f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014fc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001500:	2202      	movs	r2, #2
 8001502:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001504:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001508:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	fa93 f2a3 	rbit	r2, r3
 8001512:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001516:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001520:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001524:	2202      	movs	r2, #2
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800152c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	fa93 f2a3 	rbit	r2, r3
 8001536:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800153a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800153e:	601a      	str	r2, [r3, #0]
  return result;
 8001540:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001544:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001548:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154a:	fab3 f383 	clz	r3, r3
 800154e:	b2db      	uxtb	r3, r3
 8001550:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d102      	bne.n	8001560 <HAL_RCC_OscConfig+0xa00>
 800155a:	4b98      	ldr	r3, [pc, #608]	@ (80017bc <HAL_RCC_OscConfig+0xc5c>)
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	e013      	b.n	8001588 <HAL_RCC_OscConfig+0xa28>
 8001560:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001564:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001568:	2202      	movs	r2, #2
 800156a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001570:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	fa93 f2a3 	rbit	r2, r3
 800157a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800157e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	4b8d      	ldr	r3, [pc, #564]	@ (80017bc <HAL_RCC_OscConfig+0xc5c>)
 8001586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001588:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800158c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001590:	2102      	movs	r1, #2
 8001592:	6011      	str	r1, [r2, #0]
 8001594:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001598:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800159c:	6812      	ldr	r2, [r2, #0]
 800159e:	fa92 f1a2 	rbit	r1, r2
 80015a2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80015a6:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80015aa:	6011      	str	r1, [r2, #0]
  return result;
 80015ac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80015b0:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80015b4:	6812      	ldr	r2, [r2, #0]
 80015b6:	fab2 f282 	clz	r2, r2
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	f002 021f 	and.w	r2, r2, #31
 80015c6:	2101      	movs	r1, #1
 80015c8:	fa01 f202 	lsl.w	r2, r1, r2
 80015cc:	4013      	ands	r3, r2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d080      	beq.n	80014d4 <HAL_RCC_OscConfig+0x974>
 80015d2:	e07d      	b.n	80016d0 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d4:	f7ff f830 	bl	8000638 <HAL_GetTick>
 80015d8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015dc:	e00b      	b.n	80015f6 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015de:	f7ff f82b 	bl	8000638 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e2d1      	b.n	8001b9a <HAL_RCC_OscConfig+0x103a>
 80015f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015fa:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80015fe:	2202      	movs	r2, #2
 8001600:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001602:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001606:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	fa93 f2a3 	rbit	r2, r3
 8001610:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001614:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800161e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001622:	2202      	movs	r2, #2
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800162a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	fa93 f2a3 	rbit	r2, r3
 8001634:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001638:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800163c:	601a      	str	r2, [r3, #0]
  return result;
 800163e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001642:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001646:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001648:	fab3 f383 	clz	r3, r3
 800164c:	b2db      	uxtb	r3, r3
 800164e:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d102      	bne.n	800165e <HAL_RCC_OscConfig+0xafe>
 8001658:	4b58      	ldr	r3, [pc, #352]	@ (80017bc <HAL_RCC_OscConfig+0xc5c>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	e013      	b.n	8001686 <HAL_RCC_OscConfig+0xb26>
 800165e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001662:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001666:	2202      	movs	r2, #2
 8001668:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800166e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	fa93 f2a3 	rbit	r2, r3
 8001678:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800167c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	4b4e      	ldr	r3, [pc, #312]	@ (80017bc <HAL_RCC_OscConfig+0xc5c>)
 8001684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001686:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800168a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800168e:	2102      	movs	r1, #2
 8001690:	6011      	str	r1, [r2, #0]
 8001692:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001696:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	fa92 f1a2 	rbit	r1, r2
 80016a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80016a4:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80016a8:	6011      	str	r1, [r2, #0]
  return result;
 80016aa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80016ae:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80016b2:	6812      	ldr	r2, [r2, #0]
 80016b4:	fab2 f282 	clz	r2, r2
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	f002 021f 	and.w	r2, r2, #31
 80016c4:	2101      	movs	r1, #1
 80016c6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d186      	bne.n	80015de <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016d0:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d105      	bne.n	80016e4 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d8:	4b38      	ldr	r3, [pc, #224]	@ (80017bc <HAL_RCC_OscConfig+0xc5c>)
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	4a37      	ldr	r2, [pc, #220]	@ (80017bc <HAL_RCC_OscConfig+0xc5c>)
 80016de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016e2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 8251 	beq.w	8001b98 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016f6:	4b31      	ldr	r3, [pc, #196]	@ (80017bc <HAL_RCC_OscConfig+0xc5c>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	2b08      	cmp	r3, #8
 8001700:	f000 820f 	beq.w	8001b22 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001704:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001708:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	2b02      	cmp	r3, #2
 8001712:	f040 8165 	bne.w	80019e0 <HAL_RCC_OscConfig+0xe80>
 8001716:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800171a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800171e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001722:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001724:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001728:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	fa93 f2a3 	rbit	r2, r3
 8001732:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001736:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800173a:	601a      	str	r2, [r3, #0]
  return result;
 800173c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001740:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001744:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001746:	fab3 f383 	clz	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001750:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	461a      	mov	r2, r3
 8001758:	2300      	movs	r3, #0
 800175a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7fe ff6c 	bl	8000638 <HAL_GetTick>
 8001760:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001764:	e009      	b.n	800177a <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001766:	f7fe ff67 	bl	8000638 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e20f      	b.n	8001b9a <HAL_RCC_OscConfig+0x103a>
 800177a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800177e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001782:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001786:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001788:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800178c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	fa93 f2a3 	rbit	r2, r3
 8001796:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800179a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800179e:	601a      	str	r2, [r3, #0]
  return result;
 80017a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017a4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80017a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017aa:	fab3 f383 	clz	r3, r3
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80017b2:	d805      	bhi.n	80017c0 <HAL_RCC_OscConfig+0xc60>
 80017b4:	4b01      	ldr	r3, [pc, #4]	@ (80017bc <HAL_RCC_OscConfig+0xc5c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	e02a      	b.n	8001810 <HAL_RCC_OscConfig+0xcb0>
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
 80017c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017c4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80017c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017d2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	fa93 f2a3 	rbit	r2, r3
 80017dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017e0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ea:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80017ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017f8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	fa93 f2a3 	rbit	r2, r3
 8001802:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001806:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	4bca      	ldr	r3, [pc, #808]	@ (8001b38 <HAL_RCC_OscConfig+0xfd8>)
 800180e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001810:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001814:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001818:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800181c:	6011      	str	r1, [r2, #0]
 800181e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001822:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	fa92 f1a2 	rbit	r1, r2
 800182c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001830:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001834:	6011      	str	r1, [r2, #0]
  return result;
 8001836:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800183a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	fab2 f282 	clz	r2, r2
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	f042 0220 	orr.w	r2, r2, #32
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	f002 021f 	and.w	r2, r2, #31
 8001850:	2101      	movs	r1, #1
 8001852:	fa01 f202 	lsl.w	r2, r1, r2
 8001856:	4013      	ands	r3, r2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d184      	bne.n	8001766 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800185c:	4bb6      	ldr	r3, [pc, #728]	@ (8001b38 <HAL_RCC_OscConfig+0xfd8>)
 800185e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001860:	f023 020f 	bic.w	r2, r3, #15
 8001864:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001868:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001870:	49b1      	ldr	r1, [pc, #708]	@ (8001b38 <HAL_RCC_OscConfig+0xfd8>)
 8001872:	4313      	orrs	r3, r2
 8001874:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001876:	4bb0      	ldr	r3, [pc, #704]	@ (8001b38 <HAL_RCC_OscConfig+0xfd8>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800187e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001882:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6a19      	ldr	r1, [r3, #32]
 800188a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800188e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	430b      	orrs	r3, r1
 8001898:	49a7      	ldr	r1, [pc, #668]	@ (8001b38 <HAL_RCC_OscConfig+0xfd8>)
 800189a:	4313      	orrs	r3, r2
 800189c:	604b      	str	r3, [r1, #4]
 800189e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018a2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80018a6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018b0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	fa93 f2a3 	rbit	r2, r3
 80018ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018be:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80018c2:	601a      	str	r2, [r3, #0]
  return result;
 80018c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018c8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80018cc:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ce:	fab3 f383 	clz	r3, r3
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018d8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	461a      	mov	r2, r3
 80018e0:	2301      	movs	r3, #1
 80018e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e4:	f7fe fea8 	bl	8000638 <HAL_GetTick>
 80018e8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ec:	e009      	b.n	8001902 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ee:	f7fe fea3 	bl	8000638 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e14b      	b.n	8001b9a <HAL_RCC_OscConfig+0x103a>
 8001902:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001906:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800190a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800190e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001914:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	fa93 f2a3 	rbit	r2, r3
 800191e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001922:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001926:	601a      	str	r2, [r3, #0]
  return result;
 8001928:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800192c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001930:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001932:	fab3 f383 	clz	r3, r3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b3f      	cmp	r3, #63	@ 0x3f
 800193a:	d802      	bhi.n	8001942 <HAL_RCC_OscConfig+0xde2>
 800193c:	4b7e      	ldr	r3, [pc, #504]	@ (8001b38 <HAL_RCC_OscConfig+0xfd8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	e027      	b.n	8001992 <HAL_RCC_OscConfig+0xe32>
 8001942:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001946:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800194a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800194e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001950:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001954:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	fa93 f2a3 	rbit	r2, r3
 800195e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001962:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800196c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001970:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800197a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	fa93 f2a3 	rbit	r2, r3
 8001984:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001988:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	4b6a      	ldr	r3, [pc, #424]	@ (8001b38 <HAL_RCC_OscConfig+0xfd8>)
 8001990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001992:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001996:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800199a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800199e:	6011      	str	r1, [r2, #0]
 80019a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019a4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80019a8:	6812      	ldr	r2, [r2, #0]
 80019aa:	fa92 f1a2 	rbit	r1, r2
 80019ae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019b2:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80019b6:	6011      	str	r1, [r2, #0]
  return result;
 80019b8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019bc:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	fab2 f282 	clz	r2, r2
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	f042 0220 	orr.w	r2, r2, #32
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	f002 021f 	and.w	r2, r2, #31
 80019d2:	2101      	movs	r1, #1
 80019d4:	fa01 f202 	lsl.w	r2, r1, r2
 80019d8:	4013      	ands	r3, r2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d087      	beq.n	80018ee <HAL_RCC_OscConfig+0xd8e>
 80019de:	e0db      	b.n	8001b98 <HAL_RCC_OscConfig+0x1038>
 80019e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019e4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80019e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80019ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019f2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	fa93 f2a3 	rbit	r2, r3
 80019fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a00:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001a04:	601a      	str	r2, [r3, #0]
  return result;
 8001a06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a0a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001a0e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a10:	fab3 f383 	clz	r3, r3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a1a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	461a      	mov	r2, r3
 8001a22:	2300      	movs	r3, #0
 8001a24:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a26:	f7fe fe07 	bl	8000638 <HAL_GetTick>
 8001a2a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a2e:	e009      	b.n	8001a44 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a30:	f7fe fe02 	bl	8000638 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e0aa      	b.n	8001b9a <HAL_RCC_OscConfig+0x103a>
 8001a44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a48:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001a4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a56:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	fa93 f2a3 	rbit	r2, r3
 8001a60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a64:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001a68:	601a      	str	r2, [r3, #0]
  return result;
 8001a6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a6e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001a72:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a74:	fab3 f383 	clz	r3, r3
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a7c:	d802      	bhi.n	8001a84 <HAL_RCC_OscConfig+0xf24>
 8001a7e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b38 <HAL_RCC_OscConfig+0xfd8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	e027      	b.n	8001ad4 <HAL_RCC_OscConfig+0xf74>
 8001a84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a88:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001a8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a96:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	fa93 f2a3 	rbit	r2, r3
 8001aa0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aae:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001ab2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001abc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	fa93 f2a3 	rbit	r2, r3
 8001ac6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aca:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	4b19      	ldr	r3, [pc, #100]	@ (8001b38 <HAL_RCC_OscConfig+0xfd8>)
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ad8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001adc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001ae0:	6011      	str	r1, [r2, #0]
 8001ae2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ae6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	fa92 f1a2 	rbit	r1, r2
 8001af0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001af4:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001af8:	6011      	str	r1, [r2, #0]
  return result;
 8001afa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001afe:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	fab2 f282 	clz	r2, r2
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	f042 0220 	orr.w	r2, r2, #32
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	f002 021f 	and.w	r2, r2, #31
 8001b14:	2101      	movs	r1, #1
 8001b16:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d187      	bne.n	8001a30 <HAL_RCC_OscConfig+0xed0>
 8001b20:	e03a      	b.n	8001b98 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b26:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d104      	bne.n	8001b3c <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e031      	b.n	8001b9a <HAL_RCC_OscConfig+0x103a>
 8001b36:	bf00      	nop
 8001b38:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ba4 <HAL_RCC_OscConfig+0x1044>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001b44:	4b17      	ldr	r3, [pc, #92]	@ (8001ba4 <HAL_RCC_OscConfig+0x1044>)
 8001b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b48:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b4c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001b50:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001b54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d117      	bne.n	8001b94 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b64:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001b68:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b70:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d10b      	bne.n	8001b94 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001b7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b80:	f003 020f 	and.w	r2, r3, #15
 8001b84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b88:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d001      	beq.n	8001b98 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e000      	b.n	8001b9a <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40021000 	.word	0x40021000

08001ba8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b09e      	sub	sp, #120	@ 0x78
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e154      	b.n	8001e6a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b89      	ldr	r3, [pc, #548]	@ (8001de8 <HAL_RCC_ClockConfig+0x240>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d910      	bls.n	8001bf0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b86      	ldr	r3, [pc, #536]	@ (8001de8 <HAL_RCC_ClockConfig+0x240>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 0207 	bic.w	r2, r3, #7
 8001bd6:	4984      	ldr	r1, [pc, #528]	@ (8001de8 <HAL_RCC_ClockConfig+0x240>)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	4b82      	ldr	r3, [pc, #520]	@ (8001de8 <HAL_RCC_ClockConfig+0x240>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e13c      	b.n	8001e6a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d008      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bfc:	4b7b      	ldr	r3, [pc, #492]	@ (8001dec <HAL_RCC_ClockConfig+0x244>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	4978      	ldr	r1, [pc, #480]	@ (8001dec <HAL_RCC_ClockConfig+0x244>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 80cd 	beq.w	8001db6 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d137      	bne.n	8001c94 <HAL_RCC_ClockConfig+0xec>
 8001c24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c28:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c2c:	fa93 f3a3 	rbit	r3, r3
 8001c30:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001c32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c34:	fab3 f383 	clz	r3, r3
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c3c:	d802      	bhi.n	8001c44 <HAL_RCC_ClockConfig+0x9c>
 8001c3e:	4b6b      	ldr	r3, [pc, #428]	@ (8001dec <HAL_RCC_ClockConfig+0x244>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	e00f      	b.n	8001c64 <HAL_RCC_ClockConfig+0xbc>
 8001c44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c4c:	fa93 f3a3 	rbit	r3, r3
 8001c50:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c56:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c5a:	fa93 f3a3 	rbit	r3, r3
 8001c5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c60:	4b62      	ldr	r3, [pc, #392]	@ (8001dec <HAL_RCC_ClockConfig+0x244>)
 8001c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c64:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c68:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001c6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001c6c:	fa92 f2a2 	rbit	r2, r2
 8001c70:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001c72:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001c74:	fab2 f282 	clz	r2, r2
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	f042 0220 	orr.w	r2, r2, #32
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	f002 021f 	and.w	r2, r2, #31
 8001c84:	2101      	movs	r1, #1
 8001c86:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d171      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0ea      	b.n	8001e6a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d137      	bne.n	8001d0c <HAL_RCC_ClockConfig+0x164>
 8001c9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ca0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ca4:	fa93 f3a3 	rbit	r3, r3
 8001ca8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001caa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cac:	fab3 f383 	clz	r3, r3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cb4:	d802      	bhi.n	8001cbc <HAL_RCC_ClockConfig+0x114>
 8001cb6:	4b4d      	ldr	r3, [pc, #308]	@ (8001dec <HAL_RCC_ClockConfig+0x244>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	e00f      	b.n	8001cdc <HAL_RCC_ClockConfig+0x134>
 8001cbc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cc4:	fa93 f3a3 	rbit	r3, r3
 8001cc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cce:	643b      	str	r3, [r7, #64]	@ 0x40
 8001cd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cd2:	fa93 f3a3 	rbit	r3, r3
 8001cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cd8:	4b44      	ldr	r3, [pc, #272]	@ (8001dec <HAL_RCC_ClockConfig+0x244>)
 8001cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cdc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ce0:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001ce2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ce4:	fa92 f2a2 	rbit	r2, r2
 8001ce8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001cea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001cec:	fab2 f282 	clz	r2, r2
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	f042 0220 	orr.w	r2, r2, #32
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	f002 021f 	and.w	r2, r2, #31
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d135      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0ae      	b.n	8001e6a <HAL_RCC_ClockConfig+0x2c2>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1a:	fab3 f383 	clz	r3, r3
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d22:	d802      	bhi.n	8001d2a <HAL_RCC_ClockConfig+0x182>
 8001d24:	4b31      	ldr	r3, [pc, #196]	@ (8001dec <HAL_RCC_ClockConfig+0x244>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	e00d      	b.n	8001d46 <HAL_RCC_ClockConfig+0x19e>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d30:	fa93 f3a3 	rbit	r3, r3
 8001d34:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d36:	2302      	movs	r3, #2
 8001d38:	623b      	str	r3, [r7, #32]
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	fa93 f3a3 	rbit	r3, r3
 8001d40:	61fb      	str	r3, [r7, #28]
 8001d42:	4b2a      	ldr	r3, [pc, #168]	@ (8001dec <HAL_RCC_ClockConfig+0x244>)
 8001d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d46:	2202      	movs	r2, #2
 8001d48:	61ba      	str	r2, [r7, #24]
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	fa92 f2a2 	rbit	r2, r2
 8001d50:	617a      	str	r2, [r7, #20]
  return result;
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	fab2 f282 	clz	r2, r2
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	f042 0220 	orr.w	r2, r2, #32
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	f002 021f 	and.w	r2, r2, #31
 8001d64:	2101      	movs	r1, #1
 8001d66:	fa01 f202 	lsl.w	r2, r1, r2
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e07a      	b.n	8001e6a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d74:	4b1d      	ldr	r3, [pc, #116]	@ (8001dec <HAL_RCC_ClockConfig+0x244>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f023 0203 	bic.w	r2, r3, #3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	491a      	ldr	r1, [pc, #104]	@ (8001dec <HAL_RCC_ClockConfig+0x244>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d86:	f7fe fc57 	bl	8000638 <HAL_GetTick>
 8001d8a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8c:	e00a      	b.n	8001da4 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d8e:	f7fe fc53 	bl	8000638 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e062      	b.n	8001e6a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da4:	4b11      	ldr	r3, [pc, #68]	@ (8001dec <HAL_RCC_ClockConfig+0x244>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 020c 	and.w	r2, r3, #12
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d1eb      	bne.n	8001d8e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001db6:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <HAL_RCC_ClockConfig+0x240>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d215      	bcs.n	8001df0 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc4:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <HAL_RCC_ClockConfig+0x240>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 0207 	bic.w	r2, r3, #7
 8001dcc:	4906      	ldr	r1, [pc, #24]	@ (8001de8 <HAL_RCC_ClockConfig+0x240>)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd4:	4b04      	ldr	r3, [pc, #16]	@ (8001de8 <HAL_RCC_ClockConfig+0x240>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d006      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e041      	b.n	8001e6a <HAL_RCC_ClockConfig+0x2c2>
 8001de6:	bf00      	nop
 8001de8:	40022000 	.word	0x40022000
 8001dec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d008      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e74 <HAL_RCC_ClockConfig+0x2cc>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	491a      	ldr	r1, [pc, #104]	@ (8001e74 <HAL_RCC_ClockConfig+0x2cc>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d009      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e1a:	4b16      	ldr	r3, [pc, #88]	@ (8001e74 <HAL_RCC_ClockConfig+0x2cc>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4912      	ldr	r1, [pc, #72]	@ (8001e74 <HAL_RCC_ClockConfig+0x2cc>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e2e:	f000 f829 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 8001e32:	4601      	mov	r1, r0
 8001e34:	4b0f      	ldr	r3, [pc, #60]	@ (8001e74 <HAL_RCC_ClockConfig+0x2cc>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e3c:	22f0      	movs	r2, #240	@ 0xf0
 8001e3e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	fa92 f2a2 	rbit	r2, r2
 8001e46:	60fa      	str	r2, [r7, #12]
  return result;
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	fab2 f282 	clz	r2, r2
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	40d3      	lsrs	r3, r2
 8001e52:	4a09      	ldr	r2, [pc, #36]	@ (8001e78 <HAL_RCC_ClockConfig+0x2d0>)
 8001e54:	5cd3      	ldrb	r3, [r2, r3]
 8001e56:	fa21 f303 	lsr.w	r3, r1, r3
 8001e5a:	4a08      	ldr	r2, [pc, #32]	@ (8001e7c <HAL_RCC_ClockConfig+0x2d4>)
 8001e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001e5e:	4b08      	ldr	r3, [pc, #32]	@ (8001e80 <HAL_RCC_ClockConfig+0x2d8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe fba4 	bl	80005b0 <HAL_InitTick>
  
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3778      	adds	r7, #120	@ 0x78
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	08002cf0 	.word	0x08002cf0
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	20000004 	.word	0x20000004

08001e84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b087      	sub	sp, #28
 8001e88:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	2300      	movs	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d002      	beq.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x30>
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d003      	beq.n	8001eba <HAL_RCC_GetSysClockFreq+0x36>
 8001eb2:	e029      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001eb6:	613b      	str	r3, [r7, #16]
      break;
 8001eb8:	e029      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	0c9b      	lsrs	r3, r3, #18
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	4a18      	ldr	r2, [pc, #96]	@ (8001f24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ec4:	5cd3      	ldrb	r3, [r2, r3]
 8001ec6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8001ec8:	4b14      	ldr	r3, [pc, #80]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ecc:	f003 030f 	and.w	r3, r3, #15
 8001ed0:	4a15      	ldr	r2, [pc, #84]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ed2:	5cd3      	ldrb	r3, [r2, r3]
 8001ed4:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d008      	beq.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ee0:	4a0f      	ldr	r2, [pc, #60]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	fb02 f303 	mul.w	r3, r2, r3
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	e007      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ef2:	4a0b      	ldr	r2, [pc, #44]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	fb02 f303 	mul.w	r3, r2, r3
 8001f00:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	613b      	str	r3, [r7, #16]
      break;
 8001f06:	e002      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f08:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f0a:	613b      	str	r3, [r7, #16]
      break;
 8001f0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f0e:	693b      	ldr	r3, [r7, #16]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	371c      	adds	r7, #28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	007a1200 	.word	0x007a1200
 8001f24:	08002d08 	.word	0x08002d08
 8001f28:	08002d18 	.word	0x08002d18

08001f2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f30:	4b03      	ldr	r3, [pc, #12]	@ (8001f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f32:	681b      	ldr	r3, [r3, #0]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20000000 	.word	0x20000000

08001f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001f4a:	f7ff ffef 	bl	8001f2c <HAL_RCC_GetHCLKFreq>
 8001f4e:	4601      	mov	r1, r0
 8001f50:	4b0b      	ldr	r3, [pc, #44]	@ (8001f80 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001f58:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001f5c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	fa92 f2a2 	rbit	r2, r2
 8001f64:	603a      	str	r2, [r7, #0]
  return result;
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	fab2 f282 	clz	r2, r2
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	40d3      	lsrs	r3, r2
 8001f70:	4a04      	ldr	r2, [pc, #16]	@ (8001f84 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001f72:	5cd3      	ldrb	r3, [r2, r3]
 8001f74:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40021000 	.word	0x40021000
 8001f84:	08002d00 	.word	0x08002d00

08001f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001f8e:	f7ff ffcd 	bl	8001f2c <HAL_RCC_GetHCLKFreq>
 8001f92:	4601      	mov	r1, r0
 8001f94:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8001f9c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8001fa0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	fa92 f2a2 	rbit	r2, r2
 8001fa8:	603a      	str	r2, [r7, #0]
  return result;
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	fab2 f282 	clz	r2, r2
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	40d3      	lsrs	r3, r2
 8001fb4:	4a04      	ldr	r2, [pc, #16]	@ (8001fc8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001fb6:	5cd3      	ldrb	r3, [r2, r3]
 8001fb8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	08002d00 	.word	0x08002d00

08001fcc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b092      	sub	sp, #72	@ 0x48
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 80d2 	beq.w	8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ff0:	4b4d      	ldr	r3, [pc, #308]	@ (8002128 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10e      	bne.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffc:	4b4a      	ldr	r3, [pc, #296]	@ (8002128 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	4a49      	ldr	r2, [pc, #292]	@ (8002128 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002006:	61d3      	str	r3, [r2, #28]
 8002008:	4b47      	ldr	r3, [pc, #284]	@ (8002128 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002014:	2301      	movs	r3, #1
 8002016:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201a:	4b44      	ldr	r3, [pc, #272]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002022:	2b00      	cmp	r3, #0
 8002024:	d118      	bne.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002026:	4b41      	ldr	r3, [pc, #260]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a40      	ldr	r2, [pc, #256]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800202c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002030:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002032:	f7fe fb01 	bl	8000638 <HAL_GetTick>
 8002036:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002038:	e008      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800203a:	f7fe fafd 	bl	8000638 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b64      	cmp	r3, #100	@ 0x64
 8002046:	d901      	bls.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e1d4      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204c:	4b37      	ldr	r3, [pc, #220]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f0      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002058:	4b33      	ldr	r3, [pc, #204]	@ (8002128 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002060:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 8082 	beq.w	800216e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002072:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002074:	429a      	cmp	r2, r3
 8002076:	d07a      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002078:	4b2b      	ldr	r3, [pc, #172]	@ (8002128 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002080:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002082:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002086:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	461a      	mov	r2, r3
 800209a:	4b25      	ldr	r3, [pc, #148]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	461a      	mov	r2, r3
 80020a2:	2301      	movs	r3, #1
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020ae:	fa93 f3a3 	rbit	r3, r3
 80020b2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80020b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020b6:	fab3 f383 	clz	r3, r3
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	461a      	mov	r2, r3
 80020be:	4b1c      	ldr	r3, [pc, #112]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	461a      	mov	r2, r3
 80020c6:	2300      	movs	r3, #0
 80020c8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020ca:	4a17      	ldr	r2, [pc, #92]	@ (8002128 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80020cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020ce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d049      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020da:	f7fe faad 	bl	8000638 <HAL_GetTick>
 80020de:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e0:	e00a      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e2:	f7fe faa9 	bl	8000638 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e17e      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80020f8:	2302      	movs	r3, #2
 80020fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020fe:	fa93 f3a3 	rbit	r3, r3
 8002102:	627b      	str	r3, [r7, #36]	@ 0x24
 8002104:	2302      	movs	r3, #2
 8002106:	623b      	str	r3, [r7, #32]
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	fa93 f3a3 	rbit	r3, r3
 800210e:	61fb      	str	r3, [r7, #28]
  return result;
 8002110:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002112:	fab3 f383 	clz	r3, r3
 8002116:	b2db      	uxtb	r3, r3
 8002118:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d108      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002122:	4b01      	ldr	r3, [pc, #4]	@ (8002128 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	e00d      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002128:	40021000 	.word	0x40021000
 800212c:	40007000 	.word	0x40007000
 8002130:	10908100 	.word	0x10908100
 8002134:	2302      	movs	r3, #2
 8002136:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	fa93 f3a3 	rbit	r3, r3
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	4b9a      	ldr	r3, [pc, #616]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002144:	2202      	movs	r2, #2
 8002146:	613a      	str	r2, [r7, #16]
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	fa92 f2a2 	rbit	r2, r2
 800214e:	60fa      	str	r2, [r7, #12]
  return result;
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	fab2 f282 	clz	r2, r2
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	f002 021f 	and.w	r2, r2, #31
 8002162:	2101      	movs	r1, #1
 8002164:	fa01 f202 	lsl.w	r2, r1, r2
 8002168:	4013      	ands	r3, r2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0b9      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800216e:	4b8f      	ldr	r3, [pc, #572]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	498c      	ldr	r1, [pc, #560]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800217c:	4313      	orrs	r3, r2
 800217e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002180:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002184:	2b01      	cmp	r3, #1
 8002186:	d105      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002188:	4b88      	ldr	r3, [pc, #544]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	4a87      	ldr	r2, [pc, #540]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800218e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002192:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021a0:	4b82      	ldr	r3, [pc, #520]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a4:	f023 0203 	bic.w	r2, r3, #3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	497f      	ldr	r1, [pc, #508]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d008      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021be:	4b7b      	ldr	r3, [pc, #492]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	4978      	ldr	r1, [pc, #480]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d008      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021dc:	4b73      	ldr	r3, [pc, #460]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	4970      	ldr	r1, [pc, #448]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d008      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021fa:	4b6c      	ldr	r3, [pc, #432]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	f023 0210 	bic.w	r2, r3, #16
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	4969      	ldr	r1, [pc, #420]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002208:	4313      	orrs	r3, r2
 800220a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002218:	4b64      	ldr	r3, [pc, #400]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002224:	4961      	ldr	r1, [pc, #388]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002226:	4313      	orrs	r3, r2
 8002228:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002232:	2b00      	cmp	r3, #0
 8002234:	d008      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002236:	4b5d      	ldr	r3, [pc, #372]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	f023 0220 	bic.w	r2, r3, #32
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	495a      	ldr	r1, [pc, #360]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002244:	4313      	orrs	r3, r2
 8002246:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d008      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002254:	4b55      	ldr	r3, [pc, #340]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002258:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002260:	4952      	ldr	r1, [pc, #328]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002262:	4313      	orrs	r3, r2
 8002264:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d008      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002272:	4b4e      	ldr	r3, [pc, #312]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	494b      	ldr	r1, [pc, #300]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002280:	4313      	orrs	r3, r2
 8002282:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0310 	and.w	r3, r3, #16
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002290:	4b46      	ldr	r3, [pc, #280]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002294:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	4943      	ldr	r1, [pc, #268]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d008      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022ae:	4b3f      	ldr	r3, [pc, #252]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	493c      	ldr	r1, [pc, #240]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80022cc:	4b37      	ldr	r3, [pc, #220]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d8:	4934      	ldr	r1, [pc, #208]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d008      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80022ea:	4b30      	ldr	r3, [pc, #192]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ee:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f6:	492d      	ldr	r1, [pc, #180]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d008      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002308:	4b28      	ldr	r3, [pc, #160]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800230a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002314:	4925      	ldr	r1, [pc, #148]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002316:	4313      	orrs	r3, r2
 8002318:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d008      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002326:	4b21      	ldr	r3, [pc, #132]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	491e      	ldr	r1, [pc, #120]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002334:	4313      	orrs	r3, r2
 8002336:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002344:	4b19      	ldr	r3, [pc, #100]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002348:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002350:	4916      	ldr	r1, [pc, #88]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002352:	4313      	orrs	r3, r2
 8002354:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d008      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002362:	4b12      	ldr	r3, [pc, #72]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800236e:	490f      	ldr	r1, [pc, #60]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002370:	4313      	orrs	r3, r2
 8002372:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002380:	4b0a      	ldr	r3, [pc, #40]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002384:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238c:	4907      	ldr	r1, [pc, #28]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800238e:	4313      	orrs	r3, r2
 8002390:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00c      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800239e:	4b03      	ldr	r3, [pc, #12]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	e002      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000
 80023b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023b2:	4913      	ldr	r1, [pc, #76]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d008      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80023c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80023c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d0:	490b      	ldr	r1, [pc, #44]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d008      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80023e2:	4b07      	ldr	r3, [pc, #28]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023ee:	4904      	ldr	r1, [pc, #16]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3748      	adds	r7, #72	@ 0x48
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000

08002404 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e040      	b.n	8002498 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800241a:	2b00      	cmp	r3, #0
 800241c:	d106      	bne.n	800242c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7fe f840 	bl	80004ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2224      	movs	r2, #36	@ 0x24
 8002430:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0201 	bic.w	r2, r2, #1
 8002440:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002446:	2b00      	cmp	r3, #0
 8002448:	d002      	beq.n	8002450 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f9fc 	bl	8002848 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f825 	bl	80024a0 <UART_SetConfig>
 8002456:	4603      	mov	r3, r0
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e01b      	b.n	8002498 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800246e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800247e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 fa7b 	bl	800298c <UART_CheckIdleState>
 8002496:	4603      	mov	r3, r0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	4b92      	ldr	r3, [pc, #584]	@ (8002714 <UART_SetConfig+0x274>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	6979      	ldr	r1, [r7, #20]
 80024d4:	430b      	orrs	r3, r1
 80024d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	430a      	orrs	r2, r1
 8002510:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a80      	ldr	r2, [pc, #512]	@ (8002718 <UART_SetConfig+0x278>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d120      	bne.n	800255e <UART_SetConfig+0xbe>
 800251c:	4b7f      	ldr	r3, [pc, #508]	@ (800271c <UART_SetConfig+0x27c>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b03      	cmp	r3, #3
 8002526:	d817      	bhi.n	8002558 <UART_SetConfig+0xb8>
 8002528:	a201      	add	r2, pc, #4	@ (adr r2, 8002530 <UART_SetConfig+0x90>)
 800252a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252e:	bf00      	nop
 8002530:	08002541 	.word	0x08002541
 8002534:	0800254d 	.word	0x0800254d
 8002538:	08002553 	.word	0x08002553
 800253c:	08002547 	.word	0x08002547
 8002540:	2301      	movs	r3, #1
 8002542:	77fb      	strb	r3, [r7, #31]
 8002544:	e0b5      	b.n	80026b2 <UART_SetConfig+0x212>
 8002546:	2302      	movs	r3, #2
 8002548:	77fb      	strb	r3, [r7, #31]
 800254a:	e0b2      	b.n	80026b2 <UART_SetConfig+0x212>
 800254c:	2304      	movs	r3, #4
 800254e:	77fb      	strb	r3, [r7, #31]
 8002550:	e0af      	b.n	80026b2 <UART_SetConfig+0x212>
 8002552:	2308      	movs	r3, #8
 8002554:	77fb      	strb	r3, [r7, #31]
 8002556:	e0ac      	b.n	80026b2 <UART_SetConfig+0x212>
 8002558:	2310      	movs	r3, #16
 800255a:	77fb      	strb	r3, [r7, #31]
 800255c:	e0a9      	b.n	80026b2 <UART_SetConfig+0x212>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a6f      	ldr	r2, [pc, #444]	@ (8002720 <UART_SetConfig+0x280>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d124      	bne.n	80025b2 <UART_SetConfig+0x112>
 8002568:	4b6c      	ldr	r3, [pc, #432]	@ (800271c <UART_SetConfig+0x27c>)
 800256a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002570:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002574:	d011      	beq.n	800259a <UART_SetConfig+0xfa>
 8002576:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800257a:	d817      	bhi.n	80025ac <UART_SetConfig+0x10c>
 800257c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002580:	d011      	beq.n	80025a6 <UART_SetConfig+0x106>
 8002582:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002586:	d811      	bhi.n	80025ac <UART_SetConfig+0x10c>
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <UART_SetConfig+0xf4>
 800258c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002590:	d006      	beq.n	80025a0 <UART_SetConfig+0x100>
 8002592:	e00b      	b.n	80025ac <UART_SetConfig+0x10c>
 8002594:	2300      	movs	r3, #0
 8002596:	77fb      	strb	r3, [r7, #31]
 8002598:	e08b      	b.n	80026b2 <UART_SetConfig+0x212>
 800259a:	2302      	movs	r3, #2
 800259c:	77fb      	strb	r3, [r7, #31]
 800259e:	e088      	b.n	80026b2 <UART_SetConfig+0x212>
 80025a0:	2304      	movs	r3, #4
 80025a2:	77fb      	strb	r3, [r7, #31]
 80025a4:	e085      	b.n	80026b2 <UART_SetConfig+0x212>
 80025a6:	2308      	movs	r3, #8
 80025a8:	77fb      	strb	r3, [r7, #31]
 80025aa:	e082      	b.n	80026b2 <UART_SetConfig+0x212>
 80025ac:	2310      	movs	r3, #16
 80025ae:	77fb      	strb	r3, [r7, #31]
 80025b0:	e07f      	b.n	80026b2 <UART_SetConfig+0x212>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a5b      	ldr	r2, [pc, #364]	@ (8002724 <UART_SetConfig+0x284>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d124      	bne.n	8002606 <UART_SetConfig+0x166>
 80025bc:	4b57      	ldr	r3, [pc, #348]	@ (800271c <UART_SetConfig+0x27c>)
 80025be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80025c4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80025c8:	d011      	beq.n	80025ee <UART_SetConfig+0x14e>
 80025ca:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80025ce:	d817      	bhi.n	8002600 <UART_SetConfig+0x160>
 80025d0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80025d4:	d011      	beq.n	80025fa <UART_SetConfig+0x15a>
 80025d6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80025da:	d811      	bhi.n	8002600 <UART_SetConfig+0x160>
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <UART_SetConfig+0x148>
 80025e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80025e4:	d006      	beq.n	80025f4 <UART_SetConfig+0x154>
 80025e6:	e00b      	b.n	8002600 <UART_SetConfig+0x160>
 80025e8:	2300      	movs	r3, #0
 80025ea:	77fb      	strb	r3, [r7, #31]
 80025ec:	e061      	b.n	80026b2 <UART_SetConfig+0x212>
 80025ee:	2302      	movs	r3, #2
 80025f0:	77fb      	strb	r3, [r7, #31]
 80025f2:	e05e      	b.n	80026b2 <UART_SetConfig+0x212>
 80025f4:	2304      	movs	r3, #4
 80025f6:	77fb      	strb	r3, [r7, #31]
 80025f8:	e05b      	b.n	80026b2 <UART_SetConfig+0x212>
 80025fa:	2308      	movs	r3, #8
 80025fc:	77fb      	strb	r3, [r7, #31]
 80025fe:	e058      	b.n	80026b2 <UART_SetConfig+0x212>
 8002600:	2310      	movs	r3, #16
 8002602:	77fb      	strb	r3, [r7, #31]
 8002604:	e055      	b.n	80026b2 <UART_SetConfig+0x212>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a47      	ldr	r2, [pc, #284]	@ (8002728 <UART_SetConfig+0x288>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d124      	bne.n	800265a <UART_SetConfig+0x1ba>
 8002610:	4b42      	ldr	r3, [pc, #264]	@ (800271c <UART_SetConfig+0x27c>)
 8002612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002614:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002618:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800261c:	d011      	beq.n	8002642 <UART_SetConfig+0x1a2>
 800261e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002622:	d817      	bhi.n	8002654 <UART_SetConfig+0x1b4>
 8002624:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002628:	d011      	beq.n	800264e <UART_SetConfig+0x1ae>
 800262a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800262e:	d811      	bhi.n	8002654 <UART_SetConfig+0x1b4>
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <UART_SetConfig+0x19c>
 8002634:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002638:	d006      	beq.n	8002648 <UART_SetConfig+0x1a8>
 800263a:	e00b      	b.n	8002654 <UART_SetConfig+0x1b4>
 800263c:	2300      	movs	r3, #0
 800263e:	77fb      	strb	r3, [r7, #31]
 8002640:	e037      	b.n	80026b2 <UART_SetConfig+0x212>
 8002642:	2302      	movs	r3, #2
 8002644:	77fb      	strb	r3, [r7, #31]
 8002646:	e034      	b.n	80026b2 <UART_SetConfig+0x212>
 8002648:	2304      	movs	r3, #4
 800264a:	77fb      	strb	r3, [r7, #31]
 800264c:	e031      	b.n	80026b2 <UART_SetConfig+0x212>
 800264e:	2308      	movs	r3, #8
 8002650:	77fb      	strb	r3, [r7, #31]
 8002652:	e02e      	b.n	80026b2 <UART_SetConfig+0x212>
 8002654:	2310      	movs	r3, #16
 8002656:	77fb      	strb	r3, [r7, #31]
 8002658:	e02b      	b.n	80026b2 <UART_SetConfig+0x212>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a33      	ldr	r2, [pc, #204]	@ (800272c <UART_SetConfig+0x28c>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d124      	bne.n	80026ae <UART_SetConfig+0x20e>
 8002664:	4b2d      	ldr	r3, [pc, #180]	@ (800271c <UART_SetConfig+0x27c>)
 8002666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002668:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800266c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002670:	d011      	beq.n	8002696 <UART_SetConfig+0x1f6>
 8002672:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002676:	d817      	bhi.n	80026a8 <UART_SetConfig+0x208>
 8002678:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800267c:	d011      	beq.n	80026a2 <UART_SetConfig+0x202>
 800267e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002682:	d811      	bhi.n	80026a8 <UART_SetConfig+0x208>
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <UART_SetConfig+0x1f0>
 8002688:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800268c:	d006      	beq.n	800269c <UART_SetConfig+0x1fc>
 800268e:	e00b      	b.n	80026a8 <UART_SetConfig+0x208>
 8002690:	2300      	movs	r3, #0
 8002692:	77fb      	strb	r3, [r7, #31]
 8002694:	e00d      	b.n	80026b2 <UART_SetConfig+0x212>
 8002696:	2302      	movs	r3, #2
 8002698:	77fb      	strb	r3, [r7, #31]
 800269a:	e00a      	b.n	80026b2 <UART_SetConfig+0x212>
 800269c:	2304      	movs	r3, #4
 800269e:	77fb      	strb	r3, [r7, #31]
 80026a0:	e007      	b.n	80026b2 <UART_SetConfig+0x212>
 80026a2:	2308      	movs	r3, #8
 80026a4:	77fb      	strb	r3, [r7, #31]
 80026a6:	e004      	b.n	80026b2 <UART_SetConfig+0x212>
 80026a8:	2310      	movs	r3, #16
 80026aa:	77fb      	strb	r3, [r7, #31]
 80026ac:	e001      	b.n	80026b2 <UART_SetConfig+0x212>
 80026ae:	2310      	movs	r3, #16
 80026b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026ba:	d16b      	bne.n	8002794 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80026bc:	7ffb      	ldrb	r3, [r7, #31]
 80026be:	2b08      	cmp	r3, #8
 80026c0:	d838      	bhi.n	8002734 <UART_SetConfig+0x294>
 80026c2:	a201      	add	r2, pc, #4	@ (adr r2, 80026c8 <UART_SetConfig+0x228>)
 80026c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c8:	080026ed 	.word	0x080026ed
 80026cc:	080026f5 	.word	0x080026f5
 80026d0:	080026fd 	.word	0x080026fd
 80026d4:	08002735 	.word	0x08002735
 80026d8:	08002703 	.word	0x08002703
 80026dc:	08002735 	.word	0x08002735
 80026e0:	08002735 	.word	0x08002735
 80026e4:	08002735 	.word	0x08002735
 80026e8:	0800270b 	.word	0x0800270b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026ec:	f7ff fc2a 	bl	8001f44 <HAL_RCC_GetPCLK1Freq>
 80026f0:	61b8      	str	r0, [r7, #24]
        break;
 80026f2:	e024      	b.n	800273e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80026f4:	f7ff fc48 	bl	8001f88 <HAL_RCC_GetPCLK2Freq>
 80026f8:	61b8      	str	r0, [r7, #24]
        break;
 80026fa:	e020      	b.n	800273e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002730 <UART_SetConfig+0x290>)
 80026fe:	61bb      	str	r3, [r7, #24]
        break;
 8002700:	e01d      	b.n	800273e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002702:	f7ff fbbf 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 8002706:	61b8      	str	r0, [r7, #24]
        break;
 8002708:	e019      	b.n	800273e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800270a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800270e:	61bb      	str	r3, [r7, #24]
        break;
 8002710:	e015      	b.n	800273e <UART_SetConfig+0x29e>
 8002712:	bf00      	nop
 8002714:	efff69f3 	.word	0xefff69f3
 8002718:	40013800 	.word	0x40013800
 800271c:	40021000 	.word	0x40021000
 8002720:	40004400 	.word	0x40004400
 8002724:	40004800 	.word	0x40004800
 8002728:	40004c00 	.word	0x40004c00
 800272c:	40005000 	.word	0x40005000
 8002730:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	77bb      	strb	r3, [r7, #30]
        break;
 800273c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d073      	beq.n	800282c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	005a      	lsls	r2, r3, #1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	085b      	lsrs	r3, r3, #1
 800274e:	441a      	add	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	fbb2 f3f3 	udiv	r3, r2, r3
 8002758:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	2b0f      	cmp	r3, #15
 800275e:	d916      	bls.n	800278e <UART_SetConfig+0x2ee>
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002766:	d212      	bcs.n	800278e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	b29b      	uxth	r3, r3
 800276c:	f023 030f 	bic.w	r3, r3, #15
 8002770:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	085b      	lsrs	r3, r3, #1
 8002776:	b29b      	uxth	r3, r3
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	b29a      	uxth	r2, r3
 800277e:	89fb      	ldrh	r3, [r7, #14]
 8002780:	4313      	orrs	r3, r2
 8002782:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	89fa      	ldrh	r2, [r7, #14]
 800278a:	60da      	str	r2, [r3, #12]
 800278c:	e04e      	b.n	800282c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	77bb      	strb	r3, [r7, #30]
 8002792:	e04b      	b.n	800282c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002794:	7ffb      	ldrb	r3, [r7, #31]
 8002796:	2b08      	cmp	r3, #8
 8002798:	d827      	bhi.n	80027ea <UART_SetConfig+0x34a>
 800279a:	a201      	add	r2, pc, #4	@ (adr r2, 80027a0 <UART_SetConfig+0x300>)
 800279c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a0:	080027c5 	.word	0x080027c5
 80027a4:	080027cd 	.word	0x080027cd
 80027a8:	080027d5 	.word	0x080027d5
 80027ac:	080027eb 	.word	0x080027eb
 80027b0:	080027db 	.word	0x080027db
 80027b4:	080027eb 	.word	0x080027eb
 80027b8:	080027eb 	.word	0x080027eb
 80027bc:	080027eb 	.word	0x080027eb
 80027c0:	080027e3 	.word	0x080027e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027c4:	f7ff fbbe 	bl	8001f44 <HAL_RCC_GetPCLK1Freq>
 80027c8:	61b8      	str	r0, [r7, #24]
        break;
 80027ca:	e013      	b.n	80027f4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027cc:	f7ff fbdc 	bl	8001f88 <HAL_RCC_GetPCLK2Freq>
 80027d0:	61b8      	str	r0, [r7, #24]
        break;
 80027d2:	e00f      	b.n	80027f4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002844 <UART_SetConfig+0x3a4>)
 80027d6:	61bb      	str	r3, [r7, #24]
        break;
 80027d8:	e00c      	b.n	80027f4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027da:	f7ff fb53 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 80027de:	61b8      	str	r0, [r7, #24]
        break;
 80027e0:	e008      	b.n	80027f4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027e6:	61bb      	str	r3, [r7, #24]
        break;
 80027e8:	e004      	b.n	80027f4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	77bb      	strb	r3, [r7, #30]
        break;
 80027f2:	bf00      	nop
    }

    if (pclk != 0U)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d018      	beq.n	800282c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	085a      	lsrs	r2, r3, #1
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	441a      	add	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	fbb2 f3f3 	udiv	r3, r2, r3
 800280c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	2b0f      	cmp	r3, #15
 8002812:	d909      	bls.n	8002828 <UART_SetConfig+0x388>
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800281a:	d205      	bcs.n	8002828 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	b29a      	uxth	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	60da      	str	r2, [r3, #12]
 8002826:	e001      	b.n	800282c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002838:	7fbb      	ldrb	r3, [r7, #30]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3720      	adds	r7, #32
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	007a1200 	.word	0x007a1200

08002848 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00a      	beq.n	80028fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	f003 0320 	and.w	r3, r3, #32
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002924:	2b00      	cmp	r3, #0
 8002926:	d01a      	beq.n	800295e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002946:	d10a      	bne.n	800295e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	605a      	str	r2, [r3, #4]
  }
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b098      	sub	sp, #96	@ 0x60
 8002990:	af02      	add	r7, sp, #8
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800299c:	f7fd fe4c 	bl	8000638 <HAL_GetTick>
 80029a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d12e      	bne.n	8002a0e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029b8:	2200      	movs	r2, #0
 80029ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f88c 	bl	8002adc <UART_WaitOnFlagUntilTimeout>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d021      	beq.n	8002a0e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029d2:	e853 3f00 	ldrex	r3, [r3]
 80029d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80029d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029de:	653b      	str	r3, [r7, #80]	@ 0x50
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	461a      	mov	r2, r3
 80029e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80029ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80029ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029f0:	e841 2300 	strex	r3, r2, [r1]
 80029f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80029f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1e6      	bne.n	80029ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2220      	movs	r2, #32
 8002a00:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e062      	b.n	8002ad4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d149      	bne.n	8002ab0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a24:	2200      	movs	r2, #0
 8002a26:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f856 	bl	8002adc <UART_WaitOnFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d03c      	beq.n	8002ab0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3e:	e853 3f00 	ldrex	r3, [r3]
 8002a42:	623b      	str	r3, [r7, #32]
   return(result);
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	461a      	mov	r2, r3
 8002a52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a54:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a56:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a5c:	e841 2300 	strex	r3, r2, [r1]
 8002a60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1e6      	bne.n	8002a36 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	3308      	adds	r3, #8
 8002a6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	e853 3f00 	ldrex	r3, [r3]
 8002a76:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f023 0301 	bic.w	r3, r3, #1
 8002a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	3308      	adds	r3, #8
 8002a86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a88:	61fa      	str	r2, [r7, #28]
 8002a8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8c:	69b9      	ldr	r1, [r7, #24]
 8002a8e:	69fa      	ldr	r2, [r7, #28]
 8002a90:	e841 2300 	strex	r3, r2, [r1]
 8002a94:	617b      	str	r3, [r7, #20]
   return(result);
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1e5      	bne.n	8002a68 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e011      	b.n	8002ad4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3758      	adds	r7, #88	@ 0x58
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aec:	e04f      	b.n	8002b8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002af4:	d04b      	beq.n	8002b8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af6:	f7fd fd9f 	bl	8000638 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d302      	bcc.n	8002b0c <UART_WaitOnFlagUntilTimeout+0x30>
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e04e      	b.n	8002bae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d037      	beq.n	8002b8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2b80      	cmp	r3, #128	@ 0x80
 8002b22:	d034      	beq.n	8002b8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2b40      	cmp	r3, #64	@ 0x40
 8002b28:	d031      	beq.n	8002b8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d110      	bne.n	8002b5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2208      	movs	r2, #8
 8002b3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 f838 	bl	8002bb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2208      	movs	r2, #8
 8002b4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e029      	b.n	8002bae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b68:	d111      	bne.n	8002b8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f81e 	bl	8002bb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e00f      	b.n	8002bae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	69da      	ldr	r2, [r3, #28]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	4013      	ands	r3, r2
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	bf0c      	ite	eq
 8002b9e:	2301      	moveq	r3, #1
 8002ba0:	2300      	movne	r3, #0
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d0a0      	beq.n	8002aee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b095      	sub	sp, #84	@ 0x54
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bc6:	e853 3f00 	ldrex	r3, [r3]
 8002bca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bdc:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bde:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002be2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002be4:	e841 2300 	strex	r3, r2, [r1]
 8002be8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1e6      	bne.n	8002bbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	3308      	adds	r3, #8
 8002bf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	e853 3f00 	ldrex	r3, [r3]
 8002bfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f023 0301 	bic.w	r3, r3, #1
 8002c06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	3308      	adds	r3, #8
 8002c0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c18:	e841 2300 	strex	r3, r2, [r1]
 8002c1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1e5      	bne.n	8002bf0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d118      	bne.n	8002c5e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	e853 3f00 	ldrex	r3, [r3]
 8002c38:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f023 0310 	bic.w	r3, r3, #16
 8002c40:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	461a      	mov	r2, r3
 8002c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c4a:	61bb      	str	r3, [r7, #24]
 8002c4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c4e:	6979      	ldr	r1, [r7, #20]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	e841 2300 	strex	r3, r2, [r1]
 8002c56:	613b      	str	r3, [r7, #16]
   return(result);
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1e6      	bne.n	8002c2c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002c72:	bf00      	nop
 8002c74:	3754      	adds	r7, #84	@ 0x54
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <memset>:
 8002c7e:	4402      	add	r2, r0
 8002c80:	4603      	mov	r3, r0
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d100      	bne.n	8002c88 <memset+0xa>
 8002c86:	4770      	bx	lr
 8002c88:	f803 1b01 	strb.w	r1, [r3], #1
 8002c8c:	e7f9      	b.n	8002c82 <memset+0x4>
	...

08002c90 <__libc_init_array>:
 8002c90:	b570      	push	{r4, r5, r6, lr}
 8002c92:	4d0d      	ldr	r5, [pc, #52]	@ (8002cc8 <__libc_init_array+0x38>)
 8002c94:	4c0d      	ldr	r4, [pc, #52]	@ (8002ccc <__libc_init_array+0x3c>)
 8002c96:	1b64      	subs	r4, r4, r5
 8002c98:	10a4      	asrs	r4, r4, #2
 8002c9a:	2600      	movs	r6, #0
 8002c9c:	42a6      	cmp	r6, r4
 8002c9e:	d109      	bne.n	8002cb4 <__libc_init_array+0x24>
 8002ca0:	4d0b      	ldr	r5, [pc, #44]	@ (8002cd0 <__libc_init_array+0x40>)
 8002ca2:	4c0c      	ldr	r4, [pc, #48]	@ (8002cd4 <__libc_init_array+0x44>)
 8002ca4:	f000 f818 	bl	8002cd8 <_init>
 8002ca8:	1b64      	subs	r4, r4, r5
 8002caa:	10a4      	asrs	r4, r4, #2
 8002cac:	2600      	movs	r6, #0
 8002cae:	42a6      	cmp	r6, r4
 8002cb0:	d105      	bne.n	8002cbe <__libc_init_array+0x2e>
 8002cb2:	bd70      	pop	{r4, r5, r6, pc}
 8002cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cb8:	4798      	blx	r3
 8002cba:	3601      	adds	r6, #1
 8002cbc:	e7ee      	b.n	8002c9c <__libc_init_array+0xc>
 8002cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cc2:	4798      	blx	r3
 8002cc4:	3601      	adds	r6, #1
 8002cc6:	e7f2      	b.n	8002cae <__libc_init_array+0x1e>
 8002cc8:	08002d28 	.word	0x08002d28
 8002ccc:	08002d28 	.word	0x08002d28
 8002cd0:	08002d28 	.word	0x08002d28
 8002cd4:	08002d2c 	.word	0x08002d2c

08002cd8 <_init>:
 8002cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cda:	bf00      	nop
 8002cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cde:	bc08      	pop	{r3}
 8002ce0:	469e      	mov	lr, r3
 8002ce2:	4770      	bx	lr

08002ce4 <_fini>:
 8002ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce6:	bf00      	nop
 8002ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cea:	bc08      	pop	{r3}
 8002cec:	469e      	mov	lr, r3
 8002cee:	4770      	bx	lr
