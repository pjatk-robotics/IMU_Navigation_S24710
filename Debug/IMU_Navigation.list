
IMU_Navigation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004684  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08004824  08004824  00005824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800493c  0800493c  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800493c  0800493c  0000593c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004944  08004944  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004944  08004944  00005944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004948  08004948  00005948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800494c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006068  2**0
                  CONTENTS
 10 .bss          00000250  20000068  20000068  00006068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002b8  200002b8  00006068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cb8c  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002090  00000000  00000000  00012c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a98  00000000  00000000  00014cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000826  00000000  00000000  00015750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000211e9  00000000  00000000  00015f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ef5c  00000000  00000000  0003715f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2fda  00000000  00000000  000460bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00109095  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003254  00000000  00000000  001090d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0010c32c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800480c 	.word	0x0800480c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800480c 	.word	0x0800480c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08a      	sub	sp, #40	@ 0x28
 8000284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	f107 0314 	add.w	r3, r7, #20
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000296:	4b2b      	ldr	r3, [pc, #172]	@ (8000344 <MX_GPIO_Init+0xc4>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	4a2a      	ldr	r2, [pc, #168]	@ (8000344 <MX_GPIO_Init+0xc4>)
 800029c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80002a0:	6153      	str	r3, [r2, #20]
 80002a2:	4b28      	ldr	r3, [pc, #160]	@ (8000344 <MX_GPIO_Init+0xc4>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80002aa:	613b      	str	r3, [r7, #16]
 80002ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ae:	4b25      	ldr	r3, [pc, #148]	@ (8000344 <MX_GPIO_Init+0xc4>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a24      	ldr	r2, [pc, #144]	@ (8000344 <MX_GPIO_Init+0xc4>)
 80002b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80002b8:	6153      	str	r3, [r2, #20]
 80002ba:	4b22      	ldr	r3, [pc, #136]	@ (8000344 <MX_GPIO_Init+0xc4>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80002c2:	60fb      	str	r3, [r7, #12]
 80002c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000344 <MX_GPIO_Init+0xc4>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a1e      	ldr	r2, [pc, #120]	@ (8000344 <MX_GPIO_Init+0xc4>)
 80002cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002d0:	6153      	str	r3, [r2, #20]
 80002d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000344 <MX_GPIO_Init+0xc4>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80002da:	60bb      	str	r3, [r7, #8]
 80002dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002de:	4b19      	ldr	r3, [pc, #100]	@ (8000344 <MX_GPIO_Init+0xc4>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a18      	ldr	r2, [pc, #96]	@ (8000344 <MX_GPIO_Init+0xc4>)
 80002e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b16      	ldr	r3, [pc, #88]	@ (8000344 <MX_GPIO_Init+0xc4>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2120      	movs	r1, #32
 80002fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002fe:	f000 fe7f 	bl	8001000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000302:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000308:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800030c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030e:	2300      	movs	r3, #0
 8000310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000312:	f107 0314 	add.w	r3, r7, #20
 8000316:	4619      	mov	r1, r3
 8000318:	480b      	ldr	r0, [pc, #44]	@ (8000348 <MX_GPIO_Init+0xc8>)
 800031a:	f000 fce7 	bl	8000cec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800031e:	2320      	movs	r3, #32
 8000320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000322:	2301      	movs	r3, #1
 8000324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000326:	2300      	movs	r3, #0
 8000328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032a:	2300      	movs	r3, #0
 800032c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	4619      	mov	r1, r3
 8000334:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000338:	f000 fcd8 	bl	8000cec <HAL_GPIO_Init>

}
 800033c:	bf00      	nop
 800033e:	3728      	adds	r7, #40	@ 0x28
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	40021000 	.word	0x40021000
 8000348:	48000800 	.word	0x48000800

0800034c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000350:	4b1b      	ldr	r3, [pc, #108]	@ (80003c0 <MX_I2C1_Init+0x74>)
 8000352:	4a1c      	ldr	r2, [pc, #112]	@ (80003c4 <MX_I2C1_Init+0x78>)
 8000354:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000356:	4b1a      	ldr	r3, [pc, #104]	@ (80003c0 <MX_I2C1_Init+0x74>)
 8000358:	4a1b      	ldr	r2, [pc, #108]	@ (80003c8 <MX_I2C1_Init+0x7c>)
 800035a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800035c:	4b18      	ldr	r3, [pc, #96]	@ (80003c0 <MX_I2C1_Init+0x74>)
 800035e:	2200      	movs	r2, #0
 8000360:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000362:	4b17      	ldr	r3, [pc, #92]	@ (80003c0 <MX_I2C1_Init+0x74>)
 8000364:	2201      	movs	r2, #1
 8000366:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000368:	4b15      	ldr	r3, [pc, #84]	@ (80003c0 <MX_I2C1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800036e:	4b14      	ldr	r3, [pc, #80]	@ (80003c0 <MX_I2C1_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000374:	4b12      	ldr	r3, [pc, #72]	@ (80003c0 <MX_I2C1_Init+0x74>)
 8000376:	2200      	movs	r2, #0
 8000378:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800037a:	4b11      	ldr	r3, [pc, #68]	@ (80003c0 <MX_I2C1_Init+0x74>)
 800037c:	2200      	movs	r2, #0
 800037e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000380:	4b0f      	ldr	r3, [pc, #60]	@ (80003c0 <MX_I2C1_Init+0x74>)
 8000382:	2200      	movs	r2, #0
 8000384:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000386:	480e      	ldr	r0, [pc, #56]	@ (80003c0 <MX_I2C1_Init+0x74>)
 8000388:	f000 fe6c 	bl	8001064 <HAL_I2C_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000392:	f000 f9ad 	bl	80006f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000396:	2100      	movs	r1, #0
 8000398:	4809      	ldr	r0, [pc, #36]	@ (80003c0 <MX_I2C1_Init+0x74>)
 800039a:	f001 f947 	bl	800162c <HAL_I2CEx_ConfigAnalogFilter>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003a4:	f000 f9a4 	bl	80006f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003a8:	2100      	movs	r1, #0
 80003aa:	4805      	ldr	r0, [pc, #20]	@ (80003c0 <MX_I2C1_Init+0x74>)
 80003ac:	f001 f989 	bl	80016c2 <HAL_I2CEx_ConfigDigitalFilter>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003b6:	f000 f99b 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	20000084 	.word	0x20000084
 80003c4:	40005400 	.word	0x40005400
 80003c8:	00201d2b 	.word	0x00201d2b

080003cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b08a      	sub	sp, #40	@ 0x28
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d4:	f107 0314 	add.w	r3, r7, #20
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
 80003e2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a17      	ldr	r2, [pc, #92]	@ (8000448 <HAL_I2C_MspInit+0x7c>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d128      	bne.n	8000440 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ee:	4b17      	ldr	r3, [pc, #92]	@ (800044c <HAL_I2C_MspInit+0x80>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a16      	ldr	r2, [pc, #88]	@ (800044c <HAL_I2C_MspInit+0x80>)
 80003f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80003f8:	6153      	str	r3, [r2, #20]
 80003fa:	4b14      	ldr	r3, [pc, #80]	@ (800044c <HAL_I2C_MspInit+0x80>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000402:	613b      	str	r3, [r7, #16]
 8000404:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000406:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800040a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800040c:	2312      	movs	r3, #18
 800040e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000410:	2300      	movs	r3, #0
 8000412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000414:	2303      	movs	r3, #3
 8000416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000418:	2304      	movs	r3, #4
 800041a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800041c:	f107 0314 	add.w	r3, r7, #20
 8000420:	4619      	mov	r1, r3
 8000422:	480b      	ldr	r0, [pc, #44]	@ (8000450 <HAL_I2C_MspInit+0x84>)
 8000424:	f000 fc62 	bl	8000cec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000428:	4b08      	ldr	r3, [pc, #32]	@ (800044c <HAL_I2C_MspInit+0x80>)
 800042a:	69db      	ldr	r3, [r3, #28]
 800042c:	4a07      	ldr	r2, [pc, #28]	@ (800044c <HAL_I2C_MspInit+0x80>)
 800042e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000432:	61d3      	str	r3, [r2, #28]
 8000434:	4b05      	ldr	r3, [pc, #20]	@ (800044c <HAL_I2C_MspInit+0x80>)
 8000436:	69db      	ldr	r3, [r3, #28]
 8000438:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000440:	bf00      	nop
 8000442:	3728      	adds	r7, #40	@ 0x28
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40005400 	.word	0x40005400
 800044c:	40021000 	.word	0x40021000
 8000450:	48000400 	.word	0x48000400

08000454 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800045c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000460:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000464:	f003 0301 	and.w	r3, r3, #1
 8000468:	2b00      	cmp	r3, #0
 800046a:	d013      	beq.n	8000494 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800046c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000470:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000474:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000478:	2b00      	cmp	r3, #0
 800047a:	d00b      	beq.n	8000494 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800047c:	e000      	b.n	8000480 <ITM_SendChar+0x2c>
    {
      __NOP();
 800047e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000480:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d0f9      	beq.n	800047e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800048a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	b2d2      	uxtb	r2, r2
 8000492:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000494:	687b      	ldr	r3, [r7, #4]
}
 8000496:	4618      	mov	r0, r3
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr

080004a2 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80004a2:	b580      	push	{r7, lr}
 80004a4:	b086      	sub	sp, #24
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	60f8      	str	r0, [r7, #12]
 80004aa:	60b9      	str	r1, [r7, #8]
 80004ac:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 80004ae:	2300      	movs	r3, #0
 80004b0:	617b      	str	r3, [r7, #20]
 80004b2:	e009      	b.n	80004c8 <_write+0x26>
		ITM_SendChar(*ptr++);
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	1c5a      	adds	r2, r3, #1
 80004b8:	60ba      	str	r2, [r7, #8]
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	4618      	mov	r0, r3
 80004be:	f7ff ffc9 	bl	8000454 <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 80004c2:	697b      	ldr	r3, [r7, #20]
 80004c4:	3301      	adds	r3, #1
 80004c6:	617b      	str	r3, [r7, #20]
 80004c8:	697a      	ldr	r2, [r7, #20]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	dbf1      	blt.n	80004b4 <_write+0x12>
	}
	return len;
 80004d0:	687b      	ldr	r3, [r7, #4]
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	3718      	adds	r7, #24
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
	...

080004dc <scan_i2c_bus>:

void scan_i2c_bus(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
	printf("Starting I2C Scanner...\n");
 80004e2:	481b      	ldr	r0, [pc, #108]	@ (8000550 <scan_i2c_bus+0x74>)
 80004e4:	f003 fafc 	bl	8003ae0 <puts>
	int found_devices = 0; // reset device counter
 80004e8:	2300      	movs	r3, #0
 80004ea:	60fb      	str	r3, [r7, #12]
	for (int i2c_address = 1; i2c_address < 128; i2c_address++) {
 80004ec:	2301      	movs	r3, #1
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	e01b      	b.n	800052a <scan_i2c_bus+0x4e>
		HAL_StatusTypeDef status;

		// Check if a device acknowledges the address
		status = HAL_I2C_IsDeviceReady(&hi2c1, i2c_address << 1, 3, 100);
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	b299      	uxth	r1, r3
 80004fa:	2364      	movs	r3, #100	@ 0x64
 80004fc:	2203      	movs	r2, #3
 80004fe:	4815      	ldr	r0, [pc, #84]	@ (8000554 <scan_i2c_bus+0x78>)
 8000500:	f000 fe4b 	bl	800119a <HAL_I2C_IsDeviceReady>
 8000504:	4603      	mov	r3, r0
 8000506:	71fb      	strb	r3, [r7, #7]

		if (status == HAL_OK) {
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d107      	bne.n	800051e <scan_i2c_bus+0x42>
			printf("0x%02X", i2c_address);
 800050e:	68b9      	ldr	r1, [r7, #8]
 8000510:	4811      	ldr	r0, [pc, #68]	@ (8000558 <scan_i2c_bus+0x7c>)
 8000512:	f003 fa75 	bl	8003a00 <iprintf>
			found_devices++;
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	3301      	adds	r3, #1
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	e002      	b.n	8000524 <scan_i2c_bus+0x48>
		} else {
			printf(".");  // Print a dot for no device at this address
 800051e:	202e      	movs	r0, #46	@ 0x2e
 8000520:	f003 fa80 	bl	8003a24 <putchar>
	for (int i2c_address = 1; i2c_address < 128; i2c_address++) {
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	3301      	adds	r3, #1
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	2b7f      	cmp	r3, #127	@ 0x7f
 800052e:	dde0      	ble.n	80004f2 <scan_i2c_bus+0x16>
		}
	}

	if (found_devices == 0) {
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d103      	bne.n	800053e <scan_i2c_bus+0x62>
		printf("\nNo I2C devices found.\n");
 8000536:	4809      	ldr	r0, [pc, #36]	@ (800055c <scan_i2c_bus+0x80>)
 8000538:	f003 fad2 	bl	8003ae0 <puts>
	} else {
		printf("\nScan complete. Found %d device(s).\n", found_devices);
	}
}
 800053c:	e003      	b.n	8000546 <scan_i2c_bus+0x6a>
		printf("\nScan complete. Found %d device(s).\n", found_devices);
 800053e:	68f9      	ldr	r1, [r7, #12]
 8000540:	4807      	ldr	r0, [pc, #28]	@ (8000560 <scan_i2c_bus+0x84>)
 8000542:	f003 fa5d 	bl	8003a00 <iprintf>
}
 8000546:	bf00      	nop
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	08004824 	.word	0x08004824
 8000554:	20000084 	.word	0x20000084
 8000558:	0800483c 	.word	0x0800483c
 800055c:	08004844 	.word	0x08004844
 8000560:	0800485c 	.word	0x0800485c

08000564 <is_i2c_device_connected>:

bool is_i2c_device_connected(uint8_t address) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, address << 1, 3, HAL_MAX_DELAY);
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	b29b      	uxth	r3, r3
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	b299      	uxth	r1, r3
 8000576:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800057a:	2203      	movs	r2, #3
 800057c:	4807      	ldr	r0, [pc, #28]	@ (800059c <is_i2c_device_connected+0x38>)
 800057e:	f000 fe0c 	bl	800119a <HAL_I2C_IsDeviceReady>
 8000582:	4603      	mov	r3, r0
 8000584:	73fb      	strb	r3, [r7, #15]

	return (status == HAL_OK) ? 1 : 0;
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	2b00      	cmp	r3, #0
 800058a:	bf0c      	ite	eq
 800058c:	2301      	moveq	r3, #1
 800058e:	2300      	movne	r3, #0
 8000590:	b2db      	uxtb	r3, r3
}
 8000592:	4618      	mov	r0, r3
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000084 	.word	0x20000084

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fa32 	bl	8000a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f842 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f7ff fe68 	bl	8000280 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b0:	f000 f990 	bl	80008d4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005b4:	f7ff feca 	bl	800034c <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80005b8:	2120      	movs	r1, #32
 80005ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005be:	f000 fd37 	bl	8001030 <HAL_GPIO_TogglePin>
		printf("Blink! %d\r\n", counter++);
 80005c2:	4b17      	ldr	r3, [pc, #92]	@ (8000620 <main+0x80>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	1c5a      	adds	r2, r3, #1
 80005c8:	4915      	ldr	r1, [pc, #84]	@ (8000620 <main+0x80>)
 80005ca:	600a      	str	r2, [r1, #0]
 80005cc:	4619      	mov	r1, r3
 80005ce:	4815      	ldr	r0, [pc, #84]	@ (8000624 <main+0x84>)
 80005d0:	f003 fa16 	bl	8003a00 <iprintf>
		scan_i2c_bus();
 80005d4:	f7ff ff82 	bl	80004dc <scan_i2c_bus>
		if (is_i2c_device_connected(0x1E)) {
 80005d8:	201e      	movs	r0, #30
 80005da:	f7ff ffc3 	bl	8000564 <is_i2c_device_connected>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d004      	beq.n	80005ee <main+0x4e>
			printf("Device 0x%02X is connected\r\n", 0x1E);
 80005e4:	211e      	movs	r1, #30
 80005e6:	4810      	ldr	r0, [pc, #64]	@ (8000628 <main+0x88>)
 80005e8:	f003 fa0a 	bl	8003a00 <iprintf>
 80005ec:	e003      	b.n	80005f6 <main+0x56>
		} else {
			printf("Device 0x%02X not connected\r\n", 0x1E);
 80005ee:	211e      	movs	r1, #30
 80005f0:	480e      	ldr	r0, [pc, #56]	@ (800062c <main+0x8c>)
 80005f2:	f003 fa05 	bl	8003a00 <iprintf>
		}

		if (is_i2c_device_connected(0x1)) {
 80005f6:	2001      	movs	r0, #1
 80005f8:	f7ff ffb4 	bl	8000564 <is_i2c_device_connected>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d004      	beq.n	800060c <main+0x6c>
			printf("Device 0x%02X is connected\r\n", 0x1);
 8000602:	2101      	movs	r1, #1
 8000604:	4808      	ldr	r0, [pc, #32]	@ (8000628 <main+0x88>)
 8000606:	f003 f9fb 	bl	8003a00 <iprintf>
 800060a:	e003      	b.n	8000614 <main+0x74>
		} else {
			printf("Device 0x%02X not connected\r\n", 0x1);
 800060c:	2101      	movs	r1, #1
 800060e:	4807      	ldr	r0, [pc, #28]	@ (800062c <main+0x8c>)
 8000610:	f003 f9f6 	bl	8003a00 <iprintf>
		}
		HAL_Delay(3000);
 8000614:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000618:	f000 fa5e 	bl	8000ad8 <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800061c:	e7cc      	b.n	80005b8 <main+0x18>
 800061e:	bf00      	nop
 8000620:	200000d8 	.word	0x200000d8
 8000624:	08004884 	.word	0x08004884
 8000628:	08004890 	.word	0x08004890
 800062c:	080048b0 	.word	0x080048b0

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b0a6      	sub	sp, #152	@ 0x98
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800063a:	2228      	movs	r2, #40	@ 0x28
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f003 fb2e 	bl	8003ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2258      	movs	r2, #88	@ 0x58
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f003 fb20 	bl	8003ca0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000674:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000678:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800067c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000680:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800068e:	4618      	mov	r0, r3
 8000690:	f001 f864 	bl	800175c <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800069a:	f000 f829 	bl	80006f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2302      	movs	r3, #2
 80006a4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006ae:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80006b8:	2102      	movs	r1, #2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 f872 	bl	80027a4 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006c6:	f000 f813 	bl	80006f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80006ca:	2322      	movs	r3, #34	@ 0x22
 80006cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80006d2:	2300      	movs	r3, #0
 80006d4:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	4618      	mov	r0, r3
 80006da:	f002 fa75 	bl	8002bc8 <HAL_RCCEx_PeriphCLKConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80006e4:	f000 f804 	bl	80006f0 <Error_Handler>
  }
}
 80006e8:	bf00      	nop
 80006ea:	3798      	adds	r7, #152	@ 0x98
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f4:	b672      	cpsid	i
}
 80006f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f8:	bf00      	nop
 80006fa:	e7fd      	b.n	80006f8 <Error_Handler+0x8>

080006fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000702:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <HAL_MspInit+0x44>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	4a0e      	ldr	r2, [pc, #56]	@ (8000740 <HAL_MspInit+0x44>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6193      	str	r3, [r2, #24]
 800070e:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <HAL_MspInit+0x44>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <HAL_MspInit+0x44>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	4a08      	ldr	r2, [pc, #32]	@ (8000740 <HAL_MspInit+0x44>)
 8000720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000724:	61d3      	str	r3, [r2, #28]
 8000726:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <HAL_MspInit+0x44>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000732:	2007      	movs	r0, #7
 8000734:	f000 faa6 	bl	8000c84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40021000 	.word	0x40021000

08000744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <NMI_Handler+0x4>

0800074c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <HardFault_Handler+0x4>

08000754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <MemManage_Handler+0x4>

0800075c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <BusFault_Handler+0x4>

08000764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <UsageFault_Handler+0x4>

0800076c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800079a:	f000 f97d 	bl	8000a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b086      	sub	sp, #24
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	60f8      	str	r0, [r7, #12]
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
 80007b2:	e00a      	b.n	80007ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007b4:	f3af 8000 	nop.w
 80007b8:	4601      	mov	r1, r0
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	1c5a      	adds	r2, r3, #1
 80007be:	60ba      	str	r2, [r7, #8]
 80007c0:	b2ca      	uxtb	r2, r1
 80007c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	3301      	adds	r3, #1
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	697a      	ldr	r2, [r7, #20]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	dbf0      	blt.n	80007b4 <_read+0x12>
  }

  return len;
 80007d2:	687b      	ldr	r3, [r7, #4]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3718      	adds	r7, #24
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <_close>:
  }
  return len;
}

int _close(int file)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000804:	605a      	str	r2, [r3, #4]
  return 0;
 8000806:	2300      	movs	r3, #0
}
 8000808:	4618      	mov	r0, r3
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <_isatty>:

int _isatty(int file)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800081c:	2301      	movs	r3, #1
}
 800081e:	4618      	mov	r0, r3
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800082a:	b480      	push	{r7}
 800082c:	b085      	sub	sp, #20
 800082e:	af00      	add	r7, sp, #0
 8000830:	60f8      	str	r0, [r7, #12]
 8000832:	60b9      	str	r1, [r7, #8]
 8000834:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000836:	2300      	movs	r3, #0
}
 8000838:	4618      	mov	r0, r3
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800084c:	4a14      	ldr	r2, [pc, #80]	@ (80008a0 <_sbrk+0x5c>)
 800084e:	4b15      	ldr	r3, [pc, #84]	@ (80008a4 <_sbrk+0x60>)
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000858:	4b13      	ldr	r3, [pc, #76]	@ (80008a8 <_sbrk+0x64>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d102      	bne.n	8000866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000860:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <_sbrk+0x64>)
 8000862:	4a12      	ldr	r2, [pc, #72]	@ (80008ac <_sbrk+0x68>)
 8000864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000866:	4b10      	ldr	r3, [pc, #64]	@ (80008a8 <_sbrk+0x64>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	429a      	cmp	r2, r3
 8000872:	d207      	bcs.n	8000884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000874:	f003 fa62 	bl	8003d3c <__errno>
 8000878:	4603      	mov	r3, r0
 800087a:	220c      	movs	r2, #12
 800087c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800087e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000882:	e009      	b.n	8000898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000884:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <_sbrk+0x64>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800088a:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <_sbrk+0x64>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4413      	add	r3, r2
 8000892:	4a05      	ldr	r2, [pc, #20]	@ (80008a8 <_sbrk+0x64>)
 8000894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000896:	68fb      	ldr	r3, [r7, #12]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20010000 	.word	0x20010000
 80008a4:	00000400 	.word	0x00000400
 80008a8:	200000dc 	.word	0x200000dc
 80008ac:	200002b8 	.word	0x200002b8

080008b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <SystemInit+0x20>)
 80008b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ba:	4a05      	ldr	r2, [pc, #20]	@ (80008d0 <SystemInit+0x20>)
 80008bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d8:	4b14      	ldr	r3, [pc, #80]	@ (800092c <MX_USART2_UART_Init+0x58>)
 80008da:	4a15      	ldr	r2, [pc, #84]	@ (8000930 <MX_USART2_UART_Init+0x5c>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80008de:	4b13      	ldr	r3, [pc, #76]	@ (800092c <MX_USART2_UART_Init+0x58>)
 80008e0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80008e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b11      	ldr	r3, [pc, #68]	@ (800092c <MX_USART2_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <MX_USART2_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <MX_USART2_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <MX_USART2_UART_Init+0x58>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <MX_USART2_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b09      	ldr	r3, [pc, #36]	@ (800092c <MX_USART2_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090a:	4b08      	ldr	r3, [pc, #32]	@ (800092c <MX_USART2_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <MX_USART2_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	@ (800092c <MX_USART2_UART_Init+0x58>)
 8000918:	f002 fb72 	bl	8003000 <HAL_UART_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000922:	f7ff fee5 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200000e0 	.word	0x200000e0
 8000930:	40004400 	.word	0x40004400

08000934 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	@ 0x28
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a17      	ldr	r2, [pc, #92]	@ (80009b0 <HAL_UART_MspInit+0x7c>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d128      	bne.n	80009a8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000956:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <HAL_UART_MspInit+0x80>)
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	4a16      	ldr	r2, [pc, #88]	@ (80009b4 <HAL_UART_MspInit+0x80>)
 800095c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000960:	61d3      	str	r3, [r2, #28]
 8000962:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <HAL_UART_MspInit+0x80>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <HAL_UART_MspInit+0x80>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	4a10      	ldr	r2, [pc, #64]	@ (80009b4 <HAL_UART_MspInit+0x80>)
 8000974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000978:	6153      	str	r3, [r2, #20]
 800097a:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <HAL_UART_MspInit+0x80>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000986:	230c      	movs	r3, #12
 8000988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000996:	2307      	movs	r3, #7
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a4:	f000 f9a2 	bl	8000cec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009a8:	bf00      	nop
 80009aa:	3728      	adds	r7, #40	@ 0x28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40004400 	.word	0x40004400
 80009b4:	40021000 	.word	0x40021000

080009b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009f0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009bc:	f7ff ff78 	bl	80008b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c0:	480c      	ldr	r0, [pc, #48]	@ (80009f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009c2:	490d      	ldr	r1, [pc, #52]	@ (80009f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c4:	4a0d      	ldr	r2, [pc, #52]	@ (80009fc <LoopForever+0xe>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a00 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000a04 <LoopForever+0x16>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009e6:	f003 f9af 	bl	8003d48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ea:	f7ff fdd9 	bl	80005a0 <main>

080009ee <LoopForever>:

LoopForever:
    b LoopForever
 80009ee:	e7fe      	b.n	80009ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80009fc:	0800494c 	.word	0x0800494c
  ldr r2, =_sbss
 8000a00:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a04:	200002b8 	.word	0x200002b8

08000a08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC1_2_IRQHandler>
	...

08000a0c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a10:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <HAL_Init+0x28>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a07      	ldr	r2, [pc, #28]	@ (8000a34 <HAL_Init+0x28>)
 8000a16:	f043 0310 	orr.w	r3, r3, #16
 8000a1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f000 f931 	bl	8000c84 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a22:	2000      	movs	r0, #0
 8000a24:	f000 f808 	bl	8000a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a28:	f7ff fe68 	bl	80006fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40022000 	.word	0x40022000

08000a38 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a40:	4b12      	ldr	r3, [pc, #72]	@ (8000a8c <HAL_InitTick+0x54>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <HAL_InitTick+0x58>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 f93b 	bl	8000cd2 <HAL_SYSTICK_Config>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e00e      	b.n	8000a84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b0f      	cmp	r3, #15
 8000a6a:	d80a      	bhi.n	8000a82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a74:	f000 f911 	bl	8000c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a78:	4a06      	ldr	r2, [pc, #24]	@ (8000a94 <HAL_InitTick+0x5c>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e000      	b.n	8000a84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000008 	.word	0x20000008
 8000a94:	20000004 	.word	0x20000004

08000a98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <HAL_IncTick+0x20>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <HAL_IncTick+0x24>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	4a04      	ldr	r2, [pc, #16]	@ (8000abc <HAL_IncTick+0x24>)
 8000aaa:	6013      	str	r3, [r2, #0]
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	20000168 	.word	0x20000168

08000ac0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ac4:	4b03      	ldr	r3, [pc, #12]	@ (8000ad4 <HAL_GetTick+0x14>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000168 	.word	0x20000168

08000ad8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae0:	f7ff ffee 	bl	8000ac0 <HAL_GetTick>
 8000ae4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000af0:	d005      	beq.n	8000afe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000af2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b1c <HAL_Delay+0x44>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	461a      	mov	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4413      	add	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000afe:	bf00      	nop
 8000b00:	f7ff ffde 	bl	8000ac0 <HAL_GetTick>
 8000b04:	4602      	mov	r2, r0
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d8f7      	bhi.n	8000b00 <HAL_Delay+0x28>
  {
  }
}
 8000b10:	bf00      	nop
 8000b12:	bf00      	nop
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000008 	.word	0x20000008

08000b20 <__NVIC_SetPriorityGrouping>:
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b30:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b52:	4a04      	ldr	r2, [pc, #16]	@ (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	60d3      	str	r3, [r2, #12]
}
 8000b58:	bf00      	nop
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_GetPriorityGrouping>:
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b6c:	4b04      	ldr	r3, [pc, #16]	@ (8000b80 <__NVIC_GetPriorityGrouping+0x18>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	0a1b      	lsrs	r3, r3, #8
 8000b72:	f003 0307 	and.w	r3, r3, #7
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <__NVIC_SetPriority>:
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	6039      	str	r1, [r7, #0]
 8000b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	db0a      	blt.n	8000bae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	490c      	ldr	r1, [pc, #48]	@ (8000bd0 <__NVIC_SetPriority+0x4c>)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	0112      	lsls	r2, r2, #4
 8000ba4:	b2d2      	uxtb	r2, r2
 8000ba6:	440b      	add	r3, r1
 8000ba8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000bac:	e00a      	b.n	8000bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4908      	ldr	r1, [pc, #32]	@ (8000bd4 <__NVIC_SetPriority+0x50>)
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	f003 030f 	and.w	r3, r3, #15
 8000bba:	3b04      	subs	r3, #4
 8000bbc:	0112      	lsls	r2, r2, #4
 8000bbe:	b2d2      	uxtb	r2, r2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	761a      	strb	r2, [r3, #24]
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000e100 	.word	0xe000e100
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <NVIC_EncodePriority>:
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b089      	sub	sp, #36	@ 0x24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	f1c3 0307 	rsb	r3, r3, #7
 8000bf2:	2b04      	cmp	r3, #4
 8000bf4:	bf28      	it	cs
 8000bf6:	2304      	movcs	r3, #4
 8000bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	2b06      	cmp	r3, #6
 8000c00:	d902      	bls.n	8000c08 <NVIC_EncodePriority+0x30>
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3b03      	subs	r3, #3
 8000c06:	e000      	b.n	8000c0a <NVIC_EncodePriority+0x32>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43da      	mvns	r2, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c20:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2a:	43d9      	mvns	r1, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	4313      	orrs	r3, r2
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3724      	adds	r7, #36	@ 0x24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
	...

08000c40 <SysTick_Config>:
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c50:	d301      	bcc.n	8000c56 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00f      	b.n	8000c76 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c56:	4a0a      	ldr	r2, [pc, #40]	@ (8000c80 <SysTick_Config+0x40>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5e:	210f      	movs	r1, #15
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c64:	f7ff ff8e 	bl	8000b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c68:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <SysTick_Config+0x40>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6e:	4b04      	ldr	r3, [pc, #16]	@ (8000c80 <SysTick_Config+0x40>)
 8000c70:	2207      	movs	r2, #7
 8000c72:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	e000e010 	.word	0xe000e010

08000c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff ff47 	bl	8000b20 <__NVIC_SetPriorityGrouping>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b086      	sub	sp, #24
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]
 8000ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cac:	f7ff ff5c 	bl	8000b68 <__NVIC_GetPriorityGrouping>
 8000cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	68b9      	ldr	r1, [r7, #8]
 8000cb6:	6978      	ldr	r0, [r7, #20]
 8000cb8:	f7ff ff8e 	bl	8000bd8 <NVIC_EncodePriority>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff5d 	bl	8000b84 <__NVIC_SetPriority>
}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ffb0 	bl	8000c40 <SysTick_Config>
 8000ce0:	4603      	mov	r3, r0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b087      	sub	sp, #28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfa:	e160      	b.n	8000fbe <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	2101      	movs	r1, #1
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	fa01 f303 	lsl.w	r3, r1, r3
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f000 8152 	beq.w	8000fb8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d005      	beq.n	8000d2c <HAL_GPIO_Init+0x40>
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 0303 	and.w	r3, r3, #3
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d130      	bne.n	8000d8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	2203      	movs	r2, #3
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68da      	ldr	r2, [r3, #12]
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d62:	2201      	movs	r2, #1
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	091b      	lsrs	r3, r3, #4
 8000d78:	f003 0201 	and.w	r2, r3, #1
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	2b03      	cmp	r3, #3
 8000d98:	d017      	beq.n	8000dca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	2203      	movs	r2, #3
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	689a      	ldr	r2, [r3, #8]
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 0303 	and.w	r3, r3, #3
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d123      	bne.n	8000e1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	08da      	lsrs	r2, r3, #3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3208      	adds	r2, #8
 8000dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	220f      	movs	r2, #15
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	691a      	ldr	r2, [r3, #16]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	f003 0307 	and.w	r3, r3, #7
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	08da      	lsrs	r2, r3, #3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3208      	adds	r2, #8
 8000e18:	6939      	ldr	r1, [r7, #16]
 8000e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	2203      	movs	r2, #3
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 0203 	and.w	r2, r3, #3
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 80ac 	beq.w	8000fb8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e60:	4b5e      	ldr	r3, [pc, #376]	@ (8000fdc <HAL_GPIO_Init+0x2f0>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a5d      	ldr	r2, [pc, #372]	@ (8000fdc <HAL_GPIO_Init+0x2f0>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b5b      	ldr	r3, [pc, #364]	@ (8000fdc <HAL_GPIO_Init+0x2f0>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e78:	4a59      	ldr	r2, [pc, #356]	@ (8000fe0 <HAL_GPIO_Init+0x2f4>)
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	089b      	lsrs	r3, r3, #2
 8000e7e:	3302      	adds	r3, #2
 8000e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	f003 0303 	and.w	r3, r3, #3
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	220f      	movs	r2, #15
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ea2:	d025      	beq.n	8000ef0 <HAL_GPIO_Init+0x204>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a4f      	ldr	r2, [pc, #316]	@ (8000fe4 <HAL_GPIO_Init+0x2f8>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d01f      	beq.n	8000eec <HAL_GPIO_Init+0x200>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a4e      	ldr	r2, [pc, #312]	@ (8000fe8 <HAL_GPIO_Init+0x2fc>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d019      	beq.n	8000ee8 <HAL_GPIO_Init+0x1fc>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a4d      	ldr	r2, [pc, #308]	@ (8000fec <HAL_GPIO_Init+0x300>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d013      	beq.n	8000ee4 <HAL_GPIO_Init+0x1f8>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a4c      	ldr	r2, [pc, #304]	@ (8000ff0 <HAL_GPIO_Init+0x304>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d00d      	beq.n	8000ee0 <HAL_GPIO_Init+0x1f4>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a4b      	ldr	r2, [pc, #300]	@ (8000ff4 <HAL_GPIO_Init+0x308>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d007      	beq.n	8000edc <HAL_GPIO_Init+0x1f0>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a4a      	ldr	r2, [pc, #296]	@ (8000ff8 <HAL_GPIO_Init+0x30c>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d101      	bne.n	8000ed8 <HAL_GPIO_Init+0x1ec>
 8000ed4:	2306      	movs	r3, #6
 8000ed6:	e00c      	b.n	8000ef2 <HAL_GPIO_Init+0x206>
 8000ed8:	2307      	movs	r3, #7
 8000eda:	e00a      	b.n	8000ef2 <HAL_GPIO_Init+0x206>
 8000edc:	2305      	movs	r3, #5
 8000ede:	e008      	b.n	8000ef2 <HAL_GPIO_Init+0x206>
 8000ee0:	2304      	movs	r3, #4
 8000ee2:	e006      	b.n	8000ef2 <HAL_GPIO_Init+0x206>
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e004      	b.n	8000ef2 <HAL_GPIO_Init+0x206>
 8000ee8:	2302      	movs	r3, #2
 8000eea:	e002      	b.n	8000ef2 <HAL_GPIO_Init+0x206>
 8000eec:	2301      	movs	r3, #1
 8000eee:	e000      	b.n	8000ef2 <HAL_GPIO_Init+0x206>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	f002 0203 	and.w	r2, r2, #3
 8000ef8:	0092      	lsls	r2, r2, #2
 8000efa:	4093      	lsls	r3, r2
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f02:	4937      	ldr	r1, [pc, #220]	@ (8000fe0 <HAL_GPIO_Init+0x2f4>)
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	089b      	lsrs	r3, r3, #2
 8000f08:	3302      	adds	r3, #2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f10:	4b3a      	ldr	r3, [pc, #232]	@ (8000ffc <HAL_GPIO_Init+0x310>)
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f34:	4a31      	ldr	r2, [pc, #196]	@ (8000ffc <HAL_GPIO_Init+0x310>)
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f3a:	4b30      	ldr	r3, [pc, #192]	@ (8000ffc <HAL_GPIO_Init+0x310>)
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f5e:	4a27      	ldr	r2, [pc, #156]	@ (8000ffc <HAL_GPIO_Init+0x310>)
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f64:	4b25      	ldr	r3, [pc, #148]	@ (8000ffc <HAL_GPIO_Init+0x310>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f88:	4a1c      	ldr	r2, [pc, #112]	@ (8000ffc <HAL_GPIO_Init+0x310>)
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ffc <HAL_GPIO_Init+0x310>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fb2:	4a12      	ldr	r2, [pc, #72]	@ (8000ffc <HAL_GPIO_Init+0x310>)
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f47f ae97 	bne.w	8000cfc <HAL_GPIO_Init+0x10>
  }
}
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	371c      	adds	r7, #28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40010000 	.word	0x40010000
 8000fe4:	48000400 	.word	0x48000400
 8000fe8:	48000800 	.word	0x48000800
 8000fec:	48000c00 	.word	0x48000c00
 8000ff0:	48001000 	.word	0x48001000
 8000ff4:	48001400 	.word	0x48001400
 8000ff8:	48001800 	.word	0x48001800
 8000ffc:	40010400 	.word	0x40010400

08001000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]
 800100c:	4613      	mov	r3, r2
 800100e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001010:	787b      	ldrb	r3, [r7, #1]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001016:	887a      	ldrh	r2, [r7, #2]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800101c:	e002      	b.n	8001024 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800101e:	887a      	ldrh	r2, [r7, #2]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001042:	887a      	ldrh	r2, [r7, #2]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4013      	ands	r3, r2
 8001048:	041a      	lsls	r2, r3, #16
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	43d9      	mvns	r1, r3
 800104e:	887b      	ldrh	r3, [r7, #2]
 8001050:	400b      	ands	r3, r1
 8001052:	431a      	orrs	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	619a      	str	r2, [r3, #24]
}
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e08d      	b.n	8001192 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d106      	bne.n	8001090 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff f99e 	bl	80003cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2224      	movs	r2, #36	@ 0x24
 8001094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 0201 	bic.w	r2, r2, #1
 80010a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80010b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d107      	bne.n	80010de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	e006      	b.n	80010ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80010ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d108      	bne.n	8001106 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	e007      	b.n	8001116 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001114:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	6812      	ldr	r2, [r2, #0]
 8001120:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001124:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001128:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68da      	ldr	r2, [r3, #12]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001138:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	691a      	ldr	r2, [r3, #16]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	430a      	orrs	r2, r1
 8001152:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	69d9      	ldr	r1, [r3, #28]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a1a      	ldr	r2, [r3, #32]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	430a      	orrs	r2, r1
 8001162:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f042 0201 	orr.w	r2, r2, #1
 8001172:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2220      	movs	r2, #32
 800117e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b08a      	sub	sp, #40	@ 0x28
 800119e:	af02      	add	r7, sp, #8
 80011a0:	60f8      	str	r0, [r7, #12]
 80011a2:	607a      	str	r2, [r7, #4]
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	460b      	mov	r3, r1
 80011a8:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b20      	cmp	r3, #32
 80011b8:	f040 80d6 	bne.w	8001368 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80011ca:	d101      	bne.n	80011d0 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80011cc:	2302      	movs	r3, #2
 80011ce:	e0cc      	b.n	800136a <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d101      	bne.n	80011de <HAL_I2C_IsDeviceReady+0x44>
 80011da:	2302      	movs	r3, #2
 80011dc:	e0c5      	b.n	800136a <HAL_I2C_IsDeviceReady+0x1d0>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2201      	movs	r2, #1
 80011e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2224      	movs	r2, #36	@ 0x24
 80011ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2200      	movs	r2, #0
 80011f2:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d107      	bne.n	800120c <HAL_I2C_IsDeviceReady+0x72>
 80011fc:	897b      	ldrh	r3, [r7, #10]
 80011fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001202:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001206:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800120a:	e006      	b.n	800121a <HAL_I2C_IsDeviceReady+0x80>
 800120c:	897b      	ldrh	r3, [r7, #10]
 800120e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001212:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001216:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	6812      	ldr	r2, [r2, #0]
 800121e:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001220:	f7ff fc4e 	bl	8000ac0 <HAL_GetTick>
 8001224:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f003 0320 	and.w	r3, r3, #32
 8001230:	2b20      	cmp	r3, #32
 8001232:	bf0c      	ite	eq
 8001234:	2301      	moveq	r3, #1
 8001236:	2300      	movne	r3, #0
 8001238:	b2db      	uxtb	r3, r3
 800123a:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	f003 0310 	and.w	r3, r3, #16
 8001246:	2b10      	cmp	r3, #16
 8001248:	bf0c      	ite	eq
 800124a:	2301      	moveq	r3, #1
 800124c:	2300      	movne	r3, #0
 800124e:	b2db      	uxtb	r3, r3
 8001250:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001252:	e034      	b.n	80012be <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800125a:	d01a      	beq.n	8001292 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800125c:	f7ff fc30 	bl	8000ac0 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	429a      	cmp	r2, r3
 800126a:	d302      	bcc.n	8001272 <HAL_I2C_IsDeviceReady+0xd8>
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10f      	bne.n	8001292 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2220      	movs	r2, #32
 8001276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127e:	f043 0220 	orr.w	r2, r3, #32
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e06b      	b.n	800136a <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0320 	and.w	r3, r3, #32
 800129c:	2b20      	cmp	r3, #32
 800129e:	bf0c      	ite	eq
 80012a0:	2301      	moveq	r3, #1
 80012a2:	2300      	movne	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	f003 0310 	and.w	r3, r3, #16
 80012b2:	2b10      	cmp	r3, #16
 80012b4:	bf0c      	ite	eq
 80012b6:	2301      	moveq	r3, #1
 80012b8:	2300      	movne	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80012be:	7ffb      	ldrb	r3, [r7, #31]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d102      	bne.n	80012ca <HAL_I2C_IsDeviceReady+0x130>
 80012c4:	7fbb      	ldrb	r3, [r7, #30]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0c4      	beq.n	8001254 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0310 	and.w	r3, r3, #16
 80012d4:	2b10      	cmp	r3, #16
 80012d6:	d01a      	beq.n	800130e <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	2200      	movs	r2, #0
 80012e0:	2120      	movs	r1, #32
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f000 f869 	bl	80013ba <I2C_WaitOnFlagUntilTimeout>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e03b      	b.n	800136a <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2220      	movs	r2, #32
 80012f8:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2220      	movs	r2, #32
 80012fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	e02d      	b.n	800136a <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	2200      	movs	r2, #0
 8001316:	2120      	movs	r1, #32
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f000 f84e 	bl	80013ba <I2C_WaitOnFlagUntilTimeout>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e020      	b.n	800136a <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2210      	movs	r2, #16
 800132e:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2220      	movs	r2, #32
 8001336:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	3301      	adds	r3, #1
 800133c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	429a      	cmp	r2, r3
 8001344:	f63f af56 	bhi.w	80011f4 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2220      	movs	r2, #32
 800134c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001354:	f043 0220 	orr.w	r2, r3, #32
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e000      	b.n	800136a <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8001368:	2302      	movs	r3, #2
  }
}
 800136a:	4618      	mov	r0, r3
 800136c:	3720      	adds	r7, #32
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b02      	cmp	r3, #2
 8001386:	d103      	bne.n	8001390 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2200      	movs	r2, #0
 800138e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b01      	cmp	r3, #1
 800139c:	d007      	beq.n	80013ae <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	699a      	ldr	r2, [r3, #24]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f042 0201 	orr.w	r2, r2, #1
 80013ac:	619a      	str	r2, [r3, #24]
  }
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	4613      	mov	r3, r2
 80013c8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013ca:	e03b      	b.n	8001444 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	6839      	ldr	r1, [r7, #0]
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f000 f84b 	bl	800146c <I2C_IsErrorOccurred>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e041      	b.n	8001464 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80013e6:	d02d      	beq.n	8001444 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013e8:	f7ff fb6a 	bl	8000ac0 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d302      	bcc.n	80013fe <I2C_WaitOnFlagUntilTimeout+0x44>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d122      	bne.n	8001444 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	699a      	ldr	r2, [r3, #24]
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	4013      	ands	r3, r2
 8001408:	68ba      	ldr	r2, [r7, #8]
 800140a:	429a      	cmp	r2, r3
 800140c:	bf0c      	ite	eq
 800140e:	2301      	moveq	r3, #1
 8001410:	2300      	movne	r3, #0
 8001412:	b2db      	uxtb	r3, r3
 8001414:	461a      	mov	r2, r3
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	429a      	cmp	r2, r3
 800141a:	d113      	bne.n	8001444 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001420:	f043 0220 	orr.w	r2, r3, #32
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2220      	movs	r2, #32
 800142c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e00f      	b.n	8001464 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	699a      	ldr	r2, [r3, #24]
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	4013      	ands	r3, r2
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	429a      	cmp	r2, r3
 8001452:	bf0c      	ite	eq
 8001454:	2301      	moveq	r3, #1
 8001456:	2300      	movne	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	461a      	mov	r2, r3
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	429a      	cmp	r2, r3
 8001460:	d0b4      	beq.n	80013cc <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	@ 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	f003 0310 	and.w	r3, r3, #16
 8001494:	2b00      	cmp	r3, #0
 8001496:	d068      	beq.n	800156a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2210      	movs	r2, #16
 800149e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80014a0:	e049      	b.n	8001536 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80014a8:	d045      	beq.n	8001536 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80014aa:	f7ff fb09 	bl	8000ac0 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d302      	bcc.n	80014c0 <I2C_IsErrorOccurred+0x54>
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d13a      	bne.n	8001536 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80014d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80014e2:	d121      	bne.n	8001528 <I2C_IsErrorOccurred+0xbc>
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80014ea:	d01d      	beq.n	8001528 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80014ec:	7cfb      	ldrb	r3, [r7, #19]
 80014ee:	2b20      	cmp	r3, #32
 80014f0:	d01a      	beq.n	8001528 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001500:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001502:	f7ff fadd 	bl	8000ac0 <HAL_GetTick>
 8001506:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001508:	e00e      	b.n	8001528 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800150a:	f7ff fad9 	bl	8000ac0 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b19      	cmp	r3, #25
 8001516:	d907      	bls.n	8001528 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001518:	6a3b      	ldr	r3, [r7, #32]
 800151a:	f043 0320 	orr.w	r3, r3, #32
 800151e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001526:	e006      	b.n	8001536 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	f003 0320 	and.w	r3, r3, #32
 8001532:	2b20      	cmp	r3, #32
 8001534:	d1e9      	bne.n	800150a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f003 0320 	and.w	r3, r3, #32
 8001540:	2b20      	cmp	r3, #32
 8001542:	d003      	beq.n	800154c <I2C_IsErrorOccurred+0xe0>
 8001544:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0aa      	beq.n	80014a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800154c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001550:	2b00      	cmp	r3, #0
 8001552:	d103      	bne.n	800155c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2220      	movs	r2, #32
 800155a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800155c:	6a3b      	ldr	r3, [r7, #32]
 800155e:	f043 0304 	orr.w	r3, r3, #4
 8001562:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001578:	2b00      	cmp	r3, #0
 800157a:	d00b      	beq.n	8001594 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800158c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00b      	beq.n	80015b6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800159e:	6a3b      	ldr	r3, [r7, #32]
 80015a0:	f043 0308 	orr.w	r3, r3, #8
 80015a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00b      	beq.n	80015d8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	f043 0302 	orr.w	r3, r3, #2
 80015c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80015d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d01c      	beq.n	800161a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f7ff fec6 	bl	8001372 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6859      	ldr	r1, [r3, #4]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001628 <I2C_IsErrorOccurred+0x1bc>)
 80015f2:	400b      	ands	r3, r1
 80015f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2220      	movs	r2, #32
 8001606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800161a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800161e:	4618      	mov	r0, r3
 8001620:	3728      	adds	r7, #40	@ 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	fe00e800 	.word	0xfe00e800

0800162c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b20      	cmp	r3, #32
 8001640:	d138      	bne.n	80016b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001648:	2b01      	cmp	r3, #1
 800164a:	d101      	bne.n	8001650 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800164c:	2302      	movs	r3, #2
 800164e:	e032      	b.n	80016b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2224      	movs	r2, #36	@ 0x24
 800165c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0201 	bic.w	r2, r2, #1
 800166e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800167e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6819      	ldr	r1, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	430a      	orrs	r2, r1
 800168e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f042 0201 	orr.w	r2, r2, #1
 800169e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2220      	movs	r2, #32
 80016a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	e000      	b.n	80016b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80016b4:	2302      	movs	r3, #2
  }
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b085      	sub	sp, #20
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b20      	cmp	r3, #32
 80016d6:	d139      	bne.n	800174c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d101      	bne.n	80016e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e033      	b.n	800174e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2224      	movs	r2, #36	@ 0x24
 80016f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0201 	bic.w	r2, r2, #1
 8001704:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001714:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	4313      	orrs	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0201 	orr.w	r2, r2, #1
 8001736:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2220      	movs	r2, #32
 800173c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	e000      	b.n	800174e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800174c:	2302      	movs	r3, #2
  }
}
 800174e:	4618      	mov	r0, r3
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001762:	af00      	add	r7, sp, #0
 8001764:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001768:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800176c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800176e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001772:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d102      	bne.n	8001782 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	f001 b80a 	b.w	8002796 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001782:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001786:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 8161 	beq.w	8001a5a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001798:	4bae      	ldr	r3, [pc, #696]	@ (8001a54 <HAL_RCC_OscConfig+0x2f8>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 030c 	and.w	r3, r3, #12
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d00c      	beq.n	80017be <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017a4:	4bab      	ldr	r3, [pc, #684]	@ (8001a54 <HAL_RCC_OscConfig+0x2f8>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 030c 	and.w	r3, r3, #12
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d157      	bne.n	8001860 <HAL_RCC_OscConfig+0x104>
 80017b0:	4ba8      	ldr	r3, [pc, #672]	@ (8001a54 <HAL_RCC_OscConfig+0x2f8>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80017b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017bc:	d150      	bne.n	8001860 <HAL_RCC_OscConfig+0x104>
 80017be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017c2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80017ca:	fa93 f3a3 	rbit	r3, r3
 80017ce:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017d2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d6:	fab3 f383 	clz	r3, r3
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80017de:	d802      	bhi.n	80017e6 <HAL_RCC_OscConfig+0x8a>
 80017e0:	4b9c      	ldr	r3, [pc, #624]	@ (8001a54 <HAL_RCC_OscConfig+0x2f8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	e015      	b.n	8001812 <HAL_RCC_OscConfig+0xb6>
 80017e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017ea:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80017f2:	fa93 f3a3 	rbit	r3, r3
 80017f6:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80017fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017fe:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001802:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001806:	fa93 f3a3 	rbit	r3, r3
 800180a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800180e:	4b91      	ldr	r3, [pc, #580]	@ (8001a54 <HAL_RCC_OscConfig+0x2f8>)
 8001810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001812:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001816:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800181a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800181e:	fa92 f2a2 	rbit	r2, r2
 8001822:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001826:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800182a:	fab2 f282 	clz	r2, r2
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	f042 0220 	orr.w	r2, r2, #32
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	f002 021f 	and.w	r2, r2, #31
 800183a:	2101      	movs	r1, #1
 800183c:	fa01 f202 	lsl.w	r2, r1, r2
 8001840:	4013      	ands	r3, r2
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 8108 	beq.w	8001a58 <HAL_RCC_OscConfig+0x2fc>
 8001848:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800184c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	f040 80ff 	bne.w	8001a58 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	f000 bf9b 	b.w	8002796 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001860:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001864:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001870:	d106      	bne.n	8001880 <HAL_RCC_OscConfig+0x124>
 8001872:	4b78      	ldr	r3, [pc, #480]	@ (8001a54 <HAL_RCC_OscConfig+0x2f8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a77      	ldr	r2, [pc, #476]	@ (8001a54 <HAL_RCC_OscConfig+0x2f8>)
 8001878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e036      	b.n	80018ee <HAL_RCC_OscConfig+0x192>
 8001880:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001884:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d10c      	bne.n	80018aa <HAL_RCC_OscConfig+0x14e>
 8001890:	4b70      	ldr	r3, [pc, #448]	@ (8001a54 <HAL_RCC_OscConfig+0x2f8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a6f      	ldr	r2, [pc, #444]	@ (8001a54 <HAL_RCC_OscConfig+0x2f8>)
 8001896:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b6d      	ldr	r3, [pc, #436]	@ (8001a54 <HAL_RCC_OscConfig+0x2f8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a6c      	ldr	r2, [pc, #432]	@ (8001a54 <HAL_RCC_OscConfig+0x2f8>)
 80018a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	e021      	b.n	80018ee <HAL_RCC_OscConfig+0x192>
 80018aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018ba:	d10c      	bne.n	80018d6 <HAL_RCC_OscConfig+0x17a>
 80018bc:	4b65      	ldr	r3, [pc, #404]	@ (8001a54 <HAL_RCC_OscConfig+0x2f8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a64      	ldr	r2, [pc, #400]	@ (8001a54 <HAL_RCC_OscConfig+0x2f8>)
 80018c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b62      	ldr	r3, [pc, #392]	@ (8001a54 <HAL_RCC_OscConfig+0x2f8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a61      	ldr	r2, [pc, #388]	@ (8001a54 <HAL_RCC_OscConfig+0x2f8>)
 80018ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	e00b      	b.n	80018ee <HAL_RCC_OscConfig+0x192>
 80018d6:	4b5f      	ldr	r3, [pc, #380]	@ (8001a54 <HAL_RCC_OscConfig+0x2f8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a5e      	ldr	r2, [pc, #376]	@ (8001a54 <HAL_RCC_OscConfig+0x2f8>)
 80018dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001a54 <HAL_RCC_OscConfig+0x2f8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a5b      	ldr	r2, [pc, #364]	@ (8001a54 <HAL_RCC_OscConfig+0x2f8>)
 80018e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018ec:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018f2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d054      	beq.n	80019a8 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fe:	f7ff f8df 	bl	8000ac0 <HAL_GetTick>
 8001902:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001906:	e00a      	b.n	800191e <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff f8da 	bl	8000ac0 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b64      	cmp	r3, #100	@ 0x64
 8001916:	d902      	bls.n	800191e <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	f000 bf3c 	b.w	8002796 <HAL_RCC_OscConfig+0x103a>
 800191e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001922:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001926:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800192a:	fa93 f3a3 	rbit	r3, r3
 800192e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001932:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001936:	fab3 f383 	clz	r3, r3
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b3f      	cmp	r3, #63	@ 0x3f
 800193e:	d802      	bhi.n	8001946 <HAL_RCC_OscConfig+0x1ea>
 8001940:	4b44      	ldr	r3, [pc, #272]	@ (8001a54 <HAL_RCC_OscConfig+0x2f8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	e015      	b.n	8001972 <HAL_RCC_OscConfig+0x216>
 8001946:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800194a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001952:	fa93 f3a3 	rbit	r3, r3
 8001956:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800195a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800195e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001962:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001966:	fa93 f3a3 	rbit	r3, r3
 800196a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800196e:	4b39      	ldr	r3, [pc, #228]	@ (8001a54 <HAL_RCC_OscConfig+0x2f8>)
 8001970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001972:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001976:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800197a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800197e:	fa92 f2a2 	rbit	r2, r2
 8001982:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001986:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800198a:	fab2 f282 	clz	r2, r2
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	f042 0220 	orr.w	r2, r2, #32
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	f002 021f 	and.w	r2, r2, #31
 800199a:	2101      	movs	r1, #1
 800199c:	fa01 f202 	lsl.w	r2, r1, r2
 80019a0:	4013      	ands	r3, r2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0b0      	beq.n	8001908 <HAL_RCC_OscConfig+0x1ac>
 80019a6:	e058      	b.n	8001a5a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff f88a 	bl	8000ac0 <HAL_GetTick>
 80019ac:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b0:	e00a      	b.n	80019c8 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b2:	f7ff f885 	bl	8000ac0 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b64      	cmp	r3, #100	@ 0x64
 80019c0:	d902      	bls.n	80019c8 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	f000 bee7 	b.w	8002796 <HAL_RCC_OscConfig+0x103a>
 80019c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019cc:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80019dc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e0:	fab3 f383 	clz	r3, r3
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b3f      	cmp	r3, #63	@ 0x3f
 80019e8:	d802      	bhi.n	80019f0 <HAL_RCC_OscConfig+0x294>
 80019ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001a54 <HAL_RCC_OscConfig+0x2f8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	e015      	b.n	8001a1c <HAL_RCC_OscConfig+0x2c0>
 80019f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019f4:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80019fc:	fa93 f3a3 	rbit	r3, r3
 8001a00:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001a04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a08:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001a0c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001a10:	fa93 f3a3 	rbit	r3, r3
 8001a14:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001a18:	4b0e      	ldr	r3, [pc, #56]	@ (8001a54 <HAL_RCC_OscConfig+0x2f8>)
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a20:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001a24:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001a28:	fa92 f2a2 	rbit	r2, r2
 8001a2c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001a30:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001a34:	fab2 f282 	clz	r2, r2
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	f042 0220 	orr.w	r2, r2, #32
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	f002 021f 	and.w	r2, r2, #31
 8001a44:	2101      	movs	r1, #1
 8001a46:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1b0      	bne.n	80019b2 <HAL_RCC_OscConfig+0x256>
 8001a50:	e003      	b.n	8001a5a <HAL_RCC_OscConfig+0x2fe>
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a5e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 816d 	beq.w	8001d4a <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a70:	4bcd      	ldr	r3, [pc, #820]	@ (8001da8 <HAL_RCC_OscConfig+0x64c>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00c      	beq.n	8001a96 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a7c:	4bca      	ldr	r3, [pc, #808]	@ (8001da8 <HAL_RCC_OscConfig+0x64c>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 030c 	and.w	r3, r3, #12
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d16e      	bne.n	8001b66 <HAL_RCC_OscConfig+0x40a>
 8001a88:	4bc7      	ldr	r3, [pc, #796]	@ (8001da8 <HAL_RCC_OscConfig+0x64c>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001a90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a94:	d167      	bne.n	8001b66 <HAL_RCC_OscConfig+0x40a>
 8001a96:	2302      	movs	r3, #2
 8001a98:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 8001aa4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001aa8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aac:	fab3 f383 	clz	r3, r3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ab4:	d802      	bhi.n	8001abc <HAL_RCC_OscConfig+0x360>
 8001ab6:	4bbc      	ldr	r3, [pc, #752]	@ (8001da8 <HAL_RCC_OscConfig+0x64c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	e013      	b.n	8001ae4 <HAL_RCC_OscConfig+0x388>
 8001abc:	2302      	movs	r3, #2
 8001abe:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001ace:	2302      	movs	r3, #2
 8001ad0:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001ad4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001ad8:	fa93 f3a3 	rbit	r3, r3
 8001adc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001ae0:	4bb1      	ldr	r3, [pc, #708]	@ (8001da8 <HAL_RCC_OscConfig+0x64c>)
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001aea:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001aee:	fa92 f2a2 	rbit	r2, r2
 8001af2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001af6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001afa:	fab2 f282 	clz	r2, r2
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	f042 0220 	orr.w	r2, r2, #32
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	f002 021f 	and.w	r2, r2, #31
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00a      	beq.n	8001b2c <HAL_RCC_OscConfig+0x3d0>
 8001b16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b1a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d002      	beq.n	8001b2c <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	f000 be35 	b.w	8002796 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2c:	4b9e      	ldr	r3, [pc, #632]	@ (8001da8 <HAL_RCC_OscConfig+0x64c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b38:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	21f8      	movs	r1, #248	@ 0xf8
 8001b42:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001b4a:	fa91 f1a1 	rbit	r1, r1
 8001b4e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001b52:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001b56:	fab1 f181 	clz	r1, r1
 8001b5a:	b2c9      	uxtb	r1, r1
 8001b5c:	408b      	lsls	r3, r1
 8001b5e:	4992      	ldr	r1, [pc, #584]	@ (8001da8 <HAL_RCC_OscConfig+0x64c>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b64:	e0f1      	b.n	8001d4a <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b6a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 8083 	beq.w	8001c7e <HAL_RCC_OscConfig+0x522>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001b82:	fa93 f3a3 	rbit	r3, r3
 8001b86:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001b8a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b8e:	fab3 f383 	clz	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b98:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7fe ff8c 	bl	8000ac0 <HAL_GetTick>
 8001ba8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bac:	e00a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bae:	f7fe ff87 	bl	8000ac0 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d902      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	f000 bde9 	b.w	8002796 <HAL_RCC_OscConfig+0x103a>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001bce:	fa93 f3a3 	rbit	r3, r3
 8001bd2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001bd6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001be2:	d802      	bhi.n	8001bea <HAL_RCC_OscConfig+0x48e>
 8001be4:	4b70      	ldr	r3, [pc, #448]	@ (8001da8 <HAL_RCC_OscConfig+0x64c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	e013      	b.n	8001c12 <HAL_RCC_OscConfig+0x4b6>
 8001bea:	2302      	movs	r3, #2
 8001bec:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001bf4:	fa93 f3a3 	rbit	r3, r3
 8001bf8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001c02:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001c06:	fa93 f3a3 	rbit	r3, r3
 8001c0a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001c0e:	4b66      	ldr	r3, [pc, #408]	@ (8001da8 <HAL_RCC_OscConfig+0x64c>)
 8001c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c12:	2202      	movs	r2, #2
 8001c14:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001c18:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001c1c:	fa92 f2a2 	rbit	r2, r2
 8001c20:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001c24:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001c28:	fab2 f282 	clz	r2, r2
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	f042 0220 	orr.w	r2, r2, #32
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	f002 021f 	and.w	r2, r2, #31
 8001c38:	2101      	movs	r1, #1
 8001c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0b4      	beq.n	8001bae <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c44:	4b58      	ldr	r3, [pc, #352]	@ (8001da8 <HAL_RCC_OscConfig+0x64c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c50:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	21f8      	movs	r1, #248	@ 0xf8
 8001c5a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001c62:	fa91 f1a1 	rbit	r1, r1
 8001c66:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001c6a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001c6e:	fab1 f181 	clz	r1, r1
 8001c72:	b2c9      	uxtb	r1, r1
 8001c74:	408b      	lsls	r3, r1
 8001c76:	494c      	ldr	r1, [pc, #304]	@ (8001da8 <HAL_RCC_OscConfig+0x64c>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	600b      	str	r3, [r1, #0]
 8001c7c:	e065      	b.n	8001d4a <HAL_RCC_OscConfig+0x5ee>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001c90:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c94:	fab3 f383 	clz	r3, r3
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c9e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7fe ff09 	bl	8000ac0 <HAL_GetTick>
 8001cae:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb2:	e00a      	b.n	8001cca <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cb4:	f7fe ff04 	bl	8000ac0 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d902      	bls.n	8001cca <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	f000 bd66 	b.w	8002796 <HAL_RCC_OscConfig+0x103a>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001cd4:	fa93 f3a3 	rbit	r3, r3
 8001cd8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001cdc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce0:	fab3 f383 	clz	r3, r3
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ce8:	d802      	bhi.n	8001cf0 <HAL_RCC_OscConfig+0x594>
 8001cea:	4b2f      	ldr	r3, [pc, #188]	@ (8001da8 <HAL_RCC_OscConfig+0x64c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	e013      	b.n	8001d18 <HAL_RCC_OscConfig+0x5bc>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001cfa:	fa93 f3a3 	rbit	r3, r3
 8001cfe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001d02:	2302      	movs	r3, #2
 8001d04:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001d08:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001d0c:	fa93 f3a3 	rbit	r3, r3
 8001d10:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001d14:	4b24      	ldr	r3, [pc, #144]	@ (8001da8 <HAL_RCC_OscConfig+0x64c>)
 8001d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d18:	2202      	movs	r2, #2
 8001d1a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001d1e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001d22:	fa92 f2a2 	rbit	r2, r2
 8001d26:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001d2a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001d2e:	fab2 f282 	clz	r2, r2
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	f042 0220 	orr.w	r2, r2, #32
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	f002 021f 	and.w	r2, r2, #31
 8001d3e:	2101      	movs	r1, #1
 8001d40:	fa01 f202 	lsl.w	r2, r1, r2
 8001d44:	4013      	ands	r3, r2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1b4      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d4e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 8119 	beq.w	8001f92 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d64:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 8082 	beq.w	8001e76 <HAL_RCC_OscConfig+0x71a>
 8001d72:	2301      	movs	r3, #1
 8001d74:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001d7c:	fa93 f3a3 	rbit	r3, r3
 8001d80:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001d84:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d88:	fab3 f383 	clz	r3, r3
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <HAL_RCC_OscConfig+0x650>)
 8001d92:	4413      	add	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	461a      	mov	r2, r3
 8001d98:	2301      	movs	r3, #1
 8001d9a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9c:	f7fe fe90 	bl	8000ac0 <HAL_GetTick>
 8001da0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001da4:	e00f      	b.n	8001dc6 <HAL_RCC_OscConfig+0x66a>
 8001da6:	bf00      	nop
 8001da8:	40021000 	.word	0x40021000
 8001dac:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001db0:	f7fe fe86 	bl	8000ac0 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d902      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	f000 bce8 	b.w	8002796 <HAL_RCC_OscConfig+0x103a>
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001dd0:	fa93 f2a3 	rbit	r2, r3
 8001dd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dd8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001de2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001de6:	2202      	movs	r2, #2
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	fa93 f2a3 	rbit	r2, r3
 8001df8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e06:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e12:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	fa93 f2a3 	rbit	r2, r3
 8001e1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e20:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001e24:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e26:	4bb0      	ldr	r3, [pc, #704]	@ (80020e8 <HAL_RCC_OscConfig+0x98c>)
 8001e28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e2e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e32:	2102      	movs	r1, #2
 8001e34:	6019      	str	r1, [r3, #0]
 8001e36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e3a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	fa93 f1a3 	rbit	r1, r3
 8001e44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e48:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e4c:	6019      	str	r1, [r3, #0]
  return result;
 8001e4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e52:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	f003 031f 	and.w	r3, r3, #31
 8001e68:	2101      	movs	r1, #1
 8001e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d09d      	beq.n	8001db0 <HAL_RCC_OscConfig+0x654>
 8001e74:	e08d      	b.n	8001f92 <HAL_RCC_OscConfig+0x836>
 8001e76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e7a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e7e:	2201      	movs	r2, #1
 8001e80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e86:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	fa93 f2a3 	rbit	r2, r3
 8001e90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e94:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001e98:	601a      	str	r2, [r3, #0]
  return result;
 8001e9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e9e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001ea2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea4:	fab3 f383 	clz	r3, r3
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4b8f      	ldr	r3, [pc, #572]	@ (80020ec <HAL_RCC_OscConfig+0x990>)
 8001eae:	4413      	add	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb8:	f7fe fe02 	bl	8000ac0 <HAL_GetTick>
 8001ebc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec0:	e00a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ec2:	f7fe fdfd 	bl	8000ac0 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d902      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	f000 bc5f 	b.w	8002796 <HAL_RCC_OscConfig+0x103a>
 8001ed8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001edc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ee8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	fa93 f2a3 	rbit	r2, r3
 8001ef2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ef6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001f04:	2202      	movs	r2, #2
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f0c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	fa93 f2a3 	rbit	r2, r3
 8001f16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f1a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f24:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001f28:	2202      	movs	r2, #2
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f30:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	fa93 f2a3 	rbit	r2, r3
 8001f3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f3e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f42:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f44:	4b68      	ldr	r3, [pc, #416]	@ (80020e8 <HAL_RCC_OscConfig+0x98c>)
 8001f46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f4c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f50:	2102      	movs	r1, #2
 8001f52:	6019      	str	r1, [r3, #0]
 8001f54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f58:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	fa93 f1a3 	rbit	r1, r3
 8001f62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f66:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001f6a:	6019      	str	r1, [r3, #0]
  return result;
 8001f6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f70:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	f003 031f 	and.w	r3, r3, #31
 8001f86:	2101      	movs	r1, #1
 8001f88:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d197      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f96:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 819c 	beq.w	80022e0 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fae:	4b4e      	ldr	r3, [pc, #312]	@ (80020e8 <HAL_RCC_OscConfig+0x98c>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d116      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	4b4b      	ldr	r3, [pc, #300]	@ (80020e8 <HAL_RCC_OscConfig+0x98c>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	4a4a      	ldr	r2, [pc, #296]	@ (80020e8 <HAL_RCC_OscConfig+0x98c>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fc4:	61d3      	str	r3, [r2, #28]
 8001fc6:	4b48      	ldr	r3, [pc, #288]	@ (80020e8 <HAL_RCC_OscConfig+0x98c>)
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001fce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fdc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fe0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe8:	4b41      	ldr	r3, [pc, #260]	@ (80020f0 <HAL_RCC_OscConfig+0x994>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d11a      	bne.n	800202a <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ff4:	4b3e      	ldr	r3, [pc, #248]	@ (80020f0 <HAL_RCC_OscConfig+0x994>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a3d      	ldr	r2, [pc, #244]	@ (80020f0 <HAL_RCC_OscConfig+0x994>)
 8001ffa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ffe:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002000:	f7fe fd5e 	bl	8000ac0 <HAL_GetTick>
 8002004:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002008:	e009      	b.n	800201e <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200a:	f7fe fd59 	bl	8000ac0 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b64      	cmp	r3, #100	@ 0x64
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e3bb      	b.n	8002796 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201e:	4b34      	ldr	r3, [pc, #208]	@ (80020f0 <HAL_RCC_OscConfig+0x994>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0ef      	beq.n	800200a <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800202a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800202e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d106      	bne.n	8002048 <HAL_RCC_OscConfig+0x8ec>
 800203a:	4b2b      	ldr	r3, [pc, #172]	@ (80020e8 <HAL_RCC_OscConfig+0x98c>)
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	4a2a      	ldr	r2, [pc, #168]	@ (80020e8 <HAL_RCC_OscConfig+0x98c>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6213      	str	r3, [r2, #32]
 8002046:	e035      	b.n	80020b4 <HAL_RCC_OscConfig+0x958>
 8002048:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800204c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10c      	bne.n	8002072 <HAL_RCC_OscConfig+0x916>
 8002058:	4b23      	ldr	r3, [pc, #140]	@ (80020e8 <HAL_RCC_OscConfig+0x98c>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	4a22      	ldr	r2, [pc, #136]	@ (80020e8 <HAL_RCC_OscConfig+0x98c>)
 800205e:	f023 0301 	bic.w	r3, r3, #1
 8002062:	6213      	str	r3, [r2, #32]
 8002064:	4b20      	ldr	r3, [pc, #128]	@ (80020e8 <HAL_RCC_OscConfig+0x98c>)
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	4a1f      	ldr	r2, [pc, #124]	@ (80020e8 <HAL_RCC_OscConfig+0x98c>)
 800206a:	f023 0304 	bic.w	r3, r3, #4
 800206e:	6213      	str	r3, [r2, #32]
 8002070:	e020      	b.n	80020b4 <HAL_RCC_OscConfig+0x958>
 8002072:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002076:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b05      	cmp	r3, #5
 8002080:	d10c      	bne.n	800209c <HAL_RCC_OscConfig+0x940>
 8002082:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <HAL_RCC_OscConfig+0x98c>)
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	4a18      	ldr	r2, [pc, #96]	@ (80020e8 <HAL_RCC_OscConfig+0x98c>)
 8002088:	f043 0304 	orr.w	r3, r3, #4
 800208c:	6213      	str	r3, [r2, #32]
 800208e:	4b16      	ldr	r3, [pc, #88]	@ (80020e8 <HAL_RCC_OscConfig+0x98c>)
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	4a15      	ldr	r2, [pc, #84]	@ (80020e8 <HAL_RCC_OscConfig+0x98c>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6213      	str	r3, [r2, #32]
 800209a:	e00b      	b.n	80020b4 <HAL_RCC_OscConfig+0x958>
 800209c:	4b12      	ldr	r3, [pc, #72]	@ (80020e8 <HAL_RCC_OscConfig+0x98c>)
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	4a11      	ldr	r2, [pc, #68]	@ (80020e8 <HAL_RCC_OscConfig+0x98c>)
 80020a2:	f023 0301 	bic.w	r3, r3, #1
 80020a6:	6213      	str	r3, [r2, #32]
 80020a8:	4b0f      	ldr	r3, [pc, #60]	@ (80020e8 <HAL_RCC_OscConfig+0x98c>)
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	4a0e      	ldr	r2, [pc, #56]	@ (80020e8 <HAL_RCC_OscConfig+0x98c>)
 80020ae:	f023 0304 	bic.w	r3, r3, #4
 80020b2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020b8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 8085 	beq.w	80021d0 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c6:	f7fe fcfb 	bl	8000ac0 <HAL_GetTick>
 80020ca:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ce:	e011      	b.n	80020f4 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020d0:	f7fe fcf6 	bl	8000ac0 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d907      	bls.n	80020f4 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e356      	b.n	8002796 <HAL_RCC_OscConfig+0x103a>
 80020e8:	40021000 	.word	0x40021000
 80020ec:	10908120 	.word	0x10908120
 80020f0:	40007000 	.word	0x40007000
 80020f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020f8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80020fc:	2202      	movs	r2, #2
 80020fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002104:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	fa93 f2a3 	rbit	r2, r3
 800210e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002112:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800211c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002120:	2202      	movs	r2, #2
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002128:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	fa93 f2a3 	rbit	r2, r3
 8002132:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002136:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800213a:	601a      	str	r2, [r3, #0]
  return result;
 800213c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002140:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002144:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002146:	fab3 f383 	clz	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d102      	bne.n	800215c <HAL_RCC_OscConfig+0xa00>
 8002156:	4b98      	ldr	r3, [pc, #608]	@ (80023b8 <HAL_RCC_OscConfig+0xc5c>)
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	e013      	b.n	8002184 <HAL_RCC_OscConfig+0xa28>
 800215c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002160:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002164:	2202      	movs	r2, #2
 8002166:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800216c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	fa93 f2a3 	rbit	r2, r3
 8002176:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800217a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	4b8d      	ldr	r3, [pc, #564]	@ (80023b8 <HAL_RCC_OscConfig+0xc5c>)
 8002182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002184:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002188:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800218c:	2102      	movs	r1, #2
 800218e:	6011      	str	r1, [r2, #0]
 8002190:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002194:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	fa92 f1a2 	rbit	r1, r2
 800219e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021a2:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80021a6:	6011      	str	r1, [r2, #0]
  return result;
 80021a8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021ac:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	fab2 f282 	clz	r2, r2
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	f002 021f 	and.w	r2, r2, #31
 80021c2:	2101      	movs	r1, #1
 80021c4:	fa01 f202 	lsl.w	r2, r1, r2
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d080      	beq.n	80020d0 <HAL_RCC_OscConfig+0x974>
 80021ce:	e07d      	b.n	80022cc <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d0:	f7fe fc76 	bl	8000ac0 <HAL_GetTick>
 80021d4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d8:	e00b      	b.n	80021f2 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021da:	f7fe fc71 	bl	8000ac0 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e2d1      	b.n	8002796 <HAL_RCC_OscConfig+0x103a>
 80021f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021f6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80021fa:	2202      	movs	r2, #2
 80021fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002202:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	fa93 f2a3 	rbit	r2, r3
 800220c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002210:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800221a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800221e:	2202      	movs	r2, #2
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002226:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	fa93 f2a3 	rbit	r2, r3
 8002230:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002234:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002238:	601a      	str	r2, [r3, #0]
  return result;
 800223a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800223e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002242:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002244:	fab3 f383 	clz	r3, r3
 8002248:	b2db      	uxtb	r3, r3
 800224a:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d102      	bne.n	800225a <HAL_RCC_OscConfig+0xafe>
 8002254:	4b58      	ldr	r3, [pc, #352]	@ (80023b8 <HAL_RCC_OscConfig+0xc5c>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	e013      	b.n	8002282 <HAL_RCC_OscConfig+0xb26>
 800225a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800225e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002262:	2202      	movs	r2, #2
 8002264:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800226a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	fa93 f2a3 	rbit	r2, r3
 8002274:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002278:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	4b4e      	ldr	r3, [pc, #312]	@ (80023b8 <HAL_RCC_OscConfig+0xc5c>)
 8002280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002282:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002286:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800228a:	2102      	movs	r1, #2
 800228c:	6011      	str	r1, [r2, #0]
 800228e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002292:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	fa92 f1a2 	rbit	r1, r2
 800229c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80022a0:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80022a4:	6011      	str	r1, [r2, #0]
  return result;
 80022a6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80022aa:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	fab2 f282 	clz	r2, r2
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	f002 021f 	and.w	r2, r2, #31
 80022c0:	2101      	movs	r1, #1
 80022c2:	fa01 f202 	lsl.w	r2, r1, r2
 80022c6:	4013      	ands	r3, r2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d186      	bne.n	80021da <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022cc:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d105      	bne.n	80022e0 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d4:	4b38      	ldr	r3, [pc, #224]	@ (80023b8 <HAL_RCC_OscConfig+0xc5c>)
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	4a37      	ldr	r2, [pc, #220]	@ (80023b8 <HAL_RCC_OscConfig+0xc5c>)
 80022da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022de:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 8251 	beq.w	8002794 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022f2:	4b31      	ldr	r3, [pc, #196]	@ (80023b8 <HAL_RCC_OscConfig+0xc5c>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	f000 820f 	beq.w	800271e <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002300:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002304:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	2b02      	cmp	r3, #2
 800230e:	f040 8165 	bne.w	80025dc <HAL_RCC_OscConfig+0xe80>
 8002312:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002316:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800231a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800231e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002324:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	fa93 f2a3 	rbit	r2, r3
 800232e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002332:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002336:	601a      	str	r2, [r3, #0]
  return result;
 8002338:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800233c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002340:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800234c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	461a      	mov	r2, r3
 8002354:	2300      	movs	r3, #0
 8002356:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002358:	f7fe fbb2 	bl	8000ac0 <HAL_GetTick>
 800235c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002360:	e009      	b.n	8002376 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002362:	f7fe fbad 	bl	8000ac0 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e20f      	b.n	8002796 <HAL_RCC_OscConfig+0x103a>
 8002376:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800237a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800237e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002382:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002384:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002388:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	fa93 f2a3 	rbit	r2, r3
 8002392:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002396:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800239a:	601a      	str	r2, [r3, #0]
  return result;
 800239c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023a0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80023a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80023ae:	d805      	bhi.n	80023bc <HAL_RCC_OscConfig+0xc60>
 80023b0:	4b01      	ldr	r3, [pc, #4]	@ (80023b8 <HAL_RCC_OscConfig+0xc5c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	e02a      	b.n	800240c <HAL_RCC_OscConfig+0xcb0>
 80023b6:	bf00      	nop
 80023b8:	40021000 	.word	0x40021000
 80023bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023c0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80023c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ce:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	fa93 f2a3 	rbit	r2, r3
 80023d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023dc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023e6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80023ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023f4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	fa93 f2a3 	rbit	r2, r3
 80023fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002402:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	4bca      	ldr	r3, [pc, #808]	@ (8002734 <HAL_RCC_OscConfig+0xfd8>)
 800240a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002410:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002414:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002418:	6011      	str	r1, [r2, #0]
 800241a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800241e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	fa92 f1a2 	rbit	r1, r2
 8002428:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800242c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002430:	6011      	str	r1, [r2, #0]
  return result;
 8002432:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002436:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	fab2 f282 	clz	r2, r2
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	f042 0220 	orr.w	r2, r2, #32
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	f002 021f 	and.w	r2, r2, #31
 800244c:	2101      	movs	r1, #1
 800244e:	fa01 f202 	lsl.w	r2, r1, r2
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d184      	bne.n	8002362 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002458:	4bb6      	ldr	r3, [pc, #728]	@ (8002734 <HAL_RCC_OscConfig+0xfd8>)
 800245a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245c:	f023 020f 	bic.w	r2, r3, #15
 8002460:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002464:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246c:	49b1      	ldr	r1, [pc, #708]	@ (8002734 <HAL_RCC_OscConfig+0xfd8>)
 800246e:	4313      	orrs	r3, r2
 8002470:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002472:	4bb0      	ldr	r3, [pc, #704]	@ (8002734 <HAL_RCC_OscConfig+0xfd8>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800247a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800247e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6a19      	ldr	r1, [r3, #32]
 8002486:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800248a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	430b      	orrs	r3, r1
 8002494:	49a7      	ldr	r1, [pc, #668]	@ (8002734 <HAL_RCC_OscConfig+0xfd8>)
 8002496:	4313      	orrs	r3, r2
 8002498:	604b      	str	r3, [r1, #4]
 800249a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800249e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80024a2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ac:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	fa93 f2a3 	rbit	r2, r3
 80024b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ba:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80024be:	601a      	str	r2, [r3, #0]
  return result;
 80024c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024c4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80024c8:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80024d4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	461a      	mov	r2, r3
 80024dc:	2301      	movs	r3, #1
 80024de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7fe faee 	bl	8000ac0 <HAL_GetTick>
 80024e4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e8:	e009      	b.n	80024fe <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ea:	f7fe fae9 	bl	8000ac0 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e14b      	b.n	8002796 <HAL_RCC_OscConfig+0x103a>
 80024fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002502:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002506:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800250a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002510:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	fa93 f2a3 	rbit	r2, r3
 800251a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800251e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002522:	601a      	str	r2, [r3, #0]
  return result;
 8002524:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002528:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800252c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b3f      	cmp	r3, #63	@ 0x3f
 8002536:	d802      	bhi.n	800253e <HAL_RCC_OscConfig+0xde2>
 8002538:	4b7e      	ldr	r3, [pc, #504]	@ (8002734 <HAL_RCC_OscConfig+0xfd8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	e027      	b.n	800258e <HAL_RCC_OscConfig+0xe32>
 800253e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002542:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002546:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800254a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002550:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	fa93 f2a3 	rbit	r2, r3
 800255a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800255e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002568:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800256c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002576:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	fa93 f2a3 	rbit	r2, r3
 8002580:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002584:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	4b6a      	ldr	r3, [pc, #424]	@ (8002734 <HAL_RCC_OscConfig+0xfd8>)
 800258c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002592:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002596:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800259a:	6011      	str	r1, [r2, #0]
 800259c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025a0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	fa92 f1a2 	rbit	r1, r2
 80025aa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025ae:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80025b2:	6011      	str	r1, [r2, #0]
  return result;
 80025b4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025b8:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	fab2 f282 	clz	r2, r2
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	f042 0220 	orr.w	r2, r2, #32
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	f002 021f 	and.w	r2, r2, #31
 80025ce:	2101      	movs	r1, #1
 80025d0:	fa01 f202 	lsl.w	r2, r1, r2
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d087      	beq.n	80024ea <HAL_RCC_OscConfig+0xd8e>
 80025da:	e0db      	b.n	8002794 <HAL_RCC_OscConfig+0x1038>
 80025dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025e0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80025e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ee:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	fa93 f2a3 	rbit	r2, r3
 80025f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025fc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002600:	601a      	str	r2, [r3, #0]
  return result;
 8002602:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002606:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800260a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260c:	fab3 f383 	clz	r3, r3
 8002610:	b2db      	uxtb	r3, r3
 8002612:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002616:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	461a      	mov	r2, r3
 800261e:	2300      	movs	r3, #0
 8002620:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002622:	f7fe fa4d 	bl	8000ac0 <HAL_GetTick>
 8002626:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800262a:	e009      	b.n	8002640 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800262c:	f7fe fa48 	bl	8000ac0 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e0aa      	b.n	8002796 <HAL_RCC_OscConfig+0x103a>
 8002640:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002644:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002648:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800264c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002652:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	fa93 f2a3 	rbit	r2, r3
 800265c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002660:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002664:	601a      	str	r2, [r3, #0]
  return result;
 8002666:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800266a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800266e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002670:	fab3 f383 	clz	r3, r3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b3f      	cmp	r3, #63	@ 0x3f
 8002678:	d802      	bhi.n	8002680 <HAL_RCC_OscConfig+0xf24>
 800267a:	4b2e      	ldr	r3, [pc, #184]	@ (8002734 <HAL_RCC_OscConfig+0xfd8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	e027      	b.n	80026d0 <HAL_RCC_OscConfig+0xf74>
 8002680:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002684:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002688:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800268c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002692:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	fa93 f2a3 	rbit	r2, r3
 800269c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026a0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026aa:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80026ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026b8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	fa93 f2a3 	rbit	r2, r3
 80026c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026c6:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	4b19      	ldr	r3, [pc, #100]	@ (8002734 <HAL_RCC_OscConfig+0xfd8>)
 80026ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026d4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80026d8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80026dc:	6011      	str	r1, [r2, #0]
 80026de:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026e2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	fa92 f1a2 	rbit	r1, r2
 80026ec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026f0:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80026f4:	6011      	str	r1, [r2, #0]
  return result;
 80026f6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026fa:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	fab2 f282 	clz	r2, r2
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	f042 0220 	orr.w	r2, r2, #32
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	f002 021f 	and.w	r2, r2, #31
 8002710:	2101      	movs	r1, #1
 8002712:	fa01 f202 	lsl.w	r2, r1, r2
 8002716:	4013      	ands	r3, r2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d187      	bne.n	800262c <HAL_RCC_OscConfig+0xed0>
 800271c:	e03a      	b.n	8002794 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800271e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002722:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d104      	bne.n	8002738 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e031      	b.n	8002796 <HAL_RCC_OscConfig+0x103a>
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002738:	4b19      	ldr	r3, [pc, #100]	@ (80027a0 <HAL_RCC_OscConfig+0x1044>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002740:	4b17      	ldr	r3, [pc, #92]	@ (80027a0 <HAL_RCC_OscConfig+0x1044>)
 8002742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002744:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002748:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800274c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002750:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002754:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	429a      	cmp	r2, r3
 800275e:	d117      	bne.n	8002790 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002760:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002764:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002768:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800276c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002774:	429a      	cmp	r2, r3
 8002776:	d10b      	bne.n	8002790 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002778:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800277c:	f003 020f 	and.w	r2, r3, #15
 8002780:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002784:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40021000 	.word	0x40021000

080027a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b09e      	sub	sp, #120	@ 0x78
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e154      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027bc:	4b89      	ldr	r3, [pc, #548]	@ (80029e4 <HAL_RCC_ClockConfig+0x240>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d910      	bls.n	80027ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ca:	4b86      	ldr	r3, [pc, #536]	@ (80029e4 <HAL_RCC_ClockConfig+0x240>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 0207 	bic.w	r2, r3, #7
 80027d2:	4984      	ldr	r1, [pc, #528]	@ (80029e4 <HAL_RCC_ClockConfig+0x240>)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027da:	4b82      	ldr	r3, [pc, #520]	@ (80029e4 <HAL_RCC_ClockConfig+0x240>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e13c      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d008      	beq.n	800280a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f8:	4b7b      	ldr	r3, [pc, #492]	@ (80029e8 <HAL_RCC_ClockConfig+0x244>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	4978      	ldr	r1, [pc, #480]	@ (80029e8 <HAL_RCC_ClockConfig+0x244>)
 8002806:	4313      	orrs	r3, r2
 8002808:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 80cd 	beq.w	80029b2 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d137      	bne.n	8002890 <HAL_RCC_ClockConfig+0xec>
 8002820:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002824:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002828:	fa93 f3a3 	rbit	r3, r3
 800282c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800282e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002830:	fab3 f383 	clz	r3, r3
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b3f      	cmp	r3, #63	@ 0x3f
 8002838:	d802      	bhi.n	8002840 <HAL_RCC_ClockConfig+0x9c>
 800283a:	4b6b      	ldr	r3, [pc, #428]	@ (80029e8 <HAL_RCC_ClockConfig+0x244>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	e00f      	b.n	8002860 <HAL_RCC_ClockConfig+0xbc>
 8002840:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002844:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	667b      	str	r3, [r7, #100]	@ 0x64
 800284e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002852:	663b      	str	r3, [r7, #96]	@ 0x60
 8002854:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800285c:	4b62      	ldr	r3, [pc, #392]	@ (80029e8 <HAL_RCC_ClockConfig+0x244>)
 800285e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002860:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002864:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002866:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002868:	fa92 f2a2 	rbit	r2, r2
 800286c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800286e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002870:	fab2 f282 	clz	r2, r2
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	f042 0220 	orr.w	r2, r2, #32
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	f002 021f 	and.w	r2, r2, #31
 8002880:	2101      	movs	r1, #1
 8002882:	fa01 f202 	lsl.w	r2, r1, r2
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d171      	bne.n	8002970 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0ea      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d137      	bne.n	8002908 <HAL_RCC_ClockConfig+0x164>
 8002898:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800289c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028a0:	fa93 f3a3 	rbit	r3, r3
 80028a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80028a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a8:	fab3 f383 	clz	r3, r3
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80028b0:	d802      	bhi.n	80028b8 <HAL_RCC_ClockConfig+0x114>
 80028b2:	4b4d      	ldr	r3, [pc, #308]	@ (80029e8 <HAL_RCC_ClockConfig+0x244>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	e00f      	b.n	80028d8 <HAL_RCC_ClockConfig+0x134>
 80028b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80028c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80028cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028ce:	fa93 f3a3 	rbit	r3, r3
 80028d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028d4:	4b44      	ldr	r3, [pc, #272]	@ (80029e8 <HAL_RCC_ClockConfig+0x244>)
 80028d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028dc:	63ba      	str	r2, [r7, #56]	@ 0x38
 80028de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80028e0:	fa92 f2a2 	rbit	r2, r2
 80028e4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80028e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028e8:	fab2 f282 	clz	r2, r2
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	f042 0220 	orr.w	r2, r2, #32
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	f002 021f 	and.w	r2, r2, #31
 80028f8:	2101      	movs	r1, #1
 80028fa:	fa01 f202 	lsl.w	r2, r1, r2
 80028fe:	4013      	ands	r3, r2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d135      	bne.n	8002970 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0ae      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2c2>
 8002908:	2302      	movs	r3, #2
 800290a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002916:	fab3 f383 	clz	r3, r3
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b3f      	cmp	r3, #63	@ 0x3f
 800291e:	d802      	bhi.n	8002926 <HAL_RCC_ClockConfig+0x182>
 8002920:	4b31      	ldr	r3, [pc, #196]	@ (80029e8 <HAL_RCC_ClockConfig+0x244>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	e00d      	b.n	8002942 <HAL_RCC_ClockConfig+0x19e>
 8002926:	2302      	movs	r3, #2
 8002928:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800292c:	fa93 f3a3 	rbit	r3, r3
 8002930:	627b      	str	r3, [r7, #36]	@ 0x24
 8002932:	2302      	movs	r3, #2
 8002934:	623b      	str	r3, [r7, #32]
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	fa93 f3a3 	rbit	r3, r3
 800293c:	61fb      	str	r3, [r7, #28]
 800293e:	4b2a      	ldr	r3, [pc, #168]	@ (80029e8 <HAL_RCC_ClockConfig+0x244>)
 8002940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002942:	2202      	movs	r2, #2
 8002944:	61ba      	str	r2, [r7, #24]
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	fa92 f2a2 	rbit	r2, r2
 800294c:	617a      	str	r2, [r7, #20]
  return result;
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	fab2 f282 	clz	r2, r2
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	f042 0220 	orr.w	r2, r2, #32
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	f002 021f 	and.w	r2, r2, #31
 8002960:	2101      	movs	r1, #1
 8002962:	fa01 f202 	lsl.w	r2, r1, r2
 8002966:	4013      	ands	r3, r2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e07a      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002970:	4b1d      	ldr	r3, [pc, #116]	@ (80029e8 <HAL_RCC_ClockConfig+0x244>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f023 0203 	bic.w	r2, r3, #3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	491a      	ldr	r1, [pc, #104]	@ (80029e8 <HAL_RCC_ClockConfig+0x244>)
 800297e:	4313      	orrs	r3, r2
 8002980:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002982:	f7fe f89d 	bl	8000ac0 <HAL_GetTick>
 8002986:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002988:	e00a      	b.n	80029a0 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800298a:	f7fe f899 	bl	8000ac0 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002998:	4293      	cmp	r3, r2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e062      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a0:	4b11      	ldr	r3, [pc, #68]	@ (80029e8 <HAL_RCC_ClockConfig+0x244>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 020c 	and.w	r2, r3, #12
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d1eb      	bne.n	800298a <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029b2:	4b0c      	ldr	r3, [pc, #48]	@ (80029e4 <HAL_RCC_ClockConfig+0x240>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d215      	bcs.n	80029ec <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c0:	4b08      	ldr	r3, [pc, #32]	@ (80029e4 <HAL_RCC_ClockConfig+0x240>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f023 0207 	bic.w	r2, r3, #7
 80029c8:	4906      	ldr	r1, [pc, #24]	@ (80029e4 <HAL_RCC_ClockConfig+0x240>)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d0:	4b04      	ldr	r3, [pc, #16]	@ (80029e4 <HAL_RCC_ClockConfig+0x240>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d006      	beq.n	80029ec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e041      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2c2>
 80029e2:	bf00      	nop
 80029e4:	40022000 	.word	0x40022000
 80029e8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a70 <HAL_RCC_ClockConfig+0x2cc>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	491a      	ldr	r1, [pc, #104]	@ (8002a70 <HAL_RCC_ClockConfig+0x2cc>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d009      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a16:	4b16      	ldr	r3, [pc, #88]	@ (8002a70 <HAL_RCC_ClockConfig+0x2cc>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4912      	ldr	r1, [pc, #72]	@ (8002a70 <HAL_RCC_ClockConfig+0x2cc>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a2a:	f000 f829 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8002a2e:	4601      	mov	r1, r0
 8002a30:	4b0f      	ldr	r3, [pc, #60]	@ (8002a70 <HAL_RCC_ClockConfig+0x2cc>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a38:	22f0      	movs	r2, #240	@ 0xf0
 8002a3a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	fa92 f2a2 	rbit	r2, r2
 8002a42:	60fa      	str	r2, [r7, #12]
  return result;
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	fab2 f282 	clz	r2, r2
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	40d3      	lsrs	r3, r2
 8002a4e:	4a09      	ldr	r2, [pc, #36]	@ (8002a74 <HAL_RCC_ClockConfig+0x2d0>)
 8002a50:	5cd3      	ldrb	r3, [r2, r3]
 8002a52:	fa21 f303 	lsr.w	r3, r1, r3
 8002a56:	4a08      	ldr	r2, [pc, #32]	@ (8002a78 <HAL_RCC_ClockConfig+0x2d4>)
 8002a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a5a:	4b08      	ldr	r3, [pc, #32]	@ (8002a7c <HAL_RCC_ClockConfig+0x2d8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fd ffea 	bl	8000a38 <HAL_InitTick>
  
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3778      	adds	r7, #120	@ 0x78
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40021000 	.word	0x40021000
 8002a74:	080048d0 	.word	0x080048d0
 8002a78:	20000000 	.word	0x20000000
 8002a7c:	20000004 	.word	0x20000004

08002a80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	2300      	movs	r3, #0
 8002a94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002a9a:	4b1f      	ldr	r3, [pc, #124]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d002      	beq.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x30>
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d003      	beq.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x36>
 8002aae:	e029      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ab2:	613b      	str	r3, [r7, #16]
      break;
 8002ab4:	e029      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	0c9b      	lsrs	r3, r3, #18
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	4a18      	ldr	r2, [pc, #96]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ac0:	5cd3      	ldrb	r3, [r2, r3]
 8002ac2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002ac4:	4b14      	ldr	r3, [pc, #80]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac8:	f003 030f 	and.w	r3, r3, #15
 8002acc:	4a15      	ldr	r2, [pc, #84]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ace:	5cd3      	ldrb	r3, [r2, r3]
 8002ad0:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002adc:	4a0f      	ldr	r2, [pc, #60]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	fb02 f303 	mul.w	r3, r2, r3
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	e007      	b.n	8002afe <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002aee:	4a0b      	ldr	r2, [pc, #44]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	fb02 f303 	mul.w	r3, r2, r3
 8002afc:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	613b      	str	r3, [r7, #16]
      break;
 8002b02:	e002      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b04:	4b05      	ldr	r3, [pc, #20]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b06:	613b      	str	r3, [r7, #16]
      break;
 8002b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b0a:	693b      	ldr	r3, [r7, #16]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	371c      	adds	r7, #28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	007a1200 	.word	0x007a1200
 8002b20:	080048e8 	.word	0x080048e8
 8002b24:	080048f8 	.word	0x080048f8

08002b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b2c:	4b03      	ldr	r3, [pc, #12]	@ (8002b3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	20000000 	.word	0x20000000

08002b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b46:	f7ff ffef 	bl	8002b28 <HAL_RCC_GetHCLKFreq>
 8002b4a:	4601      	mov	r1, r0
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b54:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002b58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	fa92 f2a2 	rbit	r2, r2
 8002b60:	603a      	str	r2, [r7, #0]
  return result;
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	fab2 f282 	clz	r2, r2
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	40d3      	lsrs	r3, r2
 8002b6c:	4a04      	ldr	r2, [pc, #16]	@ (8002b80 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b6e:	5cd3      	ldrb	r3, [r2, r3]
 8002b70:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	080048e0 	.word	0x080048e0

08002b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b8a:	f7ff ffcd 	bl	8002b28 <HAL_RCC_GetHCLKFreq>
 8002b8e:	4601      	mov	r1, r0
 8002b90:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002b98:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002b9c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	fa92 f2a2 	rbit	r2, r2
 8002ba4:	603a      	str	r2, [r7, #0]
  return result;
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	fab2 f282 	clz	r2, r2
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	40d3      	lsrs	r3, r2
 8002bb0:	4a04      	ldr	r2, [pc, #16]	@ (8002bc4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002bb2:	5cd3      	ldrb	r3, [r2, r3]
 8002bb4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	080048e0 	.word	0x080048e0

08002bc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b092      	sub	sp, #72	@ 0x48
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 80d2 	beq.w	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bec:	4b4d      	ldr	r3, [pc, #308]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10e      	bne.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf8:	4b4a      	ldr	r3, [pc, #296]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	4a49      	ldr	r2, [pc, #292]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002bfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c02:	61d3      	str	r3, [r2, #28]
 8002c04:	4b47      	ldr	r3, [pc, #284]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c10:	2301      	movs	r3, #1
 8002c12:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c16:	4b44      	ldr	r3, [pc, #272]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d118      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c22:	4b41      	ldr	r3, [pc, #260]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a40      	ldr	r2, [pc, #256]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c2c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c2e:	f7fd ff47 	bl	8000ac0 <HAL_GetTick>
 8002c32:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c34:	e008      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c36:	f7fd ff43 	bl	8000ac0 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b64      	cmp	r3, #100	@ 0x64
 8002c42:	d901      	bls.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e1d4      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c48:	4b37      	ldr	r3, [pc, #220]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0f0      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c54:	4b33      	ldr	r3, [pc, #204]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 8082 	beq.w	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d07a      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c74:	4b2b      	ldr	r3, [pc, #172]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c82:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	461a      	mov	r2, r3
 8002c96:	4b25      	ldr	r3, [pc, #148]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002caa:	fa93 f3a3 	rbit	r3, r3
 8002cae:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cb2:	fab3 f383 	clz	r3, r3
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b1c      	ldr	r3, [pc, #112]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cc6:	4a17      	ldr	r2, [pc, #92]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002cc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d049      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd6:	f7fd fef3 	bl	8000ac0 <HAL_GetTick>
 8002cda:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cdc:	e00a      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f7fd feef 	bl	8000ac0 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e17e      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d00:	2302      	movs	r3, #2
 8002d02:	623b      	str	r3, [r7, #32]
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	fa93 f3a3 	rbit	r3, r3
 8002d0a:	61fb      	str	r3, [r7, #28]
  return result;
 8002d0c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d108      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002d1e:	4b01      	ldr	r3, [pc, #4]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	e00d      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002d24:	40021000 	.word	0x40021000
 8002d28:	40007000 	.word	0x40007000
 8002d2c:	10908100 	.word	0x10908100
 8002d30:	2302      	movs	r3, #2
 8002d32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	4b9a      	ldr	r3, [pc, #616]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d40:	2202      	movs	r2, #2
 8002d42:	613a      	str	r2, [r7, #16]
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	fa92 f2a2 	rbit	r2, r2
 8002d4a:	60fa      	str	r2, [r7, #12]
  return result;
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	fab2 f282 	clz	r2, r2
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	f002 021f 	and.w	r2, r2, #31
 8002d5e:	2101      	movs	r1, #1
 8002d60:	fa01 f202 	lsl.w	r2, r1, r2
 8002d64:	4013      	ands	r3, r2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0b9      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d6a:	4b8f      	ldr	r3, [pc, #572]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	498c      	ldr	r1, [pc, #560]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d7c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d105      	bne.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d84:	4b88      	ldr	r3, [pc, #544]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	4a87      	ldr	r2, [pc, #540]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d8e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d008      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d9c:	4b82      	ldr	r3, [pc, #520]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da0:	f023 0203 	bic.w	r2, r3, #3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	497f      	ldr	r1, [pc, #508]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d008      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dba:	4b7b      	ldr	r3, [pc, #492]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	4978      	ldr	r1, [pc, #480]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dd8:	4b73      	ldr	r3, [pc, #460]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ddc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	4970      	ldr	r1, [pc, #448]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0320 	and.w	r3, r3, #32
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d008      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002df6:	4b6c      	ldr	r3, [pc, #432]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfa:	f023 0210 	bic.w	r2, r3, #16
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	4969      	ldr	r1, [pc, #420]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e14:	4b64      	ldr	r3, [pc, #400]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e20:	4961      	ldr	r1, [pc, #388]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d008      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e32:	4b5d      	ldr	r3, [pc, #372]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e36:	f023 0220 	bic.w	r2, r3, #32
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	495a      	ldr	r1, [pc, #360]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e50:	4b55      	ldr	r3, [pc, #340]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e54:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5c:	4952      	ldr	r1, [pc, #328]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d008      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e6e:	4b4e      	ldr	r3, [pc, #312]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	494b      	ldr	r1, [pc, #300]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0310 	and.w	r3, r3, #16
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e8c:	4b46      	ldr	r3, [pc, #280]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e90:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	4943      	ldr	r1, [pc, #268]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d008      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002eaa:	4b3f      	ldr	r3, [pc, #252]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb6:	493c      	ldr	r1, [pc, #240]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ec8:	4b37      	ldr	r3, [pc, #220]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ecc:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed4:	4934      	ldr	r1, [pc, #208]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d008      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002ee6:	4b30      	ldr	r3, [pc, #192]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eea:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef2:	492d      	ldr	r1, [pc, #180]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d008      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f04:	4b28      	ldr	r3, [pc, #160]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f10:	4925      	ldr	r1, [pc, #148]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d008      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f22:	4b21      	ldr	r3, [pc, #132]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f26:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	491e      	ldr	r1, [pc, #120]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002f40:	4b19      	ldr	r3, [pc, #100]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f44:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4c:	4916      	ldr	r1, [pc, #88]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d008      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002f5e:	4b12      	ldr	r3, [pc, #72]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f62:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f6a:	490f      	ldr	r1, [pc, #60]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f80:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f88:	4907      	ldr	r1, [pc, #28]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00c      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002f9a:	4b03      	ldr	r3, [pc, #12]	@ (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	e002      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002fa6:	bf00      	nop
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fae:	4913      	ldr	r1, [pc, #76]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fcc:	490b      	ldr	r1, [pc, #44]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d008      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002fde:	4b07      	ldr	r3, [pc, #28]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fea:	4904      	ldr	r1, [pc, #16]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3748      	adds	r7, #72	@ 0x48
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40021000 	.word	0x40021000

08003000 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e040      	b.n	8003094 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003016:	2b00      	cmp	r3, #0
 8003018:	d106      	bne.n	8003028 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7fd fc86 	bl	8000934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2224      	movs	r2, #36	@ 0x24
 800302c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0201 	bic.w	r2, r2, #1
 800303c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f9fc 	bl	8003444 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f825 	bl	800309c <UART_SetConfig>
 8003052:	4603      	mov	r3, r0
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e01b      	b.n	8003094 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800306a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800307a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fa7b 	bl	8003588 <UART_CheckIdleState>
 8003092:	4603      	mov	r3, r0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	4313      	orrs	r3, r2
 80030be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	4b92      	ldr	r3, [pc, #584]	@ (8003310 <UART_SetConfig+0x274>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	6979      	ldr	r1, [r7, #20]
 80030d0:	430b      	orrs	r3, r1
 80030d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	430a      	orrs	r2, r1
 800310c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a80      	ldr	r2, [pc, #512]	@ (8003314 <UART_SetConfig+0x278>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d120      	bne.n	800315a <UART_SetConfig+0xbe>
 8003118:	4b7f      	ldr	r3, [pc, #508]	@ (8003318 <UART_SetConfig+0x27c>)
 800311a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311c:	f003 0303 	and.w	r3, r3, #3
 8003120:	2b03      	cmp	r3, #3
 8003122:	d817      	bhi.n	8003154 <UART_SetConfig+0xb8>
 8003124:	a201      	add	r2, pc, #4	@ (adr r2, 800312c <UART_SetConfig+0x90>)
 8003126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312a:	bf00      	nop
 800312c:	0800313d 	.word	0x0800313d
 8003130:	08003149 	.word	0x08003149
 8003134:	0800314f 	.word	0x0800314f
 8003138:	08003143 	.word	0x08003143
 800313c:	2301      	movs	r3, #1
 800313e:	77fb      	strb	r3, [r7, #31]
 8003140:	e0b5      	b.n	80032ae <UART_SetConfig+0x212>
 8003142:	2302      	movs	r3, #2
 8003144:	77fb      	strb	r3, [r7, #31]
 8003146:	e0b2      	b.n	80032ae <UART_SetConfig+0x212>
 8003148:	2304      	movs	r3, #4
 800314a:	77fb      	strb	r3, [r7, #31]
 800314c:	e0af      	b.n	80032ae <UART_SetConfig+0x212>
 800314e:	2308      	movs	r3, #8
 8003150:	77fb      	strb	r3, [r7, #31]
 8003152:	e0ac      	b.n	80032ae <UART_SetConfig+0x212>
 8003154:	2310      	movs	r3, #16
 8003156:	77fb      	strb	r3, [r7, #31]
 8003158:	e0a9      	b.n	80032ae <UART_SetConfig+0x212>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a6f      	ldr	r2, [pc, #444]	@ (800331c <UART_SetConfig+0x280>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d124      	bne.n	80031ae <UART_SetConfig+0x112>
 8003164:	4b6c      	ldr	r3, [pc, #432]	@ (8003318 <UART_SetConfig+0x27c>)
 8003166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003168:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800316c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003170:	d011      	beq.n	8003196 <UART_SetConfig+0xfa>
 8003172:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003176:	d817      	bhi.n	80031a8 <UART_SetConfig+0x10c>
 8003178:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800317c:	d011      	beq.n	80031a2 <UART_SetConfig+0x106>
 800317e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003182:	d811      	bhi.n	80031a8 <UART_SetConfig+0x10c>
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <UART_SetConfig+0xf4>
 8003188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800318c:	d006      	beq.n	800319c <UART_SetConfig+0x100>
 800318e:	e00b      	b.n	80031a8 <UART_SetConfig+0x10c>
 8003190:	2300      	movs	r3, #0
 8003192:	77fb      	strb	r3, [r7, #31]
 8003194:	e08b      	b.n	80032ae <UART_SetConfig+0x212>
 8003196:	2302      	movs	r3, #2
 8003198:	77fb      	strb	r3, [r7, #31]
 800319a:	e088      	b.n	80032ae <UART_SetConfig+0x212>
 800319c:	2304      	movs	r3, #4
 800319e:	77fb      	strb	r3, [r7, #31]
 80031a0:	e085      	b.n	80032ae <UART_SetConfig+0x212>
 80031a2:	2308      	movs	r3, #8
 80031a4:	77fb      	strb	r3, [r7, #31]
 80031a6:	e082      	b.n	80032ae <UART_SetConfig+0x212>
 80031a8:	2310      	movs	r3, #16
 80031aa:	77fb      	strb	r3, [r7, #31]
 80031ac:	e07f      	b.n	80032ae <UART_SetConfig+0x212>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a5b      	ldr	r2, [pc, #364]	@ (8003320 <UART_SetConfig+0x284>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d124      	bne.n	8003202 <UART_SetConfig+0x166>
 80031b8:	4b57      	ldr	r3, [pc, #348]	@ (8003318 <UART_SetConfig+0x27c>)
 80031ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031bc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80031c0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80031c4:	d011      	beq.n	80031ea <UART_SetConfig+0x14e>
 80031c6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80031ca:	d817      	bhi.n	80031fc <UART_SetConfig+0x160>
 80031cc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80031d0:	d011      	beq.n	80031f6 <UART_SetConfig+0x15a>
 80031d2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80031d6:	d811      	bhi.n	80031fc <UART_SetConfig+0x160>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <UART_SetConfig+0x148>
 80031dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80031e0:	d006      	beq.n	80031f0 <UART_SetConfig+0x154>
 80031e2:	e00b      	b.n	80031fc <UART_SetConfig+0x160>
 80031e4:	2300      	movs	r3, #0
 80031e6:	77fb      	strb	r3, [r7, #31]
 80031e8:	e061      	b.n	80032ae <UART_SetConfig+0x212>
 80031ea:	2302      	movs	r3, #2
 80031ec:	77fb      	strb	r3, [r7, #31]
 80031ee:	e05e      	b.n	80032ae <UART_SetConfig+0x212>
 80031f0:	2304      	movs	r3, #4
 80031f2:	77fb      	strb	r3, [r7, #31]
 80031f4:	e05b      	b.n	80032ae <UART_SetConfig+0x212>
 80031f6:	2308      	movs	r3, #8
 80031f8:	77fb      	strb	r3, [r7, #31]
 80031fa:	e058      	b.n	80032ae <UART_SetConfig+0x212>
 80031fc:	2310      	movs	r3, #16
 80031fe:	77fb      	strb	r3, [r7, #31]
 8003200:	e055      	b.n	80032ae <UART_SetConfig+0x212>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a47      	ldr	r2, [pc, #284]	@ (8003324 <UART_SetConfig+0x288>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d124      	bne.n	8003256 <UART_SetConfig+0x1ba>
 800320c:	4b42      	ldr	r3, [pc, #264]	@ (8003318 <UART_SetConfig+0x27c>)
 800320e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003210:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003214:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003218:	d011      	beq.n	800323e <UART_SetConfig+0x1a2>
 800321a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800321e:	d817      	bhi.n	8003250 <UART_SetConfig+0x1b4>
 8003220:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003224:	d011      	beq.n	800324a <UART_SetConfig+0x1ae>
 8003226:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800322a:	d811      	bhi.n	8003250 <UART_SetConfig+0x1b4>
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <UART_SetConfig+0x19c>
 8003230:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003234:	d006      	beq.n	8003244 <UART_SetConfig+0x1a8>
 8003236:	e00b      	b.n	8003250 <UART_SetConfig+0x1b4>
 8003238:	2300      	movs	r3, #0
 800323a:	77fb      	strb	r3, [r7, #31]
 800323c:	e037      	b.n	80032ae <UART_SetConfig+0x212>
 800323e:	2302      	movs	r3, #2
 8003240:	77fb      	strb	r3, [r7, #31]
 8003242:	e034      	b.n	80032ae <UART_SetConfig+0x212>
 8003244:	2304      	movs	r3, #4
 8003246:	77fb      	strb	r3, [r7, #31]
 8003248:	e031      	b.n	80032ae <UART_SetConfig+0x212>
 800324a:	2308      	movs	r3, #8
 800324c:	77fb      	strb	r3, [r7, #31]
 800324e:	e02e      	b.n	80032ae <UART_SetConfig+0x212>
 8003250:	2310      	movs	r3, #16
 8003252:	77fb      	strb	r3, [r7, #31]
 8003254:	e02b      	b.n	80032ae <UART_SetConfig+0x212>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a33      	ldr	r2, [pc, #204]	@ (8003328 <UART_SetConfig+0x28c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d124      	bne.n	80032aa <UART_SetConfig+0x20e>
 8003260:	4b2d      	ldr	r3, [pc, #180]	@ (8003318 <UART_SetConfig+0x27c>)
 8003262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003264:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003268:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800326c:	d011      	beq.n	8003292 <UART_SetConfig+0x1f6>
 800326e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003272:	d817      	bhi.n	80032a4 <UART_SetConfig+0x208>
 8003274:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003278:	d011      	beq.n	800329e <UART_SetConfig+0x202>
 800327a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800327e:	d811      	bhi.n	80032a4 <UART_SetConfig+0x208>
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <UART_SetConfig+0x1f0>
 8003284:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003288:	d006      	beq.n	8003298 <UART_SetConfig+0x1fc>
 800328a:	e00b      	b.n	80032a4 <UART_SetConfig+0x208>
 800328c:	2300      	movs	r3, #0
 800328e:	77fb      	strb	r3, [r7, #31]
 8003290:	e00d      	b.n	80032ae <UART_SetConfig+0x212>
 8003292:	2302      	movs	r3, #2
 8003294:	77fb      	strb	r3, [r7, #31]
 8003296:	e00a      	b.n	80032ae <UART_SetConfig+0x212>
 8003298:	2304      	movs	r3, #4
 800329a:	77fb      	strb	r3, [r7, #31]
 800329c:	e007      	b.n	80032ae <UART_SetConfig+0x212>
 800329e:	2308      	movs	r3, #8
 80032a0:	77fb      	strb	r3, [r7, #31]
 80032a2:	e004      	b.n	80032ae <UART_SetConfig+0x212>
 80032a4:	2310      	movs	r3, #16
 80032a6:	77fb      	strb	r3, [r7, #31]
 80032a8:	e001      	b.n	80032ae <UART_SetConfig+0x212>
 80032aa:	2310      	movs	r3, #16
 80032ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032b6:	d16b      	bne.n	8003390 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80032b8:	7ffb      	ldrb	r3, [r7, #31]
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d838      	bhi.n	8003330 <UART_SetConfig+0x294>
 80032be:	a201      	add	r2, pc, #4	@ (adr r2, 80032c4 <UART_SetConfig+0x228>)
 80032c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c4:	080032e9 	.word	0x080032e9
 80032c8:	080032f1 	.word	0x080032f1
 80032cc:	080032f9 	.word	0x080032f9
 80032d0:	08003331 	.word	0x08003331
 80032d4:	080032ff 	.word	0x080032ff
 80032d8:	08003331 	.word	0x08003331
 80032dc:	08003331 	.word	0x08003331
 80032e0:	08003331 	.word	0x08003331
 80032e4:	08003307 	.word	0x08003307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032e8:	f7ff fc2a 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 80032ec:	61b8      	str	r0, [r7, #24]
        break;
 80032ee:	e024      	b.n	800333a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032f0:	f7ff fc48 	bl	8002b84 <HAL_RCC_GetPCLK2Freq>
 80032f4:	61b8      	str	r0, [r7, #24]
        break;
 80032f6:	e020      	b.n	800333a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032f8:	4b0c      	ldr	r3, [pc, #48]	@ (800332c <UART_SetConfig+0x290>)
 80032fa:	61bb      	str	r3, [r7, #24]
        break;
 80032fc:	e01d      	b.n	800333a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032fe:	f7ff fbbf 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8003302:	61b8      	str	r0, [r7, #24]
        break;
 8003304:	e019      	b.n	800333a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003306:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800330a:	61bb      	str	r3, [r7, #24]
        break;
 800330c:	e015      	b.n	800333a <UART_SetConfig+0x29e>
 800330e:	bf00      	nop
 8003310:	efff69f3 	.word	0xefff69f3
 8003314:	40013800 	.word	0x40013800
 8003318:	40021000 	.word	0x40021000
 800331c:	40004400 	.word	0x40004400
 8003320:	40004800 	.word	0x40004800
 8003324:	40004c00 	.word	0x40004c00
 8003328:	40005000 	.word	0x40005000
 800332c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	77bb      	strb	r3, [r7, #30]
        break;
 8003338:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d073      	beq.n	8003428 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	005a      	lsls	r2, r3, #1
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	085b      	lsrs	r3, r3, #1
 800334a:	441a      	add	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	fbb2 f3f3 	udiv	r3, r2, r3
 8003354:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	2b0f      	cmp	r3, #15
 800335a:	d916      	bls.n	800338a <UART_SetConfig+0x2ee>
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003362:	d212      	bcs.n	800338a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	b29b      	uxth	r3, r3
 8003368:	f023 030f 	bic.w	r3, r3, #15
 800336c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	085b      	lsrs	r3, r3, #1
 8003372:	b29b      	uxth	r3, r3
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	b29a      	uxth	r2, r3
 800337a:	89fb      	ldrh	r3, [r7, #14]
 800337c:	4313      	orrs	r3, r2
 800337e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	89fa      	ldrh	r2, [r7, #14]
 8003386:	60da      	str	r2, [r3, #12]
 8003388:	e04e      	b.n	8003428 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	77bb      	strb	r3, [r7, #30]
 800338e:	e04b      	b.n	8003428 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003390:	7ffb      	ldrb	r3, [r7, #31]
 8003392:	2b08      	cmp	r3, #8
 8003394:	d827      	bhi.n	80033e6 <UART_SetConfig+0x34a>
 8003396:	a201      	add	r2, pc, #4	@ (adr r2, 800339c <UART_SetConfig+0x300>)
 8003398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339c:	080033c1 	.word	0x080033c1
 80033a0:	080033c9 	.word	0x080033c9
 80033a4:	080033d1 	.word	0x080033d1
 80033a8:	080033e7 	.word	0x080033e7
 80033ac:	080033d7 	.word	0x080033d7
 80033b0:	080033e7 	.word	0x080033e7
 80033b4:	080033e7 	.word	0x080033e7
 80033b8:	080033e7 	.word	0x080033e7
 80033bc:	080033df 	.word	0x080033df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033c0:	f7ff fbbe 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 80033c4:	61b8      	str	r0, [r7, #24]
        break;
 80033c6:	e013      	b.n	80033f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033c8:	f7ff fbdc 	bl	8002b84 <HAL_RCC_GetPCLK2Freq>
 80033cc:	61b8      	str	r0, [r7, #24]
        break;
 80033ce:	e00f      	b.n	80033f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003440 <UART_SetConfig+0x3a4>)
 80033d2:	61bb      	str	r3, [r7, #24]
        break;
 80033d4:	e00c      	b.n	80033f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033d6:	f7ff fb53 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 80033da:	61b8      	str	r0, [r7, #24]
        break;
 80033dc:	e008      	b.n	80033f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033e2:	61bb      	str	r3, [r7, #24]
        break;
 80033e4:	e004      	b.n	80033f0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	77bb      	strb	r3, [r7, #30]
        break;
 80033ee:	bf00      	nop
    }

    if (pclk != 0U)
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d018      	beq.n	8003428 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	085a      	lsrs	r2, r3, #1
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	441a      	add	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	fbb2 f3f3 	udiv	r3, r2, r3
 8003408:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	2b0f      	cmp	r3, #15
 800340e:	d909      	bls.n	8003424 <UART_SetConfig+0x388>
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003416:	d205      	bcs.n	8003424 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	b29a      	uxth	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	e001      	b.n	8003428 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003434:	7fbb      	ldrb	r3, [r7, #30]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3720      	adds	r7, #32
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	007a1200 	.word	0x007a1200

08003444 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00a      	beq.n	800346e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d8:	f003 0310 	and.w	r3, r3, #16
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003520:	2b00      	cmp	r3, #0
 8003522:	d01a      	beq.n	800355a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003542:	d10a      	bne.n	800355a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	605a      	str	r2, [r3, #4]
  }
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b098      	sub	sp, #96	@ 0x60
 800358c:	af02      	add	r7, sp, #8
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003598:	f7fd fa92 	bl	8000ac0 <HAL_GetTick>
 800359c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d12e      	bne.n	800360a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b4:	2200      	movs	r2, #0
 80035b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f88c 	bl	80036d8 <UART_WaitOnFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d021      	beq.n	800360a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ce:	e853 3f00 	ldrex	r3, [r3]
 80035d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035da:	653b      	str	r3, [r7, #80]	@ 0x50
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	461a      	mov	r2, r3
 80035e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80035e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035ec:	e841 2300 	strex	r3, r2, [r1]
 80035f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1e6      	bne.n	80035c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e062      	b.n	80036d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b04      	cmp	r3, #4
 8003616:	d149      	bne.n	80036ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003618:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003620:	2200      	movs	r2, #0
 8003622:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f856 	bl	80036d8 <UART_WaitOnFlagUntilTimeout>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d03c      	beq.n	80036ac <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363a:	e853 3f00 	ldrex	r3, [r3]
 800363e:	623b      	str	r3, [r7, #32]
   return(result);
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003646:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003650:	633b      	str	r3, [r7, #48]	@ 0x30
 8003652:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003654:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003656:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003658:	e841 2300 	strex	r3, r2, [r1]
 800365c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800365e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1e6      	bne.n	8003632 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3308      	adds	r3, #8
 800366a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	e853 3f00 	ldrex	r3, [r3]
 8003672:	60fb      	str	r3, [r7, #12]
   return(result);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0301 	bic.w	r3, r3, #1
 800367a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3308      	adds	r3, #8
 8003682:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003684:	61fa      	str	r2, [r7, #28]
 8003686:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003688:	69b9      	ldr	r1, [r7, #24]
 800368a:	69fa      	ldr	r2, [r7, #28]
 800368c:	e841 2300 	strex	r3, r2, [r1]
 8003690:	617b      	str	r3, [r7, #20]
   return(result);
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1e5      	bne.n	8003664 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2220      	movs	r2, #32
 800369c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e011      	b.n	80036d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3758      	adds	r7, #88	@ 0x58
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	603b      	str	r3, [r7, #0]
 80036e4:	4613      	mov	r3, r2
 80036e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036e8:	e04f      	b.n	800378a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036f0:	d04b      	beq.n	800378a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f2:	f7fd f9e5 	bl	8000ac0 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d302      	bcc.n	8003708 <UART_WaitOnFlagUntilTimeout+0x30>
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e04e      	b.n	80037aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	2b00      	cmp	r3, #0
 8003718:	d037      	beq.n	800378a <UART_WaitOnFlagUntilTimeout+0xb2>
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b80      	cmp	r3, #128	@ 0x80
 800371e:	d034      	beq.n	800378a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b40      	cmp	r3, #64	@ 0x40
 8003724:	d031      	beq.n	800378a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b08      	cmp	r3, #8
 8003732:	d110      	bne.n	8003756 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2208      	movs	r2, #8
 800373a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 f838 	bl	80037b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2208      	movs	r2, #8
 8003746:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e029      	b.n	80037aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003760:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003764:	d111      	bne.n	800378a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800376e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 f81e 	bl	80037b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2220      	movs	r2, #32
 800377a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e00f      	b.n	80037aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69da      	ldr	r2, [r3, #28]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	4013      	ands	r3, r2
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	429a      	cmp	r2, r3
 8003798:	bf0c      	ite	eq
 800379a:	2301      	moveq	r3, #1
 800379c:	2300      	movne	r3, #0
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	461a      	mov	r2, r3
 80037a2:	79fb      	ldrb	r3, [r7, #7]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d0a0      	beq.n	80036ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b095      	sub	sp, #84	@ 0x54
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037c2:	e853 3f00 	ldrex	r3, [r3]
 80037c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80037da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037e0:	e841 2300 	strex	r3, r2, [r1]
 80037e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1e6      	bne.n	80037ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3308      	adds	r3, #8
 80037f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	e853 3f00 	ldrex	r3, [r3]
 80037fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f023 0301 	bic.w	r3, r3, #1
 8003802:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3308      	adds	r3, #8
 800380a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800380c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800380e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003810:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003812:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003814:	e841 2300 	strex	r3, r2, [r1]
 8003818:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800381a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1e5      	bne.n	80037ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003824:	2b01      	cmp	r3, #1
 8003826:	d118      	bne.n	800385a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	60bb      	str	r3, [r7, #8]
   return(result);
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f023 0310 	bic.w	r3, r3, #16
 800383c:	647b      	str	r3, [r7, #68]	@ 0x44
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003846:	61bb      	str	r3, [r7, #24]
 8003848:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384a:	6979      	ldr	r1, [r7, #20]
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	e841 2300 	strex	r3, r2, [r1]
 8003852:	613b      	str	r3, [r7, #16]
   return(result);
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1e6      	bne.n	8003828 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2220      	movs	r2, #32
 800385e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800386e:	bf00      	nop
 8003870:	3754      	adds	r7, #84	@ 0x54
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
	...

0800387c <std>:
 800387c:	2300      	movs	r3, #0
 800387e:	b510      	push	{r4, lr}
 8003880:	4604      	mov	r4, r0
 8003882:	e9c0 3300 	strd	r3, r3, [r0]
 8003886:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800388a:	6083      	str	r3, [r0, #8]
 800388c:	8181      	strh	r1, [r0, #12]
 800388e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003890:	81c2      	strh	r2, [r0, #14]
 8003892:	6183      	str	r3, [r0, #24]
 8003894:	4619      	mov	r1, r3
 8003896:	2208      	movs	r2, #8
 8003898:	305c      	adds	r0, #92	@ 0x5c
 800389a:	f000 fa01 	bl	8003ca0 <memset>
 800389e:	4b0d      	ldr	r3, [pc, #52]	@ (80038d4 <std+0x58>)
 80038a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80038a2:	4b0d      	ldr	r3, [pc, #52]	@ (80038d8 <std+0x5c>)
 80038a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80038a6:	4b0d      	ldr	r3, [pc, #52]	@ (80038dc <std+0x60>)
 80038a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80038aa:	4b0d      	ldr	r3, [pc, #52]	@ (80038e0 <std+0x64>)
 80038ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80038ae:	4b0d      	ldr	r3, [pc, #52]	@ (80038e4 <std+0x68>)
 80038b0:	6224      	str	r4, [r4, #32]
 80038b2:	429c      	cmp	r4, r3
 80038b4:	d006      	beq.n	80038c4 <std+0x48>
 80038b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80038ba:	4294      	cmp	r4, r2
 80038bc:	d002      	beq.n	80038c4 <std+0x48>
 80038be:	33d0      	adds	r3, #208	@ 0xd0
 80038c0:	429c      	cmp	r4, r3
 80038c2:	d105      	bne.n	80038d0 <std+0x54>
 80038c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80038c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038cc:	f000 ba60 	b.w	8003d90 <__retarget_lock_init_recursive>
 80038d0:	bd10      	pop	{r4, pc}
 80038d2:	bf00      	nop
 80038d4:	08003af1 	.word	0x08003af1
 80038d8:	08003b13 	.word	0x08003b13
 80038dc:	08003b4b 	.word	0x08003b4b
 80038e0:	08003b6f 	.word	0x08003b6f
 80038e4:	2000016c 	.word	0x2000016c

080038e8 <stdio_exit_handler>:
 80038e8:	4a02      	ldr	r2, [pc, #8]	@ (80038f4 <stdio_exit_handler+0xc>)
 80038ea:	4903      	ldr	r1, [pc, #12]	@ (80038f8 <stdio_exit_handler+0x10>)
 80038ec:	4803      	ldr	r0, [pc, #12]	@ (80038fc <stdio_exit_handler+0x14>)
 80038ee:	f000 b869 	b.w	80039c4 <_fwalk_sglue>
 80038f2:	bf00      	nop
 80038f4:	2000000c 	.word	0x2000000c
 80038f8:	0800462d 	.word	0x0800462d
 80038fc:	2000001c 	.word	0x2000001c

08003900 <cleanup_stdio>:
 8003900:	6841      	ldr	r1, [r0, #4]
 8003902:	4b0c      	ldr	r3, [pc, #48]	@ (8003934 <cleanup_stdio+0x34>)
 8003904:	4299      	cmp	r1, r3
 8003906:	b510      	push	{r4, lr}
 8003908:	4604      	mov	r4, r0
 800390a:	d001      	beq.n	8003910 <cleanup_stdio+0x10>
 800390c:	f000 fe8e 	bl	800462c <_fflush_r>
 8003910:	68a1      	ldr	r1, [r4, #8]
 8003912:	4b09      	ldr	r3, [pc, #36]	@ (8003938 <cleanup_stdio+0x38>)
 8003914:	4299      	cmp	r1, r3
 8003916:	d002      	beq.n	800391e <cleanup_stdio+0x1e>
 8003918:	4620      	mov	r0, r4
 800391a:	f000 fe87 	bl	800462c <_fflush_r>
 800391e:	68e1      	ldr	r1, [r4, #12]
 8003920:	4b06      	ldr	r3, [pc, #24]	@ (800393c <cleanup_stdio+0x3c>)
 8003922:	4299      	cmp	r1, r3
 8003924:	d004      	beq.n	8003930 <cleanup_stdio+0x30>
 8003926:	4620      	mov	r0, r4
 8003928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800392c:	f000 be7e 	b.w	800462c <_fflush_r>
 8003930:	bd10      	pop	{r4, pc}
 8003932:	bf00      	nop
 8003934:	2000016c 	.word	0x2000016c
 8003938:	200001d4 	.word	0x200001d4
 800393c:	2000023c 	.word	0x2000023c

08003940 <global_stdio_init.part.0>:
 8003940:	b510      	push	{r4, lr}
 8003942:	4b0b      	ldr	r3, [pc, #44]	@ (8003970 <global_stdio_init.part.0+0x30>)
 8003944:	4c0b      	ldr	r4, [pc, #44]	@ (8003974 <global_stdio_init.part.0+0x34>)
 8003946:	4a0c      	ldr	r2, [pc, #48]	@ (8003978 <global_stdio_init.part.0+0x38>)
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	4620      	mov	r0, r4
 800394c:	2200      	movs	r2, #0
 800394e:	2104      	movs	r1, #4
 8003950:	f7ff ff94 	bl	800387c <std>
 8003954:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003958:	2201      	movs	r2, #1
 800395a:	2109      	movs	r1, #9
 800395c:	f7ff ff8e 	bl	800387c <std>
 8003960:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003964:	2202      	movs	r2, #2
 8003966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800396a:	2112      	movs	r1, #18
 800396c:	f7ff bf86 	b.w	800387c <std>
 8003970:	200002a4 	.word	0x200002a4
 8003974:	2000016c 	.word	0x2000016c
 8003978:	080038e9 	.word	0x080038e9

0800397c <__sfp_lock_acquire>:
 800397c:	4801      	ldr	r0, [pc, #4]	@ (8003984 <__sfp_lock_acquire+0x8>)
 800397e:	f000 ba08 	b.w	8003d92 <__retarget_lock_acquire_recursive>
 8003982:	bf00      	nop
 8003984:	200002ad 	.word	0x200002ad

08003988 <__sfp_lock_release>:
 8003988:	4801      	ldr	r0, [pc, #4]	@ (8003990 <__sfp_lock_release+0x8>)
 800398a:	f000 ba03 	b.w	8003d94 <__retarget_lock_release_recursive>
 800398e:	bf00      	nop
 8003990:	200002ad 	.word	0x200002ad

08003994 <__sinit>:
 8003994:	b510      	push	{r4, lr}
 8003996:	4604      	mov	r4, r0
 8003998:	f7ff fff0 	bl	800397c <__sfp_lock_acquire>
 800399c:	6a23      	ldr	r3, [r4, #32]
 800399e:	b11b      	cbz	r3, 80039a8 <__sinit+0x14>
 80039a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039a4:	f7ff bff0 	b.w	8003988 <__sfp_lock_release>
 80039a8:	4b04      	ldr	r3, [pc, #16]	@ (80039bc <__sinit+0x28>)
 80039aa:	6223      	str	r3, [r4, #32]
 80039ac:	4b04      	ldr	r3, [pc, #16]	@ (80039c0 <__sinit+0x2c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1f5      	bne.n	80039a0 <__sinit+0xc>
 80039b4:	f7ff ffc4 	bl	8003940 <global_stdio_init.part.0>
 80039b8:	e7f2      	b.n	80039a0 <__sinit+0xc>
 80039ba:	bf00      	nop
 80039bc:	08003901 	.word	0x08003901
 80039c0:	200002a4 	.word	0x200002a4

080039c4 <_fwalk_sglue>:
 80039c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039c8:	4607      	mov	r7, r0
 80039ca:	4688      	mov	r8, r1
 80039cc:	4614      	mov	r4, r2
 80039ce:	2600      	movs	r6, #0
 80039d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039d4:	f1b9 0901 	subs.w	r9, r9, #1
 80039d8:	d505      	bpl.n	80039e6 <_fwalk_sglue+0x22>
 80039da:	6824      	ldr	r4, [r4, #0]
 80039dc:	2c00      	cmp	r4, #0
 80039de:	d1f7      	bne.n	80039d0 <_fwalk_sglue+0xc>
 80039e0:	4630      	mov	r0, r6
 80039e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039e6:	89ab      	ldrh	r3, [r5, #12]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d907      	bls.n	80039fc <_fwalk_sglue+0x38>
 80039ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039f0:	3301      	adds	r3, #1
 80039f2:	d003      	beq.n	80039fc <_fwalk_sglue+0x38>
 80039f4:	4629      	mov	r1, r5
 80039f6:	4638      	mov	r0, r7
 80039f8:	47c0      	blx	r8
 80039fa:	4306      	orrs	r6, r0
 80039fc:	3568      	adds	r5, #104	@ 0x68
 80039fe:	e7e9      	b.n	80039d4 <_fwalk_sglue+0x10>

08003a00 <iprintf>:
 8003a00:	b40f      	push	{r0, r1, r2, r3}
 8003a02:	b507      	push	{r0, r1, r2, lr}
 8003a04:	4906      	ldr	r1, [pc, #24]	@ (8003a20 <iprintf+0x20>)
 8003a06:	ab04      	add	r3, sp, #16
 8003a08:	6808      	ldr	r0, [r1, #0]
 8003a0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a0e:	6881      	ldr	r1, [r0, #8]
 8003a10:	9301      	str	r3, [sp, #4]
 8003a12:	f000 fae3 	bl	8003fdc <_vfiprintf_r>
 8003a16:	b003      	add	sp, #12
 8003a18:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a1c:	b004      	add	sp, #16
 8003a1e:	4770      	bx	lr
 8003a20:	20000018 	.word	0x20000018

08003a24 <putchar>:
 8003a24:	4b02      	ldr	r3, [pc, #8]	@ (8003a30 <putchar+0xc>)
 8003a26:	4601      	mov	r1, r0
 8003a28:	6818      	ldr	r0, [r3, #0]
 8003a2a:	6882      	ldr	r2, [r0, #8]
 8003a2c:	f000 be88 	b.w	8004740 <_putc_r>
 8003a30:	20000018 	.word	0x20000018

08003a34 <_puts_r>:
 8003a34:	6a03      	ldr	r3, [r0, #32]
 8003a36:	b570      	push	{r4, r5, r6, lr}
 8003a38:	6884      	ldr	r4, [r0, #8]
 8003a3a:	4605      	mov	r5, r0
 8003a3c:	460e      	mov	r6, r1
 8003a3e:	b90b      	cbnz	r3, 8003a44 <_puts_r+0x10>
 8003a40:	f7ff ffa8 	bl	8003994 <__sinit>
 8003a44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a46:	07db      	lsls	r3, r3, #31
 8003a48:	d405      	bmi.n	8003a56 <_puts_r+0x22>
 8003a4a:	89a3      	ldrh	r3, [r4, #12]
 8003a4c:	0598      	lsls	r0, r3, #22
 8003a4e:	d402      	bmi.n	8003a56 <_puts_r+0x22>
 8003a50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a52:	f000 f99e 	bl	8003d92 <__retarget_lock_acquire_recursive>
 8003a56:	89a3      	ldrh	r3, [r4, #12]
 8003a58:	0719      	lsls	r1, r3, #28
 8003a5a:	d502      	bpl.n	8003a62 <_puts_r+0x2e>
 8003a5c:	6923      	ldr	r3, [r4, #16]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d135      	bne.n	8003ace <_puts_r+0x9a>
 8003a62:	4621      	mov	r1, r4
 8003a64:	4628      	mov	r0, r5
 8003a66:	f000 f8c5 	bl	8003bf4 <__swsetup_r>
 8003a6a:	b380      	cbz	r0, 8003ace <_puts_r+0x9a>
 8003a6c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003a70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a72:	07da      	lsls	r2, r3, #31
 8003a74:	d405      	bmi.n	8003a82 <_puts_r+0x4e>
 8003a76:	89a3      	ldrh	r3, [r4, #12]
 8003a78:	059b      	lsls	r3, r3, #22
 8003a7a:	d402      	bmi.n	8003a82 <_puts_r+0x4e>
 8003a7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a7e:	f000 f989 	bl	8003d94 <__retarget_lock_release_recursive>
 8003a82:	4628      	mov	r0, r5
 8003a84:	bd70      	pop	{r4, r5, r6, pc}
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	da04      	bge.n	8003a94 <_puts_r+0x60>
 8003a8a:	69a2      	ldr	r2, [r4, #24]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	dc17      	bgt.n	8003ac0 <_puts_r+0x8c>
 8003a90:	290a      	cmp	r1, #10
 8003a92:	d015      	beq.n	8003ac0 <_puts_r+0x8c>
 8003a94:	6823      	ldr	r3, [r4, #0]
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	6022      	str	r2, [r4, #0]
 8003a9a:	7019      	strb	r1, [r3, #0]
 8003a9c:	68a3      	ldr	r3, [r4, #8]
 8003a9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	60a3      	str	r3, [r4, #8]
 8003aa6:	2900      	cmp	r1, #0
 8003aa8:	d1ed      	bne.n	8003a86 <_puts_r+0x52>
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	da11      	bge.n	8003ad2 <_puts_r+0x9e>
 8003aae:	4622      	mov	r2, r4
 8003ab0:	210a      	movs	r1, #10
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	f000 f85f 	bl	8003b76 <__swbuf_r>
 8003ab8:	3001      	adds	r0, #1
 8003aba:	d0d7      	beq.n	8003a6c <_puts_r+0x38>
 8003abc:	250a      	movs	r5, #10
 8003abe:	e7d7      	b.n	8003a70 <_puts_r+0x3c>
 8003ac0:	4622      	mov	r2, r4
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	f000 f857 	bl	8003b76 <__swbuf_r>
 8003ac8:	3001      	adds	r0, #1
 8003aca:	d1e7      	bne.n	8003a9c <_puts_r+0x68>
 8003acc:	e7ce      	b.n	8003a6c <_puts_r+0x38>
 8003ace:	3e01      	subs	r6, #1
 8003ad0:	e7e4      	b.n	8003a9c <_puts_r+0x68>
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	1c5a      	adds	r2, r3, #1
 8003ad6:	6022      	str	r2, [r4, #0]
 8003ad8:	220a      	movs	r2, #10
 8003ada:	701a      	strb	r2, [r3, #0]
 8003adc:	e7ee      	b.n	8003abc <_puts_r+0x88>
	...

08003ae0 <puts>:
 8003ae0:	4b02      	ldr	r3, [pc, #8]	@ (8003aec <puts+0xc>)
 8003ae2:	4601      	mov	r1, r0
 8003ae4:	6818      	ldr	r0, [r3, #0]
 8003ae6:	f7ff bfa5 	b.w	8003a34 <_puts_r>
 8003aea:	bf00      	nop
 8003aec:	20000018 	.word	0x20000018

08003af0 <__sread>:
 8003af0:	b510      	push	{r4, lr}
 8003af2:	460c      	mov	r4, r1
 8003af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003af8:	f000 f8fc 	bl	8003cf4 <_read_r>
 8003afc:	2800      	cmp	r0, #0
 8003afe:	bfab      	itete	ge
 8003b00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003b02:	89a3      	ldrhlt	r3, [r4, #12]
 8003b04:	181b      	addge	r3, r3, r0
 8003b06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003b0a:	bfac      	ite	ge
 8003b0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003b0e:	81a3      	strhlt	r3, [r4, #12]
 8003b10:	bd10      	pop	{r4, pc}

08003b12 <__swrite>:
 8003b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b16:	461f      	mov	r7, r3
 8003b18:	898b      	ldrh	r3, [r1, #12]
 8003b1a:	05db      	lsls	r3, r3, #23
 8003b1c:	4605      	mov	r5, r0
 8003b1e:	460c      	mov	r4, r1
 8003b20:	4616      	mov	r6, r2
 8003b22:	d505      	bpl.n	8003b30 <__swrite+0x1e>
 8003b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b28:	2302      	movs	r3, #2
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f000 f8d0 	bl	8003cd0 <_lseek_r>
 8003b30:	89a3      	ldrh	r3, [r4, #12]
 8003b32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b3a:	81a3      	strh	r3, [r4, #12]
 8003b3c:	4632      	mov	r2, r6
 8003b3e:	463b      	mov	r3, r7
 8003b40:	4628      	mov	r0, r5
 8003b42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b46:	f000 b8e7 	b.w	8003d18 <_write_r>

08003b4a <__sseek>:
 8003b4a:	b510      	push	{r4, lr}
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b52:	f000 f8bd 	bl	8003cd0 <_lseek_r>
 8003b56:	1c43      	adds	r3, r0, #1
 8003b58:	89a3      	ldrh	r3, [r4, #12]
 8003b5a:	bf15      	itete	ne
 8003b5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003b5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003b62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003b66:	81a3      	strheq	r3, [r4, #12]
 8003b68:	bf18      	it	ne
 8003b6a:	81a3      	strhne	r3, [r4, #12]
 8003b6c:	bd10      	pop	{r4, pc}

08003b6e <__sclose>:
 8003b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b72:	f000 b89d 	b.w	8003cb0 <_close_r>

08003b76 <__swbuf_r>:
 8003b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b78:	460e      	mov	r6, r1
 8003b7a:	4614      	mov	r4, r2
 8003b7c:	4605      	mov	r5, r0
 8003b7e:	b118      	cbz	r0, 8003b88 <__swbuf_r+0x12>
 8003b80:	6a03      	ldr	r3, [r0, #32]
 8003b82:	b90b      	cbnz	r3, 8003b88 <__swbuf_r+0x12>
 8003b84:	f7ff ff06 	bl	8003994 <__sinit>
 8003b88:	69a3      	ldr	r3, [r4, #24]
 8003b8a:	60a3      	str	r3, [r4, #8]
 8003b8c:	89a3      	ldrh	r3, [r4, #12]
 8003b8e:	071a      	lsls	r2, r3, #28
 8003b90:	d501      	bpl.n	8003b96 <__swbuf_r+0x20>
 8003b92:	6923      	ldr	r3, [r4, #16]
 8003b94:	b943      	cbnz	r3, 8003ba8 <__swbuf_r+0x32>
 8003b96:	4621      	mov	r1, r4
 8003b98:	4628      	mov	r0, r5
 8003b9a:	f000 f82b 	bl	8003bf4 <__swsetup_r>
 8003b9e:	b118      	cbz	r0, 8003ba8 <__swbuf_r+0x32>
 8003ba0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003ba4:	4638      	mov	r0, r7
 8003ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ba8:	6823      	ldr	r3, [r4, #0]
 8003baa:	6922      	ldr	r2, [r4, #16]
 8003bac:	1a98      	subs	r0, r3, r2
 8003bae:	6963      	ldr	r3, [r4, #20]
 8003bb0:	b2f6      	uxtb	r6, r6
 8003bb2:	4283      	cmp	r3, r0
 8003bb4:	4637      	mov	r7, r6
 8003bb6:	dc05      	bgt.n	8003bc4 <__swbuf_r+0x4e>
 8003bb8:	4621      	mov	r1, r4
 8003bba:	4628      	mov	r0, r5
 8003bbc:	f000 fd36 	bl	800462c <_fflush_r>
 8003bc0:	2800      	cmp	r0, #0
 8003bc2:	d1ed      	bne.n	8003ba0 <__swbuf_r+0x2a>
 8003bc4:	68a3      	ldr	r3, [r4, #8]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	60a3      	str	r3, [r4, #8]
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	6022      	str	r2, [r4, #0]
 8003bd0:	701e      	strb	r6, [r3, #0]
 8003bd2:	6962      	ldr	r2, [r4, #20]
 8003bd4:	1c43      	adds	r3, r0, #1
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d004      	beq.n	8003be4 <__swbuf_r+0x6e>
 8003bda:	89a3      	ldrh	r3, [r4, #12]
 8003bdc:	07db      	lsls	r3, r3, #31
 8003bde:	d5e1      	bpl.n	8003ba4 <__swbuf_r+0x2e>
 8003be0:	2e0a      	cmp	r6, #10
 8003be2:	d1df      	bne.n	8003ba4 <__swbuf_r+0x2e>
 8003be4:	4621      	mov	r1, r4
 8003be6:	4628      	mov	r0, r5
 8003be8:	f000 fd20 	bl	800462c <_fflush_r>
 8003bec:	2800      	cmp	r0, #0
 8003bee:	d0d9      	beq.n	8003ba4 <__swbuf_r+0x2e>
 8003bf0:	e7d6      	b.n	8003ba0 <__swbuf_r+0x2a>
	...

08003bf4 <__swsetup_r>:
 8003bf4:	b538      	push	{r3, r4, r5, lr}
 8003bf6:	4b29      	ldr	r3, [pc, #164]	@ (8003c9c <__swsetup_r+0xa8>)
 8003bf8:	4605      	mov	r5, r0
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	460c      	mov	r4, r1
 8003bfe:	b118      	cbz	r0, 8003c08 <__swsetup_r+0x14>
 8003c00:	6a03      	ldr	r3, [r0, #32]
 8003c02:	b90b      	cbnz	r3, 8003c08 <__swsetup_r+0x14>
 8003c04:	f7ff fec6 	bl	8003994 <__sinit>
 8003c08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c0c:	0719      	lsls	r1, r3, #28
 8003c0e:	d422      	bmi.n	8003c56 <__swsetup_r+0x62>
 8003c10:	06da      	lsls	r2, r3, #27
 8003c12:	d407      	bmi.n	8003c24 <__swsetup_r+0x30>
 8003c14:	2209      	movs	r2, #9
 8003c16:	602a      	str	r2, [r5, #0]
 8003c18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c1c:	81a3      	strh	r3, [r4, #12]
 8003c1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c22:	e033      	b.n	8003c8c <__swsetup_r+0x98>
 8003c24:	0758      	lsls	r0, r3, #29
 8003c26:	d512      	bpl.n	8003c4e <__swsetup_r+0x5a>
 8003c28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c2a:	b141      	cbz	r1, 8003c3e <__swsetup_r+0x4a>
 8003c2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c30:	4299      	cmp	r1, r3
 8003c32:	d002      	beq.n	8003c3a <__swsetup_r+0x46>
 8003c34:	4628      	mov	r0, r5
 8003c36:	f000 f8af 	bl	8003d98 <_free_r>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c3e:	89a3      	ldrh	r3, [r4, #12]
 8003c40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003c44:	81a3      	strh	r3, [r4, #12]
 8003c46:	2300      	movs	r3, #0
 8003c48:	6063      	str	r3, [r4, #4]
 8003c4a:	6923      	ldr	r3, [r4, #16]
 8003c4c:	6023      	str	r3, [r4, #0]
 8003c4e:	89a3      	ldrh	r3, [r4, #12]
 8003c50:	f043 0308 	orr.w	r3, r3, #8
 8003c54:	81a3      	strh	r3, [r4, #12]
 8003c56:	6923      	ldr	r3, [r4, #16]
 8003c58:	b94b      	cbnz	r3, 8003c6e <__swsetup_r+0x7a>
 8003c5a:	89a3      	ldrh	r3, [r4, #12]
 8003c5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003c60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c64:	d003      	beq.n	8003c6e <__swsetup_r+0x7a>
 8003c66:	4621      	mov	r1, r4
 8003c68:	4628      	mov	r0, r5
 8003c6a:	f000 fd2d 	bl	80046c8 <__smakebuf_r>
 8003c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c72:	f013 0201 	ands.w	r2, r3, #1
 8003c76:	d00a      	beq.n	8003c8e <__swsetup_r+0x9a>
 8003c78:	2200      	movs	r2, #0
 8003c7a:	60a2      	str	r2, [r4, #8]
 8003c7c:	6962      	ldr	r2, [r4, #20]
 8003c7e:	4252      	negs	r2, r2
 8003c80:	61a2      	str	r2, [r4, #24]
 8003c82:	6922      	ldr	r2, [r4, #16]
 8003c84:	b942      	cbnz	r2, 8003c98 <__swsetup_r+0xa4>
 8003c86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003c8a:	d1c5      	bne.n	8003c18 <__swsetup_r+0x24>
 8003c8c:	bd38      	pop	{r3, r4, r5, pc}
 8003c8e:	0799      	lsls	r1, r3, #30
 8003c90:	bf58      	it	pl
 8003c92:	6962      	ldrpl	r2, [r4, #20]
 8003c94:	60a2      	str	r2, [r4, #8]
 8003c96:	e7f4      	b.n	8003c82 <__swsetup_r+0x8e>
 8003c98:	2000      	movs	r0, #0
 8003c9a:	e7f7      	b.n	8003c8c <__swsetup_r+0x98>
 8003c9c:	20000018 	.word	0x20000018

08003ca0 <memset>:
 8003ca0:	4402      	add	r2, r0
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d100      	bne.n	8003caa <memset+0xa>
 8003ca8:	4770      	bx	lr
 8003caa:	f803 1b01 	strb.w	r1, [r3], #1
 8003cae:	e7f9      	b.n	8003ca4 <memset+0x4>

08003cb0 <_close_r>:
 8003cb0:	b538      	push	{r3, r4, r5, lr}
 8003cb2:	4d06      	ldr	r5, [pc, #24]	@ (8003ccc <_close_r+0x1c>)
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	4604      	mov	r4, r0
 8003cb8:	4608      	mov	r0, r1
 8003cba:	602b      	str	r3, [r5, #0]
 8003cbc:	f7fc fd8e 	bl	80007dc <_close>
 8003cc0:	1c43      	adds	r3, r0, #1
 8003cc2:	d102      	bne.n	8003cca <_close_r+0x1a>
 8003cc4:	682b      	ldr	r3, [r5, #0]
 8003cc6:	b103      	cbz	r3, 8003cca <_close_r+0x1a>
 8003cc8:	6023      	str	r3, [r4, #0]
 8003cca:	bd38      	pop	{r3, r4, r5, pc}
 8003ccc:	200002a8 	.word	0x200002a8

08003cd0 <_lseek_r>:
 8003cd0:	b538      	push	{r3, r4, r5, lr}
 8003cd2:	4d07      	ldr	r5, [pc, #28]	@ (8003cf0 <_lseek_r+0x20>)
 8003cd4:	4604      	mov	r4, r0
 8003cd6:	4608      	mov	r0, r1
 8003cd8:	4611      	mov	r1, r2
 8003cda:	2200      	movs	r2, #0
 8003cdc:	602a      	str	r2, [r5, #0]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	f7fc fda3 	bl	800082a <_lseek>
 8003ce4:	1c43      	adds	r3, r0, #1
 8003ce6:	d102      	bne.n	8003cee <_lseek_r+0x1e>
 8003ce8:	682b      	ldr	r3, [r5, #0]
 8003cea:	b103      	cbz	r3, 8003cee <_lseek_r+0x1e>
 8003cec:	6023      	str	r3, [r4, #0]
 8003cee:	bd38      	pop	{r3, r4, r5, pc}
 8003cf0:	200002a8 	.word	0x200002a8

08003cf4 <_read_r>:
 8003cf4:	b538      	push	{r3, r4, r5, lr}
 8003cf6:	4d07      	ldr	r5, [pc, #28]	@ (8003d14 <_read_r+0x20>)
 8003cf8:	4604      	mov	r4, r0
 8003cfa:	4608      	mov	r0, r1
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	2200      	movs	r2, #0
 8003d00:	602a      	str	r2, [r5, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	f7fc fd4d 	bl	80007a2 <_read>
 8003d08:	1c43      	adds	r3, r0, #1
 8003d0a:	d102      	bne.n	8003d12 <_read_r+0x1e>
 8003d0c:	682b      	ldr	r3, [r5, #0]
 8003d0e:	b103      	cbz	r3, 8003d12 <_read_r+0x1e>
 8003d10:	6023      	str	r3, [r4, #0]
 8003d12:	bd38      	pop	{r3, r4, r5, pc}
 8003d14:	200002a8 	.word	0x200002a8

08003d18 <_write_r>:
 8003d18:	b538      	push	{r3, r4, r5, lr}
 8003d1a:	4d07      	ldr	r5, [pc, #28]	@ (8003d38 <_write_r+0x20>)
 8003d1c:	4604      	mov	r4, r0
 8003d1e:	4608      	mov	r0, r1
 8003d20:	4611      	mov	r1, r2
 8003d22:	2200      	movs	r2, #0
 8003d24:	602a      	str	r2, [r5, #0]
 8003d26:	461a      	mov	r2, r3
 8003d28:	f7fc fbbb 	bl	80004a2 <_write>
 8003d2c:	1c43      	adds	r3, r0, #1
 8003d2e:	d102      	bne.n	8003d36 <_write_r+0x1e>
 8003d30:	682b      	ldr	r3, [r5, #0]
 8003d32:	b103      	cbz	r3, 8003d36 <_write_r+0x1e>
 8003d34:	6023      	str	r3, [r4, #0]
 8003d36:	bd38      	pop	{r3, r4, r5, pc}
 8003d38:	200002a8 	.word	0x200002a8

08003d3c <__errno>:
 8003d3c:	4b01      	ldr	r3, [pc, #4]	@ (8003d44 <__errno+0x8>)
 8003d3e:	6818      	ldr	r0, [r3, #0]
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	20000018 	.word	0x20000018

08003d48 <__libc_init_array>:
 8003d48:	b570      	push	{r4, r5, r6, lr}
 8003d4a:	4d0d      	ldr	r5, [pc, #52]	@ (8003d80 <__libc_init_array+0x38>)
 8003d4c:	4c0d      	ldr	r4, [pc, #52]	@ (8003d84 <__libc_init_array+0x3c>)
 8003d4e:	1b64      	subs	r4, r4, r5
 8003d50:	10a4      	asrs	r4, r4, #2
 8003d52:	2600      	movs	r6, #0
 8003d54:	42a6      	cmp	r6, r4
 8003d56:	d109      	bne.n	8003d6c <__libc_init_array+0x24>
 8003d58:	4d0b      	ldr	r5, [pc, #44]	@ (8003d88 <__libc_init_array+0x40>)
 8003d5a:	4c0c      	ldr	r4, [pc, #48]	@ (8003d8c <__libc_init_array+0x44>)
 8003d5c:	f000 fd56 	bl	800480c <_init>
 8003d60:	1b64      	subs	r4, r4, r5
 8003d62:	10a4      	asrs	r4, r4, #2
 8003d64:	2600      	movs	r6, #0
 8003d66:	42a6      	cmp	r6, r4
 8003d68:	d105      	bne.n	8003d76 <__libc_init_array+0x2e>
 8003d6a:	bd70      	pop	{r4, r5, r6, pc}
 8003d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d70:	4798      	blx	r3
 8003d72:	3601      	adds	r6, #1
 8003d74:	e7ee      	b.n	8003d54 <__libc_init_array+0xc>
 8003d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d7a:	4798      	blx	r3
 8003d7c:	3601      	adds	r6, #1
 8003d7e:	e7f2      	b.n	8003d66 <__libc_init_array+0x1e>
 8003d80:	08004944 	.word	0x08004944
 8003d84:	08004944 	.word	0x08004944
 8003d88:	08004944 	.word	0x08004944
 8003d8c:	08004948 	.word	0x08004948

08003d90 <__retarget_lock_init_recursive>:
 8003d90:	4770      	bx	lr

08003d92 <__retarget_lock_acquire_recursive>:
 8003d92:	4770      	bx	lr

08003d94 <__retarget_lock_release_recursive>:
 8003d94:	4770      	bx	lr
	...

08003d98 <_free_r>:
 8003d98:	b538      	push	{r3, r4, r5, lr}
 8003d9a:	4605      	mov	r5, r0
 8003d9c:	2900      	cmp	r1, #0
 8003d9e:	d041      	beq.n	8003e24 <_free_r+0x8c>
 8003da0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003da4:	1f0c      	subs	r4, r1, #4
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	bfb8      	it	lt
 8003daa:	18e4      	addlt	r4, r4, r3
 8003dac:	f000 f8e0 	bl	8003f70 <__malloc_lock>
 8003db0:	4a1d      	ldr	r2, [pc, #116]	@ (8003e28 <_free_r+0x90>)
 8003db2:	6813      	ldr	r3, [r2, #0]
 8003db4:	b933      	cbnz	r3, 8003dc4 <_free_r+0x2c>
 8003db6:	6063      	str	r3, [r4, #4]
 8003db8:	6014      	str	r4, [r2, #0]
 8003dba:	4628      	mov	r0, r5
 8003dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dc0:	f000 b8dc 	b.w	8003f7c <__malloc_unlock>
 8003dc4:	42a3      	cmp	r3, r4
 8003dc6:	d908      	bls.n	8003dda <_free_r+0x42>
 8003dc8:	6820      	ldr	r0, [r4, #0]
 8003dca:	1821      	adds	r1, r4, r0
 8003dcc:	428b      	cmp	r3, r1
 8003dce:	bf01      	itttt	eq
 8003dd0:	6819      	ldreq	r1, [r3, #0]
 8003dd2:	685b      	ldreq	r3, [r3, #4]
 8003dd4:	1809      	addeq	r1, r1, r0
 8003dd6:	6021      	streq	r1, [r4, #0]
 8003dd8:	e7ed      	b.n	8003db6 <_free_r+0x1e>
 8003dda:	461a      	mov	r2, r3
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	b10b      	cbz	r3, 8003de4 <_free_r+0x4c>
 8003de0:	42a3      	cmp	r3, r4
 8003de2:	d9fa      	bls.n	8003dda <_free_r+0x42>
 8003de4:	6811      	ldr	r1, [r2, #0]
 8003de6:	1850      	adds	r0, r2, r1
 8003de8:	42a0      	cmp	r0, r4
 8003dea:	d10b      	bne.n	8003e04 <_free_r+0x6c>
 8003dec:	6820      	ldr	r0, [r4, #0]
 8003dee:	4401      	add	r1, r0
 8003df0:	1850      	adds	r0, r2, r1
 8003df2:	4283      	cmp	r3, r0
 8003df4:	6011      	str	r1, [r2, #0]
 8003df6:	d1e0      	bne.n	8003dba <_free_r+0x22>
 8003df8:	6818      	ldr	r0, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	6053      	str	r3, [r2, #4]
 8003dfe:	4408      	add	r0, r1
 8003e00:	6010      	str	r0, [r2, #0]
 8003e02:	e7da      	b.n	8003dba <_free_r+0x22>
 8003e04:	d902      	bls.n	8003e0c <_free_r+0x74>
 8003e06:	230c      	movs	r3, #12
 8003e08:	602b      	str	r3, [r5, #0]
 8003e0a:	e7d6      	b.n	8003dba <_free_r+0x22>
 8003e0c:	6820      	ldr	r0, [r4, #0]
 8003e0e:	1821      	adds	r1, r4, r0
 8003e10:	428b      	cmp	r3, r1
 8003e12:	bf04      	itt	eq
 8003e14:	6819      	ldreq	r1, [r3, #0]
 8003e16:	685b      	ldreq	r3, [r3, #4]
 8003e18:	6063      	str	r3, [r4, #4]
 8003e1a:	bf04      	itt	eq
 8003e1c:	1809      	addeq	r1, r1, r0
 8003e1e:	6021      	streq	r1, [r4, #0]
 8003e20:	6054      	str	r4, [r2, #4]
 8003e22:	e7ca      	b.n	8003dba <_free_r+0x22>
 8003e24:	bd38      	pop	{r3, r4, r5, pc}
 8003e26:	bf00      	nop
 8003e28:	200002b4 	.word	0x200002b4

08003e2c <sbrk_aligned>:
 8003e2c:	b570      	push	{r4, r5, r6, lr}
 8003e2e:	4e0f      	ldr	r6, [pc, #60]	@ (8003e6c <sbrk_aligned+0x40>)
 8003e30:	460c      	mov	r4, r1
 8003e32:	6831      	ldr	r1, [r6, #0]
 8003e34:	4605      	mov	r5, r0
 8003e36:	b911      	cbnz	r1, 8003e3e <sbrk_aligned+0x12>
 8003e38:	f000 fcd8 	bl	80047ec <_sbrk_r>
 8003e3c:	6030      	str	r0, [r6, #0]
 8003e3e:	4621      	mov	r1, r4
 8003e40:	4628      	mov	r0, r5
 8003e42:	f000 fcd3 	bl	80047ec <_sbrk_r>
 8003e46:	1c43      	adds	r3, r0, #1
 8003e48:	d103      	bne.n	8003e52 <sbrk_aligned+0x26>
 8003e4a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003e4e:	4620      	mov	r0, r4
 8003e50:	bd70      	pop	{r4, r5, r6, pc}
 8003e52:	1cc4      	adds	r4, r0, #3
 8003e54:	f024 0403 	bic.w	r4, r4, #3
 8003e58:	42a0      	cmp	r0, r4
 8003e5a:	d0f8      	beq.n	8003e4e <sbrk_aligned+0x22>
 8003e5c:	1a21      	subs	r1, r4, r0
 8003e5e:	4628      	mov	r0, r5
 8003e60:	f000 fcc4 	bl	80047ec <_sbrk_r>
 8003e64:	3001      	adds	r0, #1
 8003e66:	d1f2      	bne.n	8003e4e <sbrk_aligned+0x22>
 8003e68:	e7ef      	b.n	8003e4a <sbrk_aligned+0x1e>
 8003e6a:	bf00      	nop
 8003e6c:	200002b0 	.word	0x200002b0

08003e70 <_malloc_r>:
 8003e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e74:	1ccd      	adds	r5, r1, #3
 8003e76:	f025 0503 	bic.w	r5, r5, #3
 8003e7a:	3508      	adds	r5, #8
 8003e7c:	2d0c      	cmp	r5, #12
 8003e7e:	bf38      	it	cc
 8003e80:	250c      	movcc	r5, #12
 8003e82:	2d00      	cmp	r5, #0
 8003e84:	4606      	mov	r6, r0
 8003e86:	db01      	blt.n	8003e8c <_malloc_r+0x1c>
 8003e88:	42a9      	cmp	r1, r5
 8003e8a:	d904      	bls.n	8003e96 <_malloc_r+0x26>
 8003e8c:	230c      	movs	r3, #12
 8003e8e:	6033      	str	r3, [r6, #0]
 8003e90:	2000      	movs	r0, #0
 8003e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f6c <_malloc_r+0xfc>
 8003e9a:	f000 f869 	bl	8003f70 <__malloc_lock>
 8003e9e:	f8d8 3000 	ldr.w	r3, [r8]
 8003ea2:	461c      	mov	r4, r3
 8003ea4:	bb44      	cbnz	r4, 8003ef8 <_malloc_r+0x88>
 8003ea6:	4629      	mov	r1, r5
 8003ea8:	4630      	mov	r0, r6
 8003eaa:	f7ff ffbf 	bl	8003e2c <sbrk_aligned>
 8003eae:	1c43      	adds	r3, r0, #1
 8003eb0:	4604      	mov	r4, r0
 8003eb2:	d158      	bne.n	8003f66 <_malloc_r+0xf6>
 8003eb4:	f8d8 4000 	ldr.w	r4, [r8]
 8003eb8:	4627      	mov	r7, r4
 8003eba:	2f00      	cmp	r7, #0
 8003ebc:	d143      	bne.n	8003f46 <_malloc_r+0xd6>
 8003ebe:	2c00      	cmp	r4, #0
 8003ec0:	d04b      	beq.n	8003f5a <_malloc_r+0xea>
 8003ec2:	6823      	ldr	r3, [r4, #0]
 8003ec4:	4639      	mov	r1, r7
 8003ec6:	4630      	mov	r0, r6
 8003ec8:	eb04 0903 	add.w	r9, r4, r3
 8003ecc:	f000 fc8e 	bl	80047ec <_sbrk_r>
 8003ed0:	4581      	cmp	r9, r0
 8003ed2:	d142      	bne.n	8003f5a <_malloc_r+0xea>
 8003ed4:	6821      	ldr	r1, [r4, #0]
 8003ed6:	1a6d      	subs	r5, r5, r1
 8003ed8:	4629      	mov	r1, r5
 8003eda:	4630      	mov	r0, r6
 8003edc:	f7ff ffa6 	bl	8003e2c <sbrk_aligned>
 8003ee0:	3001      	adds	r0, #1
 8003ee2:	d03a      	beq.n	8003f5a <_malloc_r+0xea>
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	442b      	add	r3, r5
 8003ee8:	6023      	str	r3, [r4, #0]
 8003eea:	f8d8 3000 	ldr.w	r3, [r8]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	bb62      	cbnz	r2, 8003f4c <_malloc_r+0xdc>
 8003ef2:	f8c8 7000 	str.w	r7, [r8]
 8003ef6:	e00f      	b.n	8003f18 <_malloc_r+0xa8>
 8003ef8:	6822      	ldr	r2, [r4, #0]
 8003efa:	1b52      	subs	r2, r2, r5
 8003efc:	d420      	bmi.n	8003f40 <_malloc_r+0xd0>
 8003efe:	2a0b      	cmp	r2, #11
 8003f00:	d917      	bls.n	8003f32 <_malloc_r+0xc2>
 8003f02:	1961      	adds	r1, r4, r5
 8003f04:	42a3      	cmp	r3, r4
 8003f06:	6025      	str	r5, [r4, #0]
 8003f08:	bf18      	it	ne
 8003f0a:	6059      	strne	r1, [r3, #4]
 8003f0c:	6863      	ldr	r3, [r4, #4]
 8003f0e:	bf08      	it	eq
 8003f10:	f8c8 1000 	streq.w	r1, [r8]
 8003f14:	5162      	str	r2, [r4, r5]
 8003f16:	604b      	str	r3, [r1, #4]
 8003f18:	4630      	mov	r0, r6
 8003f1a:	f000 f82f 	bl	8003f7c <__malloc_unlock>
 8003f1e:	f104 000b 	add.w	r0, r4, #11
 8003f22:	1d23      	adds	r3, r4, #4
 8003f24:	f020 0007 	bic.w	r0, r0, #7
 8003f28:	1ac2      	subs	r2, r0, r3
 8003f2a:	bf1c      	itt	ne
 8003f2c:	1a1b      	subne	r3, r3, r0
 8003f2e:	50a3      	strne	r3, [r4, r2]
 8003f30:	e7af      	b.n	8003e92 <_malloc_r+0x22>
 8003f32:	6862      	ldr	r2, [r4, #4]
 8003f34:	42a3      	cmp	r3, r4
 8003f36:	bf0c      	ite	eq
 8003f38:	f8c8 2000 	streq.w	r2, [r8]
 8003f3c:	605a      	strne	r2, [r3, #4]
 8003f3e:	e7eb      	b.n	8003f18 <_malloc_r+0xa8>
 8003f40:	4623      	mov	r3, r4
 8003f42:	6864      	ldr	r4, [r4, #4]
 8003f44:	e7ae      	b.n	8003ea4 <_malloc_r+0x34>
 8003f46:	463c      	mov	r4, r7
 8003f48:	687f      	ldr	r7, [r7, #4]
 8003f4a:	e7b6      	b.n	8003eba <_malloc_r+0x4a>
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	42a3      	cmp	r3, r4
 8003f52:	d1fb      	bne.n	8003f4c <_malloc_r+0xdc>
 8003f54:	2300      	movs	r3, #0
 8003f56:	6053      	str	r3, [r2, #4]
 8003f58:	e7de      	b.n	8003f18 <_malloc_r+0xa8>
 8003f5a:	230c      	movs	r3, #12
 8003f5c:	6033      	str	r3, [r6, #0]
 8003f5e:	4630      	mov	r0, r6
 8003f60:	f000 f80c 	bl	8003f7c <__malloc_unlock>
 8003f64:	e794      	b.n	8003e90 <_malloc_r+0x20>
 8003f66:	6005      	str	r5, [r0, #0]
 8003f68:	e7d6      	b.n	8003f18 <_malloc_r+0xa8>
 8003f6a:	bf00      	nop
 8003f6c:	200002b4 	.word	0x200002b4

08003f70 <__malloc_lock>:
 8003f70:	4801      	ldr	r0, [pc, #4]	@ (8003f78 <__malloc_lock+0x8>)
 8003f72:	f7ff bf0e 	b.w	8003d92 <__retarget_lock_acquire_recursive>
 8003f76:	bf00      	nop
 8003f78:	200002ac 	.word	0x200002ac

08003f7c <__malloc_unlock>:
 8003f7c:	4801      	ldr	r0, [pc, #4]	@ (8003f84 <__malloc_unlock+0x8>)
 8003f7e:	f7ff bf09 	b.w	8003d94 <__retarget_lock_release_recursive>
 8003f82:	bf00      	nop
 8003f84:	200002ac 	.word	0x200002ac

08003f88 <__sfputc_r>:
 8003f88:	6893      	ldr	r3, [r2, #8]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	b410      	push	{r4}
 8003f90:	6093      	str	r3, [r2, #8]
 8003f92:	da08      	bge.n	8003fa6 <__sfputc_r+0x1e>
 8003f94:	6994      	ldr	r4, [r2, #24]
 8003f96:	42a3      	cmp	r3, r4
 8003f98:	db01      	blt.n	8003f9e <__sfputc_r+0x16>
 8003f9a:	290a      	cmp	r1, #10
 8003f9c:	d103      	bne.n	8003fa6 <__sfputc_r+0x1e>
 8003f9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fa2:	f7ff bde8 	b.w	8003b76 <__swbuf_r>
 8003fa6:	6813      	ldr	r3, [r2, #0]
 8003fa8:	1c58      	adds	r0, r3, #1
 8003faa:	6010      	str	r0, [r2, #0]
 8003fac:	7019      	strb	r1, [r3, #0]
 8003fae:	4608      	mov	r0, r1
 8003fb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <__sfputs_r>:
 8003fb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb8:	4606      	mov	r6, r0
 8003fba:	460f      	mov	r7, r1
 8003fbc:	4614      	mov	r4, r2
 8003fbe:	18d5      	adds	r5, r2, r3
 8003fc0:	42ac      	cmp	r4, r5
 8003fc2:	d101      	bne.n	8003fc8 <__sfputs_r+0x12>
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	e007      	b.n	8003fd8 <__sfputs_r+0x22>
 8003fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fcc:	463a      	mov	r2, r7
 8003fce:	4630      	mov	r0, r6
 8003fd0:	f7ff ffda 	bl	8003f88 <__sfputc_r>
 8003fd4:	1c43      	adds	r3, r0, #1
 8003fd6:	d1f3      	bne.n	8003fc0 <__sfputs_r+0xa>
 8003fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003fdc <_vfiprintf_r>:
 8003fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fe0:	460d      	mov	r5, r1
 8003fe2:	b09d      	sub	sp, #116	@ 0x74
 8003fe4:	4614      	mov	r4, r2
 8003fe6:	4698      	mov	r8, r3
 8003fe8:	4606      	mov	r6, r0
 8003fea:	b118      	cbz	r0, 8003ff4 <_vfiprintf_r+0x18>
 8003fec:	6a03      	ldr	r3, [r0, #32]
 8003fee:	b90b      	cbnz	r3, 8003ff4 <_vfiprintf_r+0x18>
 8003ff0:	f7ff fcd0 	bl	8003994 <__sinit>
 8003ff4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ff6:	07d9      	lsls	r1, r3, #31
 8003ff8:	d405      	bmi.n	8004006 <_vfiprintf_r+0x2a>
 8003ffa:	89ab      	ldrh	r3, [r5, #12]
 8003ffc:	059a      	lsls	r2, r3, #22
 8003ffe:	d402      	bmi.n	8004006 <_vfiprintf_r+0x2a>
 8004000:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004002:	f7ff fec6 	bl	8003d92 <__retarget_lock_acquire_recursive>
 8004006:	89ab      	ldrh	r3, [r5, #12]
 8004008:	071b      	lsls	r3, r3, #28
 800400a:	d501      	bpl.n	8004010 <_vfiprintf_r+0x34>
 800400c:	692b      	ldr	r3, [r5, #16]
 800400e:	b99b      	cbnz	r3, 8004038 <_vfiprintf_r+0x5c>
 8004010:	4629      	mov	r1, r5
 8004012:	4630      	mov	r0, r6
 8004014:	f7ff fdee 	bl	8003bf4 <__swsetup_r>
 8004018:	b170      	cbz	r0, 8004038 <_vfiprintf_r+0x5c>
 800401a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800401c:	07dc      	lsls	r4, r3, #31
 800401e:	d504      	bpl.n	800402a <_vfiprintf_r+0x4e>
 8004020:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004024:	b01d      	add	sp, #116	@ 0x74
 8004026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800402a:	89ab      	ldrh	r3, [r5, #12]
 800402c:	0598      	lsls	r0, r3, #22
 800402e:	d4f7      	bmi.n	8004020 <_vfiprintf_r+0x44>
 8004030:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004032:	f7ff feaf 	bl	8003d94 <__retarget_lock_release_recursive>
 8004036:	e7f3      	b.n	8004020 <_vfiprintf_r+0x44>
 8004038:	2300      	movs	r3, #0
 800403a:	9309      	str	r3, [sp, #36]	@ 0x24
 800403c:	2320      	movs	r3, #32
 800403e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004042:	f8cd 800c 	str.w	r8, [sp, #12]
 8004046:	2330      	movs	r3, #48	@ 0x30
 8004048:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80041f8 <_vfiprintf_r+0x21c>
 800404c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004050:	f04f 0901 	mov.w	r9, #1
 8004054:	4623      	mov	r3, r4
 8004056:	469a      	mov	sl, r3
 8004058:	f813 2b01 	ldrb.w	r2, [r3], #1
 800405c:	b10a      	cbz	r2, 8004062 <_vfiprintf_r+0x86>
 800405e:	2a25      	cmp	r2, #37	@ 0x25
 8004060:	d1f9      	bne.n	8004056 <_vfiprintf_r+0x7a>
 8004062:	ebba 0b04 	subs.w	fp, sl, r4
 8004066:	d00b      	beq.n	8004080 <_vfiprintf_r+0xa4>
 8004068:	465b      	mov	r3, fp
 800406a:	4622      	mov	r2, r4
 800406c:	4629      	mov	r1, r5
 800406e:	4630      	mov	r0, r6
 8004070:	f7ff ffa1 	bl	8003fb6 <__sfputs_r>
 8004074:	3001      	adds	r0, #1
 8004076:	f000 80a7 	beq.w	80041c8 <_vfiprintf_r+0x1ec>
 800407a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800407c:	445a      	add	r2, fp
 800407e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004080:	f89a 3000 	ldrb.w	r3, [sl]
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 809f 	beq.w	80041c8 <_vfiprintf_r+0x1ec>
 800408a:	2300      	movs	r3, #0
 800408c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004090:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004094:	f10a 0a01 	add.w	sl, sl, #1
 8004098:	9304      	str	r3, [sp, #16]
 800409a:	9307      	str	r3, [sp, #28]
 800409c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80040a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80040a2:	4654      	mov	r4, sl
 80040a4:	2205      	movs	r2, #5
 80040a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040aa:	4853      	ldr	r0, [pc, #332]	@ (80041f8 <_vfiprintf_r+0x21c>)
 80040ac:	f7fc f898 	bl	80001e0 <memchr>
 80040b0:	9a04      	ldr	r2, [sp, #16]
 80040b2:	b9d8      	cbnz	r0, 80040ec <_vfiprintf_r+0x110>
 80040b4:	06d1      	lsls	r1, r2, #27
 80040b6:	bf44      	itt	mi
 80040b8:	2320      	movmi	r3, #32
 80040ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040be:	0713      	lsls	r3, r2, #28
 80040c0:	bf44      	itt	mi
 80040c2:	232b      	movmi	r3, #43	@ 0x2b
 80040c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040c8:	f89a 3000 	ldrb.w	r3, [sl]
 80040cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80040ce:	d015      	beq.n	80040fc <_vfiprintf_r+0x120>
 80040d0:	9a07      	ldr	r2, [sp, #28]
 80040d2:	4654      	mov	r4, sl
 80040d4:	2000      	movs	r0, #0
 80040d6:	f04f 0c0a 	mov.w	ip, #10
 80040da:	4621      	mov	r1, r4
 80040dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040e0:	3b30      	subs	r3, #48	@ 0x30
 80040e2:	2b09      	cmp	r3, #9
 80040e4:	d94b      	bls.n	800417e <_vfiprintf_r+0x1a2>
 80040e6:	b1b0      	cbz	r0, 8004116 <_vfiprintf_r+0x13a>
 80040e8:	9207      	str	r2, [sp, #28]
 80040ea:	e014      	b.n	8004116 <_vfiprintf_r+0x13a>
 80040ec:	eba0 0308 	sub.w	r3, r0, r8
 80040f0:	fa09 f303 	lsl.w	r3, r9, r3
 80040f4:	4313      	orrs	r3, r2
 80040f6:	9304      	str	r3, [sp, #16]
 80040f8:	46a2      	mov	sl, r4
 80040fa:	e7d2      	b.n	80040a2 <_vfiprintf_r+0xc6>
 80040fc:	9b03      	ldr	r3, [sp, #12]
 80040fe:	1d19      	adds	r1, r3, #4
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	9103      	str	r1, [sp, #12]
 8004104:	2b00      	cmp	r3, #0
 8004106:	bfbb      	ittet	lt
 8004108:	425b      	neglt	r3, r3
 800410a:	f042 0202 	orrlt.w	r2, r2, #2
 800410e:	9307      	strge	r3, [sp, #28]
 8004110:	9307      	strlt	r3, [sp, #28]
 8004112:	bfb8      	it	lt
 8004114:	9204      	strlt	r2, [sp, #16]
 8004116:	7823      	ldrb	r3, [r4, #0]
 8004118:	2b2e      	cmp	r3, #46	@ 0x2e
 800411a:	d10a      	bne.n	8004132 <_vfiprintf_r+0x156>
 800411c:	7863      	ldrb	r3, [r4, #1]
 800411e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004120:	d132      	bne.n	8004188 <_vfiprintf_r+0x1ac>
 8004122:	9b03      	ldr	r3, [sp, #12]
 8004124:	1d1a      	adds	r2, r3, #4
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	9203      	str	r2, [sp, #12]
 800412a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800412e:	3402      	adds	r4, #2
 8004130:	9305      	str	r3, [sp, #20]
 8004132:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004208 <_vfiprintf_r+0x22c>
 8004136:	7821      	ldrb	r1, [r4, #0]
 8004138:	2203      	movs	r2, #3
 800413a:	4650      	mov	r0, sl
 800413c:	f7fc f850 	bl	80001e0 <memchr>
 8004140:	b138      	cbz	r0, 8004152 <_vfiprintf_r+0x176>
 8004142:	9b04      	ldr	r3, [sp, #16]
 8004144:	eba0 000a 	sub.w	r0, r0, sl
 8004148:	2240      	movs	r2, #64	@ 0x40
 800414a:	4082      	lsls	r2, r0
 800414c:	4313      	orrs	r3, r2
 800414e:	3401      	adds	r4, #1
 8004150:	9304      	str	r3, [sp, #16]
 8004152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004156:	4829      	ldr	r0, [pc, #164]	@ (80041fc <_vfiprintf_r+0x220>)
 8004158:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800415c:	2206      	movs	r2, #6
 800415e:	f7fc f83f 	bl	80001e0 <memchr>
 8004162:	2800      	cmp	r0, #0
 8004164:	d03f      	beq.n	80041e6 <_vfiprintf_r+0x20a>
 8004166:	4b26      	ldr	r3, [pc, #152]	@ (8004200 <_vfiprintf_r+0x224>)
 8004168:	bb1b      	cbnz	r3, 80041b2 <_vfiprintf_r+0x1d6>
 800416a:	9b03      	ldr	r3, [sp, #12]
 800416c:	3307      	adds	r3, #7
 800416e:	f023 0307 	bic.w	r3, r3, #7
 8004172:	3308      	adds	r3, #8
 8004174:	9303      	str	r3, [sp, #12]
 8004176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004178:	443b      	add	r3, r7
 800417a:	9309      	str	r3, [sp, #36]	@ 0x24
 800417c:	e76a      	b.n	8004054 <_vfiprintf_r+0x78>
 800417e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004182:	460c      	mov	r4, r1
 8004184:	2001      	movs	r0, #1
 8004186:	e7a8      	b.n	80040da <_vfiprintf_r+0xfe>
 8004188:	2300      	movs	r3, #0
 800418a:	3401      	adds	r4, #1
 800418c:	9305      	str	r3, [sp, #20]
 800418e:	4619      	mov	r1, r3
 8004190:	f04f 0c0a 	mov.w	ip, #10
 8004194:	4620      	mov	r0, r4
 8004196:	f810 2b01 	ldrb.w	r2, [r0], #1
 800419a:	3a30      	subs	r2, #48	@ 0x30
 800419c:	2a09      	cmp	r2, #9
 800419e:	d903      	bls.n	80041a8 <_vfiprintf_r+0x1cc>
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0c6      	beq.n	8004132 <_vfiprintf_r+0x156>
 80041a4:	9105      	str	r1, [sp, #20]
 80041a6:	e7c4      	b.n	8004132 <_vfiprintf_r+0x156>
 80041a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80041ac:	4604      	mov	r4, r0
 80041ae:	2301      	movs	r3, #1
 80041b0:	e7f0      	b.n	8004194 <_vfiprintf_r+0x1b8>
 80041b2:	ab03      	add	r3, sp, #12
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	462a      	mov	r2, r5
 80041b8:	4b12      	ldr	r3, [pc, #72]	@ (8004204 <_vfiprintf_r+0x228>)
 80041ba:	a904      	add	r1, sp, #16
 80041bc:	4630      	mov	r0, r6
 80041be:	f3af 8000 	nop.w
 80041c2:	4607      	mov	r7, r0
 80041c4:	1c78      	adds	r0, r7, #1
 80041c6:	d1d6      	bne.n	8004176 <_vfiprintf_r+0x19a>
 80041c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80041ca:	07d9      	lsls	r1, r3, #31
 80041cc:	d405      	bmi.n	80041da <_vfiprintf_r+0x1fe>
 80041ce:	89ab      	ldrh	r3, [r5, #12]
 80041d0:	059a      	lsls	r2, r3, #22
 80041d2:	d402      	bmi.n	80041da <_vfiprintf_r+0x1fe>
 80041d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041d6:	f7ff fddd 	bl	8003d94 <__retarget_lock_release_recursive>
 80041da:	89ab      	ldrh	r3, [r5, #12]
 80041dc:	065b      	lsls	r3, r3, #25
 80041de:	f53f af1f 	bmi.w	8004020 <_vfiprintf_r+0x44>
 80041e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041e4:	e71e      	b.n	8004024 <_vfiprintf_r+0x48>
 80041e6:	ab03      	add	r3, sp, #12
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	462a      	mov	r2, r5
 80041ec:	4b05      	ldr	r3, [pc, #20]	@ (8004204 <_vfiprintf_r+0x228>)
 80041ee:	a904      	add	r1, sp, #16
 80041f0:	4630      	mov	r0, r6
 80041f2:	f000 f879 	bl	80042e8 <_printf_i>
 80041f6:	e7e4      	b.n	80041c2 <_vfiprintf_r+0x1e6>
 80041f8:	08004908 	.word	0x08004908
 80041fc:	08004912 	.word	0x08004912
 8004200:	00000000 	.word	0x00000000
 8004204:	08003fb7 	.word	0x08003fb7
 8004208:	0800490e 	.word	0x0800490e

0800420c <_printf_common>:
 800420c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004210:	4616      	mov	r6, r2
 8004212:	4698      	mov	r8, r3
 8004214:	688a      	ldr	r2, [r1, #8]
 8004216:	690b      	ldr	r3, [r1, #16]
 8004218:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800421c:	4293      	cmp	r3, r2
 800421e:	bfb8      	it	lt
 8004220:	4613      	movlt	r3, r2
 8004222:	6033      	str	r3, [r6, #0]
 8004224:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004228:	4607      	mov	r7, r0
 800422a:	460c      	mov	r4, r1
 800422c:	b10a      	cbz	r2, 8004232 <_printf_common+0x26>
 800422e:	3301      	adds	r3, #1
 8004230:	6033      	str	r3, [r6, #0]
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	0699      	lsls	r1, r3, #26
 8004236:	bf42      	ittt	mi
 8004238:	6833      	ldrmi	r3, [r6, #0]
 800423a:	3302      	addmi	r3, #2
 800423c:	6033      	strmi	r3, [r6, #0]
 800423e:	6825      	ldr	r5, [r4, #0]
 8004240:	f015 0506 	ands.w	r5, r5, #6
 8004244:	d106      	bne.n	8004254 <_printf_common+0x48>
 8004246:	f104 0a19 	add.w	sl, r4, #25
 800424a:	68e3      	ldr	r3, [r4, #12]
 800424c:	6832      	ldr	r2, [r6, #0]
 800424e:	1a9b      	subs	r3, r3, r2
 8004250:	42ab      	cmp	r3, r5
 8004252:	dc26      	bgt.n	80042a2 <_printf_common+0x96>
 8004254:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004258:	6822      	ldr	r2, [r4, #0]
 800425a:	3b00      	subs	r3, #0
 800425c:	bf18      	it	ne
 800425e:	2301      	movne	r3, #1
 8004260:	0692      	lsls	r2, r2, #26
 8004262:	d42b      	bmi.n	80042bc <_printf_common+0xb0>
 8004264:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004268:	4641      	mov	r1, r8
 800426a:	4638      	mov	r0, r7
 800426c:	47c8      	blx	r9
 800426e:	3001      	adds	r0, #1
 8004270:	d01e      	beq.n	80042b0 <_printf_common+0xa4>
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	6922      	ldr	r2, [r4, #16]
 8004276:	f003 0306 	and.w	r3, r3, #6
 800427a:	2b04      	cmp	r3, #4
 800427c:	bf02      	ittt	eq
 800427e:	68e5      	ldreq	r5, [r4, #12]
 8004280:	6833      	ldreq	r3, [r6, #0]
 8004282:	1aed      	subeq	r5, r5, r3
 8004284:	68a3      	ldr	r3, [r4, #8]
 8004286:	bf0c      	ite	eq
 8004288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800428c:	2500      	movne	r5, #0
 800428e:	4293      	cmp	r3, r2
 8004290:	bfc4      	itt	gt
 8004292:	1a9b      	subgt	r3, r3, r2
 8004294:	18ed      	addgt	r5, r5, r3
 8004296:	2600      	movs	r6, #0
 8004298:	341a      	adds	r4, #26
 800429a:	42b5      	cmp	r5, r6
 800429c:	d11a      	bne.n	80042d4 <_printf_common+0xc8>
 800429e:	2000      	movs	r0, #0
 80042a0:	e008      	b.n	80042b4 <_printf_common+0xa8>
 80042a2:	2301      	movs	r3, #1
 80042a4:	4652      	mov	r2, sl
 80042a6:	4641      	mov	r1, r8
 80042a8:	4638      	mov	r0, r7
 80042aa:	47c8      	blx	r9
 80042ac:	3001      	adds	r0, #1
 80042ae:	d103      	bne.n	80042b8 <_printf_common+0xac>
 80042b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80042b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b8:	3501      	adds	r5, #1
 80042ba:	e7c6      	b.n	800424a <_printf_common+0x3e>
 80042bc:	18e1      	adds	r1, r4, r3
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	2030      	movs	r0, #48	@ 0x30
 80042c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042c6:	4422      	add	r2, r4
 80042c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042d0:	3302      	adds	r3, #2
 80042d2:	e7c7      	b.n	8004264 <_printf_common+0x58>
 80042d4:	2301      	movs	r3, #1
 80042d6:	4622      	mov	r2, r4
 80042d8:	4641      	mov	r1, r8
 80042da:	4638      	mov	r0, r7
 80042dc:	47c8      	blx	r9
 80042de:	3001      	adds	r0, #1
 80042e0:	d0e6      	beq.n	80042b0 <_printf_common+0xa4>
 80042e2:	3601      	adds	r6, #1
 80042e4:	e7d9      	b.n	800429a <_printf_common+0x8e>
	...

080042e8 <_printf_i>:
 80042e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042ec:	7e0f      	ldrb	r7, [r1, #24]
 80042ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042f0:	2f78      	cmp	r7, #120	@ 0x78
 80042f2:	4691      	mov	r9, r2
 80042f4:	4680      	mov	r8, r0
 80042f6:	460c      	mov	r4, r1
 80042f8:	469a      	mov	sl, r3
 80042fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042fe:	d807      	bhi.n	8004310 <_printf_i+0x28>
 8004300:	2f62      	cmp	r7, #98	@ 0x62
 8004302:	d80a      	bhi.n	800431a <_printf_i+0x32>
 8004304:	2f00      	cmp	r7, #0
 8004306:	f000 80d1 	beq.w	80044ac <_printf_i+0x1c4>
 800430a:	2f58      	cmp	r7, #88	@ 0x58
 800430c:	f000 80b8 	beq.w	8004480 <_printf_i+0x198>
 8004310:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004314:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004318:	e03a      	b.n	8004390 <_printf_i+0xa8>
 800431a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800431e:	2b15      	cmp	r3, #21
 8004320:	d8f6      	bhi.n	8004310 <_printf_i+0x28>
 8004322:	a101      	add	r1, pc, #4	@ (adr r1, 8004328 <_printf_i+0x40>)
 8004324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004328:	08004381 	.word	0x08004381
 800432c:	08004395 	.word	0x08004395
 8004330:	08004311 	.word	0x08004311
 8004334:	08004311 	.word	0x08004311
 8004338:	08004311 	.word	0x08004311
 800433c:	08004311 	.word	0x08004311
 8004340:	08004395 	.word	0x08004395
 8004344:	08004311 	.word	0x08004311
 8004348:	08004311 	.word	0x08004311
 800434c:	08004311 	.word	0x08004311
 8004350:	08004311 	.word	0x08004311
 8004354:	08004493 	.word	0x08004493
 8004358:	080043bf 	.word	0x080043bf
 800435c:	0800444d 	.word	0x0800444d
 8004360:	08004311 	.word	0x08004311
 8004364:	08004311 	.word	0x08004311
 8004368:	080044b5 	.word	0x080044b5
 800436c:	08004311 	.word	0x08004311
 8004370:	080043bf 	.word	0x080043bf
 8004374:	08004311 	.word	0x08004311
 8004378:	08004311 	.word	0x08004311
 800437c:	08004455 	.word	0x08004455
 8004380:	6833      	ldr	r3, [r6, #0]
 8004382:	1d1a      	adds	r2, r3, #4
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6032      	str	r2, [r6, #0]
 8004388:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800438c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004390:	2301      	movs	r3, #1
 8004392:	e09c      	b.n	80044ce <_printf_i+0x1e6>
 8004394:	6833      	ldr	r3, [r6, #0]
 8004396:	6820      	ldr	r0, [r4, #0]
 8004398:	1d19      	adds	r1, r3, #4
 800439a:	6031      	str	r1, [r6, #0]
 800439c:	0606      	lsls	r6, r0, #24
 800439e:	d501      	bpl.n	80043a4 <_printf_i+0xbc>
 80043a0:	681d      	ldr	r5, [r3, #0]
 80043a2:	e003      	b.n	80043ac <_printf_i+0xc4>
 80043a4:	0645      	lsls	r5, r0, #25
 80043a6:	d5fb      	bpl.n	80043a0 <_printf_i+0xb8>
 80043a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80043ac:	2d00      	cmp	r5, #0
 80043ae:	da03      	bge.n	80043b8 <_printf_i+0xd0>
 80043b0:	232d      	movs	r3, #45	@ 0x2d
 80043b2:	426d      	negs	r5, r5
 80043b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043b8:	4858      	ldr	r0, [pc, #352]	@ (800451c <_printf_i+0x234>)
 80043ba:	230a      	movs	r3, #10
 80043bc:	e011      	b.n	80043e2 <_printf_i+0xfa>
 80043be:	6821      	ldr	r1, [r4, #0]
 80043c0:	6833      	ldr	r3, [r6, #0]
 80043c2:	0608      	lsls	r0, r1, #24
 80043c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80043c8:	d402      	bmi.n	80043d0 <_printf_i+0xe8>
 80043ca:	0649      	lsls	r1, r1, #25
 80043cc:	bf48      	it	mi
 80043ce:	b2ad      	uxthmi	r5, r5
 80043d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80043d2:	4852      	ldr	r0, [pc, #328]	@ (800451c <_printf_i+0x234>)
 80043d4:	6033      	str	r3, [r6, #0]
 80043d6:	bf14      	ite	ne
 80043d8:	230a      	movne	r3, #10
 80043da:	2308      	moveq	r3, #8
 80043dc:	2100      	movs	r1, #0
 80043de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043e2:	6866      	ldr	r6, [r4, #4]
 80043e4:	60a6      	str	r6, [r4, #8]
 80043e6:	2e00      	cmp	r6, #0
 80043e8:	db05      	blt.n	80043f6 <_printf_i+0x10e>
 80043ea:	6821      	ldr	r1, [r4, #0]
 80043ec:	432e      	orrs	r6, r5
 80043ee:	f021 0104 	bic.w	r1, r1, #4
 80043f2:	6021      	str	r1, [r4, #0]
 80043f4:	d04b      	beq.n	800448e <_printf_i+0x1a6>
 80043f6:	4616      	mov	r6, r2
 80043f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80043fc:	fb03 5711 	mls	r7, r3, r1, r5
 8004400:	5dc7      	ldrb	r7, [r0, r7]
 8004402:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004406:	462f      	mov	r7, r5
 8004408:	42bb      	cmp	r3, r7
 800440a:	460d      	mov	r5, r1
 800440c:	d9f4      	bls.n	80043f8 <_printf_i+0x110>
 800440e:	2b08      	cmp	r3, #8
 8004410:	d10b      	bne.n	800442a <_printf_i+0x142>
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	07df      	lsls	r7, r3, #31
 8004416:	d508      	bpl.n	800442a <_printf_i+0x142>
 8004418:	6923      	ldr	r3, [r4, #16]
 800441a:	6861      	ldr	r1, [r4, #4]
 800441c:	4299      	cmp	r1, r3
 800441e:	bfde      	ittt	le
 8004420:	2330      	movle	r3, #48	@ 0x30
 8004422:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004426:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800442a:	1b92      	subs	r2, r2, r6
 800442c:	6122      	str	r2, [r4, #16]
 800442e:	f8cd a000 	str.w	sl, [sp]
 8004432:	464b      	mov	r3, r9
 8004434:	aa03      	add	r2, sp, #12
 8004436:	4621      	mov	r1, r4
 8004438:	4640      	mov	r0, r8
 800443a:	f7ff fee7 	bl	800420c <_printf_common>
 800443e:	3001      	adds	r0, #1
 8004440:	d14a      	bne.n	80044d8 <_printf_i+0x1f0>
 8004442:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004446:	b004      	add	sp, #16
 8004448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	f043 0320 	orr.w	r3, r3, #32
 8004452:	6023      	str	r3, [r4, #0]
 8004454:	4832      	ldr	r0, [pc, #200]	@ (8004520 <_printf_i+0x238>)
 8004456:	2778      	movs	r7, #120	@ 0x78
 8004458:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800445c:	6823      	ldr	r3, [r4, #0]
 800445e:	6831      	ldr	r1, [r6, #0]
 8004460:	061f      	lsls	r7, r3, #24
 8004462:	f851 5b04 	ldr.w	r5, [r1], #4
 8004466:	d402      	bmi.n	800446e <_printf_i+0x186>
 8004468:	065f      	lsls	r7, r3, #25
 800446a:	bf48      	it	mi
 800446c:	b2ad      	uxthmi	r5, r5
 800446e:	6031      	str	r1, [r6, #0]
 8004470:	07d9      	lsls	r1, r3, #31
 8004472:	bf44      	itt	mi
 8004474:	f043 0320 	orrmi.w	r3, r3, #32
 8004478:	6023      	strmi	r3, [r4, #0]
 800447a:	b11d      	cbz	r5, 8004484 <_printf_i+0x19c>
 800447c:	2310      	movs	r3, #16
 800447e:	e7ad      	b.n	80043dc <_printf_i+0xf4>
 8004480:	4826      	ldr	r0, [pc, #152]	@ (800451c <_printf_i+0x234>)
 8004482:	e7e9      	b.n	8004458 <_printf_i+0x170>
 8004484:	6823      	ldr	r3, [r4, #0]
 8004486:	f023 0320 	bic.w	r3, r3, #32
 800448a:	6023      	str	r3, [r4, #0]
 800448c:	e7f6      	b.n	800447c <_printf_i+0x194>
 800448e:	4616      	mov	r6, r2
 8004490:	e7bd      	b.n	800440e <_printf_i+0x126>
 8004492:	6833      	ldr	r3, [r6, #0]
 8004494:	6825      	ldr	r5, [r4, #0]
 8004496:	6961      	ldr	r1, [r4, #20]
 8004498:	1d18      	adds	r0, r3, #4
 800449a:	6030      	str	r0, [r6, #0]
 800449c:	062e      	lsls	r6, r5, #24
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	d501      	bpl.n	80044a6 <_printf_i+0x1be>
 80044a2:	6019      	str	r1, [r3, #0]
 80044a4:	e002      	b.n	80044ac <_printf_i+0x1c4>
 80044a6:	0668      	lsls	r0, r5, #25
 80044a8:	d5fb      	bpl.n	80044a2 <_printf_i+0x1ba>
 80044aa:	8019      	strh	r1, [r3, #0]
 80044ac:	2300      	movs	r3, #0
 80044ae:	6123      	str	r3, [r4, #16]
 80044b0:	4616      	mov	r6, r2
 80044b2:	e7bc      	b.n	800442e <_printf_i+0x146>
 80044b4:	6833      	ldr	r3, [r6, #0]
 80044b6:	1d1a      	adds	r2, r3, #4
 80044b8:	6032      	str	r2, [r6, #0]
 80044ba:	681e      	ldr	r6, [r3, #0]
 80044bc:	6862      	ldr	r2, [r4, #4]
 80044be:	2100      	movs	r1, #0
 80044c0:	4630      	mov	r0, r6
 80044c2:	f7fb fe8d 	bl	80001e0 <memchr>
 80044c6:	b108      	cbz	r0, 80044cc <_printf_i+0x1e4>
 80044c8:	1b80      	subs	r0, r0, r6
 80044ca:	6060      	str	r0, [r4, #4]
 80044cc:	6863      	ldr	r3, [r4, #4]
 80044ce:	6123      	str	r3, [r4, #16]
 80044d0:	2300      	movs	r3, #0
 80044d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044d6:	e7aa      	b.n	800442e <_printf_i+0x146>
 80044d8:	6923      	ldr	r3, [r4, #16]
 80044da:	4632      	mov	r2, r6
 80044dc:	4649      	mov	r1, r9
 80044de:	4640      	mov	r0, r8
 80044e0:	47d0      	blx	sl
 80044e2:	3001      	adds	r0, #1
 80044e4:	d0ad      	beq.n	8004442 <_printf_i+0x15a>
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	079b      	lsls	r3, r3, #30
 80044ea:	d413      	bmi.n	8004514 <_printf_i+0x22c>
 80044ec:	68e0      	ldr	r0, [r4, #12]
 80044ee:	9b03      	ldr	r3, [sp, #12]
 80044f0:	4298      	cmp	r0, r3
 80044f2:	bfb8      	it	lt
 80044f4:	4618      	movlt	r0, r3
 80044f6:	e7a6      	b.n	8004446 <_printf_i+0x15e>
 80044f8:	2301      	movs	r3, #1
 80044fa:	4632      	mov	r2, r6
 80044fc:	4649      	mov	r1, r9
 80044fe:	4640      	mov	r0, r8
 8004500:	47d0      	blx	sl
 8004502:	3001      	adds	r0, #1
 8004504:	d09d      	beq.n	8004442 <_printf_i+0x15a>
 8004506:	3501      	adds	r5, #1
 8004508:	68e3      	ldr	r3, [r4, #12]
 800450a:	9903      	ldr	r1, [sp, #12]
 800450c:	1a5b      	subs	r3, r3, r1
 800450e:	42ab      	cmp	r3, r5
 8004510:	dcf2      	bgt.n	80044f8 <_printf_i+0x210>
 8004512:	e7eb      	b.n	80044ec <_printf_i+0x204>
 8004514:	2500      	movs	r5, #0
 8004516:	f104 0619 	add.w	r6, r4, #25
 800451a:	e7f5      	b.n	8004508 <_printf_i+0x220>
 800451c:	08004919 	.word	0x08004919
 8004520:	0800492a 	.word	0x0800492a

08004524 <__sflush_r>:
 8004524:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800452c:	0716      	lsls	r6, r2, #28
 800452e:	4605      	mov	r5, r0
 8004530:	460c      	mov	r4, r1
 8004532:	d454      	bmi.n	80045de <__sflush_r+0xba>
 8004534:	684b      	ldr	r3, [r1, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	dc02      	bgt.n	8004540 <__sflush_r+0x1c>
 800453a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800453c:	2b00      	cmp	r3, #0
 800453e:	dd48      	ble.n	80045d2 <__sflush_r+0xae>
 8004540:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004542:	2e00      	cmp	r6, #0
 8004544:	d045      	beq.n	80045d2 <__sflush_r+0xae>
 8004546:	2300      	movs	r3, #0
 8004548:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800454c:	682f      	ldr	r7, [r5, #0]
 800454e:	6a21      	ldr	r1, [r4, #32]
 8004550:	602b      	str	r3, [r5, #0]
 8004552:	d030      	beq.n	80045b6 <__sflush_r+0x92>
 8004554:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004556:	89a3      	ldrh	r3, [r4, #12]
 8004558:	0759      	lsls	r1, r3, #29
 800455a:	d505      	bpl.n	8004568 <__sflush_r+0x44>
 800455c:	6863      	ldr	r3, [r4, #4]
 800455e:	1ad2      	subs	r2, r2, r3
 8004560:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004562:	b10b      	cbz	r3, 8004568 <__sflush_r+0x44>
 8004564:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004566:	1ad2      	subs	r2, r2, r3
 8004568:	2300      	movs	r3, #0
 800456a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800456c:	6a21      	ldr	r1, [r4, #32]
 800456e:	4628      	mov	r0, r5
 8004570:	47b0      	blx	r6
 8004572:	1c43      	adds	r3, r0, #1
 8004574:	89a3      	ldrh	r3, [r4, #12]
 8004576:	d106      	bne.n	8004586 <__sflush_r+0x62>
 8004578:	6829      	ldr	r1, [r5, #0]
 800457a:	291d      	cmp	r1, #29
 800457c:	d82b      	bhi.n	80045d6 <__sflush_r+0xb2>
 800457e:	4a2a      	ldr	r2, [pc, #168]	@ (8004628 <__sflush_r+0x104>)
 8004580:	40ca      	lsrs	r2, r1
 8004582:	07d6      	lsls	r6, r2, #31
 8004584:	d527      	bpl.n	80045d6 <__sflush_r+0xb2>
 8004586:	2200      	movs	r2, #0
 8004588:	6062      	str	r2, [r4, #4]
 800458a:	04d9      	lsls	r1, r3, #19
 800458c:	6922      	ldr	r2, [r4, #16]
 800458e:	6022      	str	r2, [r4, #0]
 8004590:	d504      	bpl.n	800459c <__sflush_r+0x78>
 8004592:	1c42      	adds	r2, r0, #1
 8004594:	d101      	bne.n	800459a <__sflush_r+0x76>
 8004596:	682b      	ldr	r3, [r5, #0]
 8004598:	b903      	cbnz	r3, 800459c <__sflush_r+0x78>
 800459a:	6560      	str	r0, [r4, #84]	@ 0x54
 800459c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800459e:	602f      	str	r7, [r5, #0]
 80045a0:	b1b9      	cbz	r1, 80045d2 <__sflush_r+0xae>
 80045a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80045a6:	4299      	cmp	r1, r3
 80045a8:	d002      	beq.n	80045b0 <__sflush_r+0x8c>
 80045aa:	4628      	mov	r0, r5
 80045ac:	f7ff fbf4 	bl	8003d98 <_free_r>
 80045b0:	2300      	movs	r3, #0
 80045b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80045b4:	e00d      	b.n	80045d2 <__sflush_r+0xae>
 80045b6:	2301      	movs	r3, #1
 80045b8:	4628      	mov	r0, r5
 80045ba:	47b0      	blx	r6
 80045bc:	4602      	mov	r2, r0
 80045be:	1c50      	adds	r0, r2, #1
 80045c0:	d1c9      	bne.n	8004556 <__sflush_r+0x32>
 80045c2:	682b      	ldr	r3, [r5, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0c6      	beq.n	8004556 <__sflush_r+0x32>
 80045c8:	2b1d      	cmp	r3, #29
 80045ca:	d001      	beq.n	80045d0 <__sflush_r+0xac>
 80045cc:	2b16      	cmp	r3, #22
 80045ce:	d11e      	bne.n	800460e <__sflush_r+0xea>
 80045d0:	602f      	str	r7, [r5, #0]
 80045d2:	2000      	movs	r0, #0
 80045d4:	e022      	b.n	800461c <__sflush_r+0xf8>
 80045d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045da:	b21b      	sxth	r3, r3
 80045dc:	e01b      	b.n	8004616 <__sflush_r+0xf2>
 80045de:	690f      	ldr	r7, [r1, #16]
 80045e0:	2f00      	cmp	r7, #0
 80045e2:	d0f6      	beq.n	80045d2 <__sflush_r+0xae>
 80045e4:	0793      	lsls	r3, r2, #30
 80045e6:	680e      	ldr	r6, [r1, #0]
 80045e8:	bf08      	it	eq
 80045ea:	694b      	ldreq	r3, [r1, #20]
 80045ec:	600f      	str	r7, [r1, #0]
 80045ee:	bf18      	it	ne
 80045f0:	2300      	movne	r3, #0
 80045f2:	eba6 0807 	sub.w	r8, r6, r7
 80045f6:	608b      	str	r3, [r1, #8]
 80045f8:	f1b8 0f00 	cmp.w	r8, #0
 80045fc:	dde9      	ble.n	80045d2 <__sflush_r+0xae>
 80045fe:	6a21      	ldr	r1, [r4, #32]
 8004600:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004602:	4643      	mov	r3, r8
 8004604:	463a      	mov	r2, r7
 8004606:	4628      	mov	r0, r5
 8004608:	47b0      	blx	r6
 800460a:	2800      	cmp	r0, #0
 800460c:	dc08      	bgt.n	8004620 <__sflush_r+0xfc>
 800460e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004616:	81a3      	strh	r3, [r4, #12]
 8004618:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800461c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004620:	4407      	add	r7, r0
 8004622:	eba8 0800 	sub.w	r8, r8, r0
 8004626:	e7e7      	b.n	80045f8 <__sflush_r+0xd4>
 8004628:	20400001 	.word	0x20400001

0800462c <_fflush_r>:
 800462c:	b538      	push	{r3, r4, r5, lr}
 800462e:	690b      	ldr	r3, [r1, #16]
 8004630:	4605      	mov	r5, r0
 8004632:	460c      	mov	r4, r1
 8004634:	b913      	cbnz	r3, 800463c <_fflush_r+0x10>
 8004636:	2500      	movs	r5, #0
 8004638:	4628      	mov	r0, r5
 800463a:	bd38      	pop	{r3, r4, r5, pc}
 800463c:	b118      	cbz	r0, 8004646 <_fflush_r+0x1a>
 800463e:	6a03      	ldr	r3, [r0, #32]
 8004640:	b90b      	cbnz	r3, 8004646 <_fflush_r+0x1a>
 8004642:	f7ff f9a7 	bl	8003994 <__sinit>
 8004646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0f3      	beq.n	8004636 <_fflush_r+0xa>
 800464e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004650:	07d0      	lsls	r0, r2, #31
 8004652:	d404      	bmi.n	800465e <_fflush_r+0x32>
 8004654:	0599      	lsls	r1, r3, #22
 8004656:	d402      	bmi.n	800465e <_fflush_r+0x32>
 8004658:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800465a:	f7ff fb9a 	bl	8003d92 <__retarget_lock_acquire_recursive>
 800465e:	4628      	mov	r0, r5
 8004660:	4621      	mov	r1, r4
 8004662:	f7ff ff5f 	bl	8004524 <__sflush_r>
 8004666:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004668:	07da      	lsls	r2, r3, #31
 800466a:	4605      	mov	r5, r0
 800466c:	d4e4      	bmi.n	8004638 <_fflush_r+0xc>
 800466e:	89a3      	ldrh	r3, [r4, #12]
 8004670:	059b      	lsls	r3, r3, #22
 8004672:	d4e1      	bmi.n	8004638 <_fflush_r+0xc>
 8004674:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004676:	f7ff fb8d 	bl	8003d94 <__retarget_lock_release_recursive>
 800467a:	e7dd      	b.n	8004638 <_fflush_r+0xc>

0800467c <__swhatbuf_r>:
 800467c:	b570      	push	{r4, r5, r6, lr}
 800467e:	460c      	mov	r4, r1
 8004680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004684:	2900      	cmp	r1, #0
 8004686:	b096      	sub	sp, #88	@ 0x58
 8004688:	4615      	mov	r5, r2
 800468a:	461e      	mov	r6, r3
 800468c:	da0d      	bge.n	80046aa <__swhatbuf_r+0x2e>
 800468e:	89a3      	ldrh	r3, [r4, #12]
 8004690:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004694:	f04f 0100 	mov.w	r1, #0
 8004698:	bf14      	ite	ne
 800469a:	2340      	movne	r3, #64	@ 0x40
 800469c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80046a0:	2000      	movs	r0, #0
 80046a2:	6031      	str	r1, [r6, #0]
 80046a4:	602b      	str	r3, [r5, #0]
 80046a6:	b016      	add	sp, #88	@ 0x58
 80046a8:	bd70      	pop	{r4, r5, r6, pc}
 80046aa:	466a      	mov	r2, sp
 80046ac:	f000 f87c 	bl	80047a8 <_fstat_r>
 80046b0:	2800      	cmp	r0, #0
 80046b2:	dbec      	blt.n	800468e <__swhatbuf_r+0x12>
 80046b4:	9901      	ldr	r1, [sp, #4]
 80046b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80046ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80046be:	4259      	negs	r1, r3
 80046c0:	4159      	adcs	r1, r3
 80046c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046c6:	e7eb      	b.n	80046a0 <__swhatbuf_r+0x24>

080046c8 <__smakebuf_r>:
 80046c8:	898b      	ldrh	r3, [r1, #12]
 80046ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046cc:	079d      	lsls	r5, r3, #30
 80046ce:	4606      	mov	r6, r0
 80046d0:	460c      	mov	r4, r1
 80046d2:	d507      	bpl.n	80046e4 <__smakebuf_r+0x1c>
 80046d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80046d8:	6023      	str	r3, [r4, #0]
 80046da:	6123      	str	r3, [r4, #16]
 80046dc:	2301      	movs	r3, #1
 80046de:	6163      	str	r3, [r4, #20]
 80046e0:	b003      	add	sp, #12
 80046e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046e4:	ab01      	add	r3, sp, #4
 80046e6:	466a      	mov	r2, sp
 80046e8:	f7ff ffc8 	bl	800467c <__swhatbuf_r>
 80046ec:	9f00      	ldr	r7, [sp, #0]
 80046ee:	4605      	mov	r5, r0
 80046f0:	4639      	mov	r1, r7
 80046f2:	4630      	mov	r0, r6
 80046f4:	f7ff fbbc 	bl	8003e70 <_malloc_r>
 80046f8:	b948      	cbnz	r0, 800470e <__smakebuf_r+0x46>
 80046fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046fe:	059a      	lsls	r2, r3, #22
 8004700:	d4ee      	bmi.n	80046e0 <__smakebuf_r+0x18>
 8004702:	f023 0303 	bic.w	r3, r3, #3
 8004706:	f043 0302 	orr.w	r3, r3, #2
 800470a:	81a3      	strh	r3, [r4, #12]
 800470c:	e7e2      	b.n	80046d4 <__smakebuf_r+0xc>
 800470e:	89a3      	ldrh	r3, [r4, #12]
 8004710:	6020      	str	r0, [r4, #0]
 8004712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004716:	81a3      	strh	r3, [r4, #12]
 8004718:	9b01      	ldr	r3, [sp, #4]
 800471a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800471e:	b15b      	cbz	r3, 8004738 <__smakebuf_r+0x70>
 8004720:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004724:	4630      	mov	r0, r6
 8004726:	f000 f851 	bl	80047cc <_isatty_r>
 800472a:	b128      	cbz	r0, 8004738 <__smakebuf_r+0x70>
 800472c:	89a3      	ldrh	r3, [r4, #12]
 800472e:	f023 0303 	bic.w	r3, r3, #3
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	81a3      	strh	r3, [r4, #12]
 8004738:	89a3      	ldrh	r3, [r4, #12]
 800473a:	431d      	orrs	r5, r3
 800473c:	81a5      	strh	r5, [r4, #12]
 800473e:	e7cf      	b.n	80046e0 <__smakebuf_r+0x18>

08004740 <_putc_r>:
 8004740:	b570      	push	{r4, r5, r6, lr}
 8004742:	460d      	mov	r5, r1
 8004744:	4614      	mov	r4, r2
 8004746:	4606      	mov	r6, r0
 8004748:	b118      	cbz	r0, 8004752 <_putc_r+0x12>
 800474a:	6a03      	ldr	r3, [r0, #32]
 800474c:	b90b      	cbnz	r3, 8004752 <_putc_r+0x12>
 800474e:	f7ff f921 	bl	8003994 <__sinit>
 8004752:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004754:	07d8      	lsls	r0, r3, #31
 8004756:	d405      	bmi.n	8004764 <_putc_r+0x24>
 8004758:	89a3      	ldrh	r3, [r4, #12]
 800475a:	0599      	lsls	r1, r3, #22
 800475c:	d402      	bmi.n	8004764 <_putc_r+0x24>
 800475e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004760:	f7ff fb17 	bl	8003d92 <__retarget_lock_acquire_recursive>
 8004764:	68a3      	ldr	r3, [r4, #8]
 8004766:	3b01      	subs	r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	60a3      	str	r3, [r4, #8]
 800476c:	da05      	bge.n	800477a <_putc_r+0x3a>
 800476e:	69a2      	ldr	r2, [r4, #24]
 8004770:	4293      	cmp	r3, r2
 8004772:	db12      	blt.n	800479a <_putc_r+0x5a>
 8004774:	b2eb      	uxtb	r3, r5
 8004776:	2b0a      	cmp	r3, #10
 8004778:	d00f      	beq.n	800479a <_putc_r+0x5a>
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	1c5a      	adds	r2, r3, #1
 800477e:	6022      	str	r2, [r4, #0]
 8004780:	701d      	strb	r5, [r3, #0]
 8004782:	b2ed      	uxtb	r5, r5
 8004784:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004786:	07da      	lsls	r2, r3, #31
 8004788:	d405      	bmi.n	8004796 <_putc_r+0x56>
 800478a:	89a3      	ldrh	r3, [r4, #12]
 800478c:	059b      	lsls	r3, r3, #22
 800478e:	d402      	bmi.n	8004796 <_putc_r+0x56>
 8004790:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004792:	f7ff faff 	bl	8003d94 <__retarget_lock_release_recursive>
 8004796:	4628      	mov	r0, r5
 8004798:	bd70      	pop	{r4, r5, r6, pc}
 800479a:	4629      	mov	r1, r5
 800479c:	4622      	mov	r2, r4
 800479e:	4630      	mov	r0, r6
 80047a0:	f7ff f9e9 	bl	8003b76 <__swbuf_r>
 80047a4:	4605      	mov	r5, r0
 80047a6:	e7ed      	b.n	8004784 <_putc_r+0x44>

080047a8 <_fstat_r>:
 80047a8:	b538      	push	{r3, r4, r5, lr}
 80047aa:	4d07      	ldr	r5, [pc, #28]	@ (80047c8 <_fstat_r+0x20>)
 80047ac:	2300      	movs	r3, #0
 80047ae:	4604      	mov	r4, r0
 80047b0:	4608      	mov	r0, r1
 80047b2:	4611      	mov	r1, r2
 80047b4:	602b      	str	r3, [r5, #0]
 80047b6:	f7fc f81d 	bl	80007f4 <_fstat>
 80047ba:	1c43      	adds	r3, r0, #1
 80047bc:	d102      	bne.n	80047c4 <_fstat_r+0x1c>
 80047be:	682b      	ldr	r3, [r5, #0]
 80047c0:	b103      	cbz	r3, 80047c4 <_fstat_r+0x1c>
 80047c2:	6023      	str	r3, [r4, #0]
 80047c4:	bd38      	pop	{r3, r4, r5, pc}
 80047c6:	bf00      	nop
 80047c8:	200002a8 	.word	0x200002a8

080047cc <_isatty_r>:
 80047cc:	b538      	push	{r3, r4, r5, lr}
 80047ce:	4d06      	ldr	r5, [pc, #24]	@ (80047e8 <_isatty_r+0x1c>)
 80047d0:	2300      	movs	r3, #0
 80047d2:	4604      	mov	r4, r0
 80047d4:	4608      	mov	r0, r1
 80047d6:	602b      	str	r3, [r5, #0]
 80047d8:	f7fc f81c 	bl	8000814 <_isatty>
 80047dc:	1c43      	adds	r3, r0, #1
 80047de:	d102      	bne.n	80047e6 <_isatty_r+0x1a>
 80047e0:	682b      	ldr	r3, [r5, #0]
 80047e2:	b103      	cbz	r3, 80047e6 <_isatty_r+0x1a>
 80047e4:	6023      	str	r3, [r4, #0]
 80047e6:	bd38      	pop	{r3, r4, r5, pc}
 80047e8:	200002a8 	.word	0x200002a8

080047ec <_sbrk_r>:
 80047ec:	b538      	push	{r3, r4, r5, lr}
 80047ee:	4d06      	ldr	r5, [pc, #24]	@ (8004808 <_sbrk_r+0x1c>)
 80047f0:	2300      	movs	r3, #0
 80047f2:	4604      	mov	r4, r0
 80047f4:	4608      	mov	r0, r1
 80047f6:	602b      	str	r3, [r5, #0]
 80047f8:	f7fc f824 	bl	8000844 <_sbrk>
 80047fc:	1c43      	adds	r3, r0, #1
 80047fe:	d102      	bne.n	8004806 <_sbrk_r+0x1a>
 8004800:	682b      	ldr	r3, [r5, #0]
 8004802:	b103      	cbz	r3, 8004806 <_sbrk_r+0x1a>
 8004804:	6023      	str	r3, [r4, #0]
 8004806:	bd38      	pop	{r3, r4, r5, pc}
 8004808:	200002a8 	.word	0x200002a8

0800480c <_init>:
 800480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480e:	bf00      	nop
 8004810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004812:	bc08      	pop	{r3}
 8004814:	469e      	mov	lr, r3
 8004816:	4770      	bx	lr

08004818 <_fini>:
 8004818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481a:	bf00      	nop
 800481c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800481e:	bc08      	pop	{r3}
 8004820:	469e      	mov	lr, r3
 8004822:	4770      	bx	lr
