
IMU_Navigation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003688  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800381c  0800381c  0000481c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800385c  0800385c  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800385c  0800385c  00005068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800385c  0800385c  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800385c  0800385c  0000485c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003860  08003860  00004860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003864  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005068  2**0
                  CONTENTS
 10 .bss          000001f8  20000068  20000068  00005068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000260  20000260  00005068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000935f  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019e5  00000000  00000000  0000e3f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000770  00000000  00000000  0000fde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000059a  00000000  00000000  00010550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020b86  00000000  00000000  00010aea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a8e3  00000000  00000000  00031670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1dd9  00000000  00000000  0003bf53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fdd2c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002280  00000000  00000000  000fdd70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  000ffff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000068 	.word	0x20000068
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003804 	.word	0x08003804

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000006c 	.word	0x2000006c
 80001d0:	08003804 	.word	0x08003804

080001d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08a      	sub	sp, #40	@ 0x28
 80001d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001da:	f107 0314 	add.w	r3, r7, #20
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000298 <MX_GPIO_Init+0xc4>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	4a2a      	ldr	r2, [pc, #168]	@ (8000298 <MX_GPIO_Init+0xc4>)
 80001f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80001f4:	6153      	str	r3, [r2, #20]
 80001f6:	4b28      	ldr	r3, [pc, #160]	@ (8000298 <MX_GPIO_Init+0xc4>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80001fe:	613b      	str	r3, [r7, #16]
 8000200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000202:	4b25      	ldr	r3, [pc, #148]	@ (8000298 <MX_GPIO_Init+0xc4>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	4a24      	ldr	r2, [pc, #144]	@ (8000298 <MX_GPIO_Init+0xc4>)
 8000208:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800020c:	6153      	str	r3, [r2, #20]
 800020e:	4b22      	ldr	r3, [pc, #136]	@ (8000298 <MX_GPIO_Init+0xc4>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000216:	60fb      	str	r3, [r7, #12]
 8000218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800021a:	4b1f      	ldr	r3, [pc, #124]	@ (8000298 <MX_GPIO_Init+0xc4>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	4a1e      	ldr	r2, [pc, #120]	@ (8000298 <MX_GPIO_Init+0xc4>)
 8000220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000224:	6153      	str	r3, [r2, #20]
 8000226:	4b1c      	ldr	r3, [pc, #112]	@ (8000298 <MX_GPIO_Init+0xc4>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800022e:	60bb      	str	r3, [r7, #8]
 8000230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000232:	4b19      	ldr	r3, [pc, #100]	@ (8000298 <MX_GPIO_Init+0xc4>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	4a18      	ldr	r2, [pc, #96]	@ (8000298 <MX_GPIO_Init+0xc4>)
 8000238:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800023c:	6153      	str	r3, [r2, #20]
 800023e:	4b16      	ldr	r3, [pc, #88]	@ (8000298 <MX_GPIO_Init+0xc4>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800024a:	2200      	movs	r2, #0
 800024c:	2120      	movs	r1, #32
 800024e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000252:	f000 fd69 	bl	8000d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000256:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800025a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800025c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000262:	2300      	movs	r3, #0
 8000264:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000266:	f107 0314 	add.w	r3, r7, #20
 800026a:	4619      	mov	r1, r3
 800026c:	480b      	ldr	r0, [pc, #44]	@ (800029c <MX_GPIO_Init+0xc8>)
 800026e:	f000 fbd1 	bl	8000a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000272:	2320      	movs	r3, #32
 8000274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000276:	2301      	movs	r3, #1
 8000278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800027a:	2300      	movs	r3, #0
 800027c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800027e:	2300      	movs	r3, #0
 8000280:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000282:	f107 0314 	add.w	r3, r7, #20
 8000286:	4619      	mov	r1, r3
 8000288:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800028c:	f000 fbc2 	bl	8000a14 <HAL_GPIO_Init>

}
 8000290:	bf00      	nop
 8000292:	3728      	adds	r7, #40	@ 0x28
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	40021000 	.word	0x40021000
 800029c:	48000800 	.word	0x48000800

080002a0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002a8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002ac:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80002b0:	f003 0301 	and.w	r3, r3, #1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d013      	beq.n	80002e0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002bc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80002c0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d00b      	beq.n	80002e0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002c8:	e000      	b.n	80002cc <ITM_SendChar+0x2c>
    {
      __NOP();
 80002ca:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002cc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d0f9      	beq.n	80002ca <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002d6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002da:	687a      	ldr	r2, [r7, #4]
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002e0:	687b      	ldr	r3, [r7, #4]
}
 80002e2:	4618      	mov	r0, r3
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr

080002ee <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80002ee:	b580      	push	{r7, lr}
 80002f0:	b086      	sub	sp, #24
 80002f2:	af00      	add	r7, sp, #0
 80002f4:	60f8      	str	r0, [r7, #12]
 80002f6:	60b9      	str	r1, [r7, #8]
 80002f8:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 80002fa:	2300      	movs	r3, #0
 80002fc:	617b      	str	r3, [r7, #20]
 80002fe:	e009      	b.n	8000314 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	1c5a      	adds	r2, r3, #1
 8000304:	60ba      	str	r2, [r7, #8]
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	4618      	mov	r0, r3
 800030a:	f7ff ffc9 	bl	80002a0 <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 800030e:	697b      	ldr	r3, [r7, #20]
 8000310:	3301      	adds	r3, #1
 8000312:	617b      	str	r3, [r7, #20]
 8000314:	697a      	ldr	r2, [r7, #20]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	429a      	cmp	r2, r3
 800031a:	dbf1      	blt.n	8000300 <_write+0x12>
	}
	return len;
 800031c:	687b      	ldr	r3, [r7, #4]
}
 800031e:	4618      	mov	r0, r3
 8000320:	3718      	adds	r7, #24
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800032c:	f000 fa02 	bl	8000734 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000330:	f000 f814 	bl	800035c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000334:	f7ff ff4e 	bl	80001d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000338:	f000 f960 	bl	80005fc <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800033c:	2120      	movs	r1, #32
 800033e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000342:	f000 fd09 	bl	8000d58 <HAL_GPIO_TogglePin>
	  printf("Blink!\r\n");
 8000346:	4804      	ldr	r0, [pc, #16]	@ (8000358 <main+0x30>)
 8000348:	f002 fec8 	bl	80030dc <puts>
	  HAL_Delay(500);
 800034c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000350:	f000 fa56 	bl	8000800 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000354:	bf00      	nop
 8000356:	e7f1      	b.n	800033c <main+0x14>
 8000358:	0800381c 	.word	0x0800381c

0800035c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b0a6      	sub	sp, #152	@ 0x98
 8000360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000362:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000366:	2228      	movs	r2, #40	@ 0x28
 8000368:	2100      	movs	r1, #0
 800036a:	4618      	mov	r0, r3
 800036c:	f002 ff96 	bl	800329c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000370:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
 800037c:	60da      	str	r2, [r3, #12]
 800037e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2258      	movs	r2, #88	@ 0x58
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f002 ff88 	bl	800329c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800038c:	2302      	movs	r3, #2
 800038e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000390:	2301      	movs	r3, #1
 8000392:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000394:	2310      	movs	r3, #16
 8000396:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800039a:	2302      	movs	r3, #2
 800039c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80003a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003a8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 fce6 	bl	8000d8c <HAL_RCC_OscConfig>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003c6:	f000 f827 	bl	8000418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ca:	230f      	movs	r3, #15
 80003cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ce:	2302      	movs	r3, #2
 80003d0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003da:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003e0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80003e4:	2102      	movs	r1, #2
 80003e6:	4618      	mov	r0, r3
 80003e8:	f001 fcf4 	bl	8001dd4 <HAL_RCC_ClockConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003f2:	f000 f811 	bl	8000418 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80003f6:	2302      	movs	r3, #2
 80003f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	4618      	mov	r0, r3
 8000402:	f001 fef9 	bl	80021f8 <HAL_RCCEx_PeriphCLKConfig>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800040c:	f000 f804 	bl	8000418 <Error_Handler>
  }
}
 8000410:	bf00      	nop
 8000412:	3798      	adds	r7, #152	@ 0x98
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800041c:	b672      	cpsid	i
}
 800041e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000420:	bf00      	nop
 8000422:	e7fd      	b.n	8000420 <Error_Handler+0x8>

08000424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042a:	4b0f      	ldr	r3, [pc, #60]	@ (8000468 <HAL_MspInit+0x44>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	4a0e      	ldr	r2, [pc, #56]	@ (8000468 <HAL_MspInit+0x44>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6193      	str	r3, [r2, #24]
 8000436:	4b0c      	ldr	r3, [pc, #48]	@ (8000468 <HAL_MspInit+0x44>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000442:	4b09      	ldr	r3, [pc, #36]	@ (8000468 <HAL_MspInit+0x44>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	4a08      	ldr	r2, [pc, #32]	@ (8000468 <HAL_MspInit+0x44>)
 8000448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800044c:	61d3      	str	r3, [r2, #28]
 800044e:	4b06      	ldr	r3, [pc, #24]	@ (8000468 <HAL_MspInit+0x44>)
 8000450:	69db      	ldr	r3, [r3, #28]
 8000452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000456:	603b      	str	r3, [r7, #0]
 8000458:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800045a:	2007      	movs	r0, #7
 800045c:	f000 faa6 	bl	80009ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000460:	bf00      	nop
 8000462:	3708      	adds	r7, #8
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40021000 	.word	0x40021000

0800046c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <NMI_Handler+0x4>

08000474 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000478:	bf00      	nop
 800047a:	e7fd      	b.n	8000478 <HardFault_Handler+0x4>

0800047c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <MemManage_Handler+0x4>

08000484 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000488:	bf00      	nop
 800048a:	e7fd      	b.n	8000488 <BusFault_Handler+0x4>

0800048c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000490:	bf00      	nop
 8000492:	e7fd      	b.n	8000490 <UsageFault_Handler+0x4>

08000494 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr

080004a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr

080004be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c2:	f000 f97d 	bl	80007c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}

080004ca <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004ca:	b580      	push	{r7, lr}
 80004cc:	b086      	sub	sp, #24
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	60f8      	str	r0, [r7, #12]
 80004d2:	60b9      	str	r1, [r7, #8]
 80004d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d6:	2300      	movs	r3, #0
 80004d8:	617b      	str	r3, [r7, #20]
 80004da:	e00a      	b.n	80004f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004dc:	f3af 8000 	nop.w
 80004e0:	4601      	mov	r1, r0
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	1c5a      	adds	r2, r3, #1
 80004e6:	60ba      	str	r2, [r7, #8]
 80004e8:	b2ca      	uxtb	r2, r1
 80004ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	3301      	adds	r3, #1
 80004f0:	617b      	str	r3, [r7, #20]
 80004f2:	697a      	ldr	r2, [r7, #20]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	429a      	cmp	r2, r3
 80004f8:	dbf0      	blt.n	80004dc <_read+0x12>
  }

  return len;
 80004fa:	687b      	ldr	r3, [r7, #4]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3718      	adds	r7, #24
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800050c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000510:	4618      	mov	r0, r3
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800052c:	605a      	str	r2, [r3, #4]
  return 0;
 800052e:	2300      	movs	r3, #0
}
 8000530:	4618      	mov	r0, r3
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <_isatty>:

int _isatty(int file)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000544:	2301      	movs	r3, #1
}
 8000546:	4618      	mov	r0, r3
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr

08000552 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000552:	b480      	push	{r7}
 8000554:	b085      	sub	sp, #20
 8000556:	af00      	add	r7, sp, #0
 8000558:	60f8      	str	r0, [r7, #12]
 800055a:	60b9      	str	r1, [r7, #8]
 800055c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800055e:	2300      	movs	r3, #0
}
 8000560:	4618      	mov	r0, r3
 8000562:	3714      	adds	r7, #20
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000574:	4a14      	ldr	r2, [pc, #80]	@ (80005c8 <_sbrk+0x5c>)
 8000576:	4b15      	ldr	r3, [pc, #84]	@ (80005cc <_sbrk+0x60>)
 8000578:	1ad3      	subs	r3, r2, r3
 800057a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000580:	4b13      	ldr	r3, [pc, #76]	@ (80005d0 <_sbrk+0x64>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d102      	bne.n	800058e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000588:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <_sbrk+0x64>)
 800058a:	4a12      	ldr	r2, [pc, #72]	@ (80005d4 <_sbrk+0x68>)
 800058c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800058e:	4b10      	ldr	r3, [pc, #64]	@ (80005d0 <_sbrk+0x64>)
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4413      	add	r3, r2
 8000596:	693a      	ldr	r2, [r7, #16]
 8000598:	429a      	cmp	r2, r3
 800059a:	d207      	bcs.n	80005ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800059c:	f002 fecc 	bl	8003338 <__errno>
 80005a0:	4603      	mov	r3, r0
 80005a2:	220c      	movs	r2, #12
 80005a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005aa:	e009      	b.n	80005c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005ac:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <_sbrk+0x64>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005b2:	4b07      	ldr	r3, [pc, #28]	@ (80005d0 <_sbrk+0x64>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4413      	add	r3, r2
 80005ba:	4a05      	ldr	r2, [pc, #20]	@ (80005d0 <_sbrk+0x64>)
 80005bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005be:	68fb      	ldr	r3, [r7, #12]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20010000 	.word	0x20010000
 80005cc:	00000400 	.word	0x00000400
 80005d0:	20000084 	.word	0x20000084
 80005d4:	20000260 	.word	0x20000260

080005d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005dc:	4b06      	ldr	r3, [pc, #24]	@ (80005f8 <SystemInit+0x20>)
 80005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005e2:	4a05      	ldr	r2, [pc, #20]	@ (80005f8 <SystemInit+0x20>)
 80005e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	e000ed00 	.word	0xe000ed00

080005fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000600:	4b14      	ldr	r3, [pc, #80]	@ (8000654 <MX_USART2_UART_Init+0x58>)
 8000602:	4a15      	ldr	r2, [pc, #84]	@ (8000658 <MX_USART2_UART_Init+0x5c>)
 8000604:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000606:	4b13      	ldr	r3, [pc, #76]	@ (8000654 <MX_USART2_UART_Init+0x58>)
 8000608:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800060c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800060e:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <MX_USART2_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000614:	4b0f      	ldr	r3, [pc, #60]	@ (8000654 <MX_USART2_UART_Init+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800061a:	4b0e      	ldr	r3, [pc, #56]	@ (8000654 <MX_USART2_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000620:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <MX_USART2_UART_Init+0x58>)
 8000622:	220c      	movs	r2, #12
 8000624:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000626:	4b0b      	ldr	r3, [pc, #44]	@ (8000654 <MX_USART2_UART_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800062c:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <MX_USART2_UART_Init+0x58>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000632:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <MX_USART2_UART_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000638:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <MX_USART2_UART_Init+0x58>)
 800063a:	2200      	movs	r2, #0
 800063c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800063e:	4805      	ldr	r0, [pc, #20]	@ (8000654 <MX_USART2_UART_Init+0x58>)
 8000640:	f001 fff6 	bl	8002630 <HAL_UART_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800064a:	f7ff fee5 	bl	8000418 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000088 	.word	0x20000088
 8000658:	40004400 	.word	0x40004400

0800065c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	@ 0x28
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a17      	ldr	r2, [pc, #92]	@ (80006d8 <HAL_UART_MspInit+0x7c>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d128      	bne.n	80006d0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800067e:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <HAL_UART_MspInit+0x80>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	4a16      	ldr	r2, [pc, #88]	@ (80006dc <HAL_UART_MspInit+0x80>)
 8000684:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000688:	61d3      	str	r3, [r2, #28]
 800068a:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <HAL_UART_MspInit+0x80>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <HAL_UART_MspInit+0x80>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	4a10      	ldr	r2, [pc, #64]	@ (80006dc <HAL_UART_MspInit+0x80>)
 800069c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006a0:	6153      	str	r3, [r2, #20]
 80006a2:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <HAL_UART_MspInit+0x80>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006ae:	230c      	movs	r3, #12
 80006b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b2:	2302      	movs	r3, #2
 80006b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ba:	2300      	movs	r3, #0
 80006bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006be:	2307      	movs	r3, #7
 80006c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4619      	mov	r1, r3
 80006c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006cc:	f000 f9a2 	bl	8000a14 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80006d0:	bf00      	nop
 80006d2:	3728      	adds	r7, #40	@ 0x28
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40004400 	.word	0x40004400
 80006dc:	40021000 	.word	0x40021000

080006e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000718 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006e4:	f7ff ff78 	bl	80005d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e8:	480c      	ldr	r0, [pc, #48]	@ (800071c <LoopForever+0x6>)
  ldr r1, =_edata
 80006ea:	490d      	ldr	r1, [pc, #52]	@ (8000720 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000724 <LoopForever+0xe>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f0:	e002      	b.n	80006f8 <LoopCopyDataInit>

080006f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f6:	3304      	adds	r3, #4

080006f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006fc:	d3f9      	bcc.n	80006f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000728 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000700:	4c0a      	ldr	r4, [pc, #40]	@ (800072c <LoopForever+0x16>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000704:	e001      	b.n	800070a <LoopFillZerobss>

08000706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000708:	3204      	adds	r2, #4

0800070a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800070c:	d3fb      	bcc.n	8000706 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800070e:	f002 fe19 	bl	8003344 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000712:	f7ff fe09 	bl	8000328 <main>

08000716 <LoopForever>:

LoopForever:
    b LoopForever
 8000716:	e7fe      	b.n	8000716 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000718:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800071c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000720:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000724:	08003864 	.word	0x08003864
  ldr r2, =_sbss
 8000728:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800072c:	20000260 	.word	0x20000260

08000730 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000730:	e7fe      	b.n	8000730 <ADC1_2_IRQHandler>
	...

08000734 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000738:	4b08      	ldr	r3, [pc, #32]	@ (800075c <HAL_Init+0x28>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a07      	ldr	r2, [pc, #28]	@ (800075c <HAL_Init+0x28>)
 800073e:	f043 0310 	orr.w	r3, r3, #16
 8000742:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000744:	2003      	movs	r0, #3
 8000746:	f000 f931 	bl	80009ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800074a:	2000      	movs	r0, #0
 800074c:	f000 f808 	bl	8000760 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000750:	f7ff fe68 	bl	8000424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40022000 	.word	0x40022000

08000760 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000768:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <HAL_InitTick+0x54>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <HAL_InitTick+0x58>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	4619      	mov	r1, r3
 8000772:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000776:	fbb3 f3f1 	udiv	r3, r3, r1
 800077a:	fbb2 f3f3 	udiv	r3, r2, r3
 800077e:	4618      	mov	r0, r3
 8000780:	f000 f93b 	bl	80009fa <HAL_SYSTICK_Config>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800078a:	2301      	movs	r3, #1
 800078c:	e00e      	b.n	80007ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2b0f      	cmp	r3, #15
 8000792:	d80a      	bhi.n	80007aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000794:	2200      	movs	r2, #0
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800079c:	f000 f911 	bl	80009c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007a0:	4a06      	ldr	r2, [pc, #24]	@ (80007bc <HAL_InitTick+0x5c>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007a6:	2300      	movs	r3, #0
 80007a8:	e000      	b.n	80007ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000000 	.word	0x20000000
 80007b8:	20000008 	.word	0x20000008
 80007bc:	20000004 	.word	0x20000004

080007c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <HAL_IncTick+0x20>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <HAL_IncTick+0x24>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4413      	add	r3, r2
 80007d0:	4a04      	ldr	r2, [pc, #16]	@ (80007e4 <HAL_IncTick+0x24>)
 80007d2:	6013      	str	r3, [r2, #0]
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	20000008 	.word	0x20000008
 80007e4:	20000110 	.word	0x20000110

080007e8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  return uwTick;  
 80007ec:	4b03      	ldr	r3, [pc, #12]	@ (80007fc <HAL_GetTick+0x14>)
 80007ee:	681b      	ldr	r3, [r3, #0]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	20000110 	.word	0x20000110

08000800 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000808:	f7ff ffee 	bl	80007e8 <HAL_GetTick>
 800080c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000818:	d005      	beq.n	8000826 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800081a:	4b0a      	ldr	r3, [pc, #40]	@ (8000844 <HAL_Delay+0x44>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	461a      	mov	r2, r3
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	4413      	add	r3, r2
 8000824:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000826:	bf00      	nop
 8000828:	f7ff ffde 	bl	80007e8 <HAL_GetTick>
 800082c:	4602      	mov	r2, r0
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	68fa      	ldr	r2, [r7, #12]
 8000834:	429a      	cmp	r2, r3
 8000836:	d8f7      	bhi.n	8000828 <HAL_Delay+0x28>
  {
  }
}
 8000838:	bf00      	nop
 800083a:	bf00      	nop
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000008 	.word	0x20000008

08000848 <__NVIC_SetPriorityGrouping>:
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <__NVIC_SetPriorityGrouping+0x44>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800085e:	68ba      	ldr	r2, [r7, #8]
 8000860:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000864:	4013      	ands	r3, r2
 8000866:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000870:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800087a:	4a04      	ldr	r2, [pc, #16]	@ (800088c <__NVIC_SetPriorityGrouping+0x44>)
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	60d3      	str	r3, [r2, #12]
}
 8000880:	bf00      	nop
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <__NVIC_GetPriorityGrouping>:
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000894:	4b04      	ldr	r3, [pc, #16]	@ (80008a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	0a1b      	lsrs	r3, r3, #8
 800089a:	f003 0307 	and.w	r3, r3, #7
}
 800089e:	4618      	mov	r0, r3
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <__NVIC_SetPriority>:
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	6039      	str	r1, [r7, #0]
 80008b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	db0a      	blt.n	80008d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	490c      	ldr	r1, [pc, #48]	@ (80008f8 <__NVIC_SetPriority+0x4c>)
 80008c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ca:	0112      	lsls	r2, r2, #4
 80008cc:	b2d2      	uxtb	r2, r2
 80008ce:	440b      	add	r3, r1
 80008d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80008d4:	e00a      	b.n	80008ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4908      	ldr	r1, [pc, #32]	@ (80008fc <__NVIC_SetPriority+0x50>)
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	f003 030f 	and.w	r3, r3, #15
 80008e2:	3b04      	subs	r3, #4
 80008e4:	0112      	lsls	r2, r2, #4
 80008e6:	b2d2      	uxtb	r2, r2
 80008e8:	440b      	add	r3, r1
 80008ea:	761a      	strb	r2, [r3, #24]
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	e000e100 	.word	0xe000e100
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <NVIC_EncodePriority>:
{
 8000900:	b480      	push	{r7}
 8000902:	b089      	sub	sp, #36	@ 0x24
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	f003 0307 	and.w	r3, r3, #7
 8000912:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	f1c3 0307 	rsb	r3, r3, #7
 800091a:	2b04      	cmp	r3, #4
 800091c:	bf28      	it	cs
 800091e:	2304      	movcs	r3, #4
 8000920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	3304      	adds	r3, #4
 8000926:	2b06      	cmp	r3, #6
 8000928:	d902      	bls.n	8000930 <NVIC_EncodePriority+0x30>
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	3b03      	subs	r3, #3
 800092e:	e000      	b.n	8000932 <NVIC_EncodePriority+0x32>
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000934:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	43da      	mvns	r2, r3
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	401a      	ands	r2, r3
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000948:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	fa01 f303 	lsl.w	r3, r1, r3
 8000952:	43d9      	mvns	r1, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000958:	4313      	orrs	r3, r2
}
 800095a:	4618      	mov	r0, r3
 800095c:	3724      	adds	r7, #36	@ 0x24
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
	...

08000968 <SysTick_Config>:
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3b01      	subs	r3, #1
 8000974:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000978:	d301      	bcc.n	800097e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800097a:	2301      	movs	r3, #1
 800097c:	e00f      	b.n	800099e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800097e:	4a0a      	ldr	r2, [pc, #40]	@ (80009a8 <SysTick_Config+0x40>)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3b01      	subs	r3, #1
 8000984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000986:	210f      	movs	r1, #15
 8000988:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800098c:	f7ff ff8e 	bl	80008ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000990:	4b05      	ldr	r3, [pc, #20]	@ (80009a8 <SysTick_Config+0x40>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000996:	4b04      	ldr	r3, [pc, #16]	@ (80009a8 <SysTick_Config+0x40>)
 8000998:	2207      	movs	r2, #7
 800099a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	e000e010 	.word	0xe000e010

080009ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ff47 	bl	8000848 <__NVIC_SetPriorityGrouping>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b086      	sub	sp, #24
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	4603      	mov	r3, r0
 80009ca:	60b9      	str	r1, [r7, #8]
 80009cc:	607a      	str	r2, [r7, #4]
 80009ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009d4:	f7ff ff5c 	bl	8000890 <__NVIC_GetPriorityGrouping>
 80009d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	68b9      	ldr	r1, [r7, #8]
 80009de:	6978      	ldr	r0, [r7, #20]
 80009e0:	f7ff ff8e 	bl	8000900 <NVIC_EncodePriority>
 80009e4:	4602      	mov	r2, r0
 80009e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ea:	4611      	mov	r1, r2
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff5d 	bl	80008ac <__NVIC_SetPriority>
}
 80009f2:	bf00      	nop
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff ffb0 	bl	8000968 <SysTick_Config>
 8000a08:	4603      	mov	r3, r0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b087      	sub	sp, #28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a22:	e160      	b.n	8000ce6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	2101      	movs	r1, #1
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a30:	4013      	ands	r3, r2
 8000a32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f000 8152 	beq.w	8000ce0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f003 0303 	and.w	r3, r3, #3
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d005      	beq.n	8000a54 <HAL_GPIO_Init+0x40>
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f003 0303 	and.w	r3, r3, #3
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d130      	bne.n	8000ab6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	689b      	ldr	r3, [r3, #8]
 8000a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	2203      	movs	r2, #3
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	43db      	mvns	r3, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	68da      	ldr	r2, [r3, #12]
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43db      	mvns	r3, r3
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	4013      	ands	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	091b      	lsrs	r3, r3, #4
 8000aa0:	f003 0201 	and.w	r2, r3, #1
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f003 0303 	and.w	r3, r3, #3
 8000abe:	2b03      	cmp	r3, #3
 8000ac0:	d017      	beq.n	8000af2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	2203      	movs	r2, #3
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	689a      	ldr	r2, [r3, #8]
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f003 0303 	and.w	r3, r3, #3
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d123      	bne.n	8000b46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	08da      	lsrs	r2, r3, #3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	3208      	adds	r2, #8
 8000b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	220f      	movs	r2, #15
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	691a      	ldr	r2, [r3, #16]
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	f003 0307 	and.w	r3, r3, #7
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	08da      	lsrs	r2, r3, #3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3208      	adds	r2, #8
 8000b40:	6939      	ldr	r1, [r7, #16]
 8000b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	2203      	movs	r2, #3
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 0203 	and.w	r2, r3, #3
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f000 80ac 	beq.w	8000ce0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b88:	4b5e      	ldr	r3, [pc, #376]	@ (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a5d      	ldr	r2, [pc, #372]	@ (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b5b      	ldr	r3, [pc, #364]	@ (8000d04 <HAL_GPIO_Init+0x2f0>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ba0:	4a59      	ldr	r2, [pc, #356]	@ (8000d08 <HAL_GPIO_Init+0x2f4>)
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	089b      	lsrs	r3, r3, #2
 8000ba6:	3302      	adds	r3, #2
 8000ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	f003 0303 	and.w	r3, r3, #3
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	220f      	movs	r2, #15
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000bca:	d025      	beq.n	8000c18 <HAL_GPIO_Init+0x204>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a4f      	ldr	r2, [pc, #316]	@ (8000d0c <HAL_GPIO_Init+0x2f8>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d01f      	beq.n	8000c14 <HAL_GPIO_Init+0x200>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a4e      	ldr	r2, [pc, #312]	@ (8000d10 <HAL_GPIO_Init+0x2fc>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d019      	beq.n	8000c10 <HAL_GPIO_Init+0x1fc>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a4d      	ldr	r2, [pc, #308]	@ (8000d14 <HAL_GPIO_Init+0x300>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d013      	beq.n	8000c0c <HAL_GPIO_Init+0x1f8>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a4c      	ldr	r2, [pc, #304]	@ (8000d18 <HAL_GPIO_Init+0x304>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d00d      	beq.n	8000c08 <HAL_GPIO_Init+0x1f4>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a4b      	ldr	r2, [pc, #300]	@ (8000d1c <HAL_GPIO_Init+0x308>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d007      	beq.n	8000c04 <HAL_GPIO_Init+0x1f0>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a4a      	ldr	r2, [pc, #296]	@ (8000d20 <HAL_GPIO_Init+0x30c>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d101      	bne.n	8000c00 <HAL_GPIO_Init+0x1ec>
 8000bfc:	2306      	movs	r3, #6
 8000bfe:	e00c      	b.n	8000c1a <HAL_GPIO_Init+0x206>
 8000c00:	2307      	movs	r3, #7
 8000c02:	e00a      	b.n	8000c1a <HAL_GPIO_Init+0x206>
 8000c04:	2305      	movs	r3, #5
 8000c06:	e008      	b.n	8000c1a <HAL_GPIO_Init+0x206>
 8000c08:	2304      	movs	r3, #4
 8000c0a:	e006      	b.n	8000c1a <HAL_GPIO_Init+0x206>
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	e004      	b.n	8000c1a <HAL_GPIO_Init+0x206>
 8000c10:	2302      	movs	r3, #2
 8000c12:	e002      	b.n	8000c1a <HAL_GPIO_Init+0x206>
 8000c14:	2301      	movs	r3, #1
 8000c16:	e000      	b.n	8000c1a <HAL_GPIO_Init+0x206>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	f002 0203 	and.w	r2, r2, #3
 8000c20:	0092      	lsls	r2, r2, #2
 8000c22:	4093      	lsls	r3, r2
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c2a:	4937      	ldr	r1, [pc, #220]	@ (8000d08 <HAL_GPIO_Init+0x2f4>)
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	089b      	lsrs	r3, r3, #2
 8000c30:	3302      	adds	r3, #2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c38:	4b3a      	ldr	r3, [pc, #232]	@ (8000d24 <HAL_GPIO_Init+0x310>)
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	43db      	mvns	r3, r3
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d003      	beq.n	8000c5c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c5c:	4a31      	ldr	r2, [pc, #196]	@ (8000d24 <HAL_GPIO_Init+0x310>)
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c62:	4b30      	ldr	r3, [pc, #192]	@ (8000d24 <HAL_GPIO_Init+0x310>)
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c86:	4a27      	ldr	r2, [pc, #156]	@ (8000d24 <HAL_GPIO_Init+0x310>)
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c8c:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <HAL_GPIO_Init+0x310>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	43db      	mvns	r3, r3
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d003      	beq.n	8000cb0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cb0:	4a1c      	ldr	r2, [pc, #112]	@ (8000d24 <HAL_GPIO_Init+0x310>)
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d24 <HAL_GPIO_Init+0x310>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d003      	beq.n	8000cda <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cda:	4a12      	ldr	r2, [pc, #72]	@ (8000d24 <HAL_GPIO_Init+0x310>)
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	fa22 f303 	lsr.w	r3, r2, r3
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	f47f ae97 	bne.w	8000a24 <HAL_GPIO_Init+0x10>
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	bf00      	nop
 8000cfa:	371c      	adds	r7, #28
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40010000 	.word	0x40010000
 8000d0c:	48000400 	.word	0x48000400
 8000d10:	48000800 	.word	0x48000800
 8000d14:	48000c00 	.word	0x48000c00
 8000d18:	48001000 	.word	0x48001000
 8000d1c:	48001400 	.word	0x48001400
 8000d20:	48001800 	.word	0x48001800
 8000d24:	40010400 	.word	0x40010400

08000d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	807b      	strh	r3, [r7, #2]
 8000d34:	4613      	mov	r3, r2
 8000d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d38:	787b      	ldrb	r3, [r7, #1]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d3e:	887a      	ldrh	r2, [r7, #2]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d44:	e002      	b.n	8000d4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d46:	887a      	ldrh	r2, [r7, #2]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	695b      	ldr	r3, [r3, #20]
 8000d68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d6a:	887a      	ldrh	r2, [r7, #2]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	041a      	lsls	r2, r3, #16
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	43d9      	mvns	r1, r3
 8000d76:	887b      	ldrh	r3, [r7, #2]
 8000d78:	400b      	ands	r3, r1
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	619a      	str	r2, [r3, #24]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d98:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d9c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000da2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d102      	bne.n	8000db2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	f001 b80a 	b.w	8001dc6 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000db2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000db6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f000 8161 	beq.w	800108a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dc8:	4bae      	ldr	r3, [pc, #696]	@ (8001084 <HAL_RCC_OscConfig+0x2f8>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f003 030c 	and.w	r3, r3, #12
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d00c      	beq.n	8000dee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dd4:	4bab      	ldr	r3, [pc, #684]	@ (8001084 <HAL_RCC_OscConfig+0x2f8>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 030c 	and.w	r3, r3, #12
 8000ddc:	2b08      	cmp	r3, #8
 8000dde:	d157      	bne.n	8000e90 <HAL_RCC_OscConfig+0x104>
 8000de0:	4ba8      	ldr	r3, [pc, #672]	@ (8001084 <HAL_RCC_OscConfig+0x2f8>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dec:	d150      	bne.n	8000e90 <HAL_RCC_OscConfig+0x104>
 8000dee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000df2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000dfa:	fa93 f3a3 	rbit	r3, r3
 8000dfe:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e02:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e06:	fab3 f383 	clz	r3, r3
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e0e:	d802      	bhi.n	8000e16 <HAL_RCC_OscConfig+0x8a>
 8000e10:	4b9c      	ldr	r3, [pc, #624]	@ (8001084 <HAL_RCC_OscConfig+0x2f8>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	e015      	b.n	8000e42 <HAL_RCC_OscConfig+0xb6>
 8000e16:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e1a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e1e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000e22:	fa93 f3a3 	rbit	r3, r3
 8000e26:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000e2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e2e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000e32:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000e36:	fa93 f3a3 	rbit	r3, r3
 8000e3a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000e3e:	4b91      	ldr	r3, [pc, #580]	@ (8001084 <HAL_RCC_OscConfig+0x2f8>)
 8000e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e42:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e46:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000e4a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000e4e:	fa92 f2a2 	rbit	r2, r2
 8000e52:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000e56:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000e5a:	fab2 f282 	clz	r2, r2
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	f042 0220 	orr.w	r2, r2, #32
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	f002 021f 	and.w	r2, r2, #31
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e70:	4013      	ands	r3, r2
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f000 8108 	beq.w	8001088 <HAL_RCC_OscConfig+0x2fc>
 8000e78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e7c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f040 80ff 	bne.w	8001088 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	f000 bf9b 	b.w	8001dc6 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e94:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ea0:	d106      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x124>
 8000ea2:	4b78      	ldr	r3, [pc, #480]	@ (8001084 <HAL_RCC_OscConfig+0x2f8>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a77      	ldr	r2, [pc, #476]	@ (8001084 <HAL_RCC_OscConfig+0x2f8>)
 8000ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	e036      	b.n	8000f1e <HAL_RCC_OscConfig+0x192>
 8000eb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000eb4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d10c      	bne.n	8000eda <HAL_RCC_OscConfig+0x14e>
 8000ec0:	4b70      	ldr	r3, [pc, #448]	@ (8001084 <HAL_RCC_OscConfig+0x2f8>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a6f      	ldr	r2, [pc, #444]	@ (8001084 <HAL_RCC_OscConfig+0x2f8>)
 8000ec6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	4b6d      	ldr	r3, [pc, #436]	@ (8001084 <HAL_RCC_OscConfig+0x2f8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a6c      	ldr	r2, [pc, #432]	@ (8001084 <HAL_RCC_OscConfig+0x2f8>)
 8000ed2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	e021      	b.n	8000f1e <HAL_RCC_OscConfig+0x192>
 8000eda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ede:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000eea:	d10c      	bne.n	8000f06 <HAL_RCC_OscConfig+0x17a>
 8000eec:	4b65      	ldr	r3, [pc, #404]	@ (8001084 <HAL_RCC_OscConfig+0x2f8>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a64      	ldr	r2, [pc, #400]	@ (8001084 <HAL_RCC_OscConfig+0x2f8>)
 8000ef2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	4b62      	ldr	r3, [pc, #392]	@ (8001084 <HAL_RCC_OscConfig+0x2f8>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a61      	ldr	r2, [pc, #388]	@ (8001084 <HAL_RCC_OscConfig+0x2f8>)
 8000efe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	e00b      	b.n	8000f1e <HAL_RCC_OscConfig+0x192>
 8000f06:	4b5f      	ldr	r3, [pc, #380]	@ (8001084 <HAL_RCC_OscConfig+0x2f8>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a5e      	ldr	r2, [pc, #376]	@ (8001084 <HAL_RCC_OscConfig+0x2f8>)
 8000f0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	4b5c      	ldr	r3, [pc, #368]	@ (8001084 <HAL_RCC_OscConfig+0x2f8>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a5b      	ldr	r2, [pc, #364]	@ (8001084 <HAL_RCC_OscConfig+0x2f8>)
 8000f18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f1c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f22:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d054      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2e:	f7ff fc5b 	bl	80007e8 <HAL_GetTick>
 8000f32:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f36:	e00a      	b.n	8000f4e <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f38:	f7ff fc56 	bl	80007e8 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2b64      	cmp	r3, #100	@ 0x64
 8000f46:	d902      	bls.n	8000f4e <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	f000 bf3c 	b.w	8001dc6 <HAL_RCC_OscConfig+0x103a>
 8000f4e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f52:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f56:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000f5a:	fa93 f3a3 	rbit	r3, r3
 8000f5e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000f62:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f66:	fab3 f383 	clz	r3, r3
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f6e:	d802      	bhi.n	8000f76 <HAL_RCC_OscConfig+0x1ea>
 8000f70:	4b44      	ldr	r3, [pc, #272]	@ (8001084 <HAL_RCC_OscConfig+0x2f8>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	e015      	b.n	8000fa2 <HAL_RCC_OscConfig+0x216>
 8000f76:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f7a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000f82:	fa93 f3a3 	rbit	r3, r3
 8000f86:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000f8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f8e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000f92:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000f96:	fa93 f3a3 	rbit	r3, r3
 8000f9a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000f9e:	4b39      	ldr	r3, [pc, #228]	@ (8001084 <HAL_RCC_OscConfig+0x2f8>)
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000fa6:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000faa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000fae:	fa92 f2a2 	rbit	r2, r2
 8000fb2:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8000fb6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000fba:	fab2 f282 	clz	r2, r2
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	f042 0220 	orr.w	r2, r2, #32
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	f002 021f 	and.w	r2, r2, #31
 8000fca:	2101      	movs	r1, #1
 8000fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d0b0      	beq.n	8000f38 <HAL_RCC_OscConfig+0x1ac>
 8000fd6:	e058      	b.n	800108a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd8:	f7ff fc06 	bl	80007e8 <HAL_GetTick>
 8000fdc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe0:	e00a      	b.n	8000ff8 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe2:	f7ff fc01 	bl	80007e8 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b64      	cmp	r3, #100	@ 0x64
 8000ff0:	d902      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	f000 bee7 	b.w	8001dc6 <HAL_RCC_OscConfig+0x103a>
 8000ff8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ffc:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001000:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001004:	fa93 f3a3 	rbit	r3, r3
 8001008:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 800100c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001010:	fab3 f383 	clz	r3, r3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b3f      	cmp	r3, #63	@ 0x3f
 8001018:	d802      	bhi.n	8001020 <HAL_RCC_OscConfig+0x294>
 800101a:	4b1a      	ldr	r3, [pc, #104]	@ (8001084 <HAL_RCC_OscConfig+0x2f8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	e015      	b.n	800104c <HAL_RCC_OscConfig+0x2c0>
 8001020:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001024:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001028:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800102c:	fa93 f3a3 	rbit	r3, r3
 8001030:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001034:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001038:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800103c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001040:	fa93 f3a3 	rbit	r3, r3
 8001044:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001048:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <HAL_RCC_OscConfig+0x2f8>)
 800104a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800104c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001050:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001054:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001058:	fa92 f2a2 	rbit	r2, r2
 800105c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001060:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001064:	fab2 f282 	clz	r2, r2
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	f042 0220 	orr.w	r2, r2, #32
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	f002 021f 	and.w	r2, r2, #31
 8001074:	2101      	movs	r1, #1
 8001076:	fa01 f202 	lsl.w	r2, r1, r2
 800107a:	4013      	ands	r3, r2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1b0      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x256>
 8001080:	e003      	b.n	800108a <HAL_RCC_OscConfig+0x2fe>
 8001082:	bf00      	nop
 8001084:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800108a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800108e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 816d 	beq.w	800137a <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010a0:	4bcd      	ldr	r3, [pc, #820]	@ (80013d8 <HAL_RCC_OscConfig+0x64c>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 030c 	and.w	r3, r3, #12
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00c      	beq.n	80010c6 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010ac:	4bca      	ldr	r3, [pc, #808]	@ (80013d8 <HAL_RCC_OscConfig+0x64c>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 030c 	and.w	r3, r3, #12
 80010b4:	2b08      	cmp	r3, #8
 80010b6:	d16e      	bne.n	8001196 <HAL_RCC_OscConfig+0x40a>
 80010b8:	4bc7      	ldr	r3, [pc, #796]	@ (80013d8 <HAL_RCC_OscConfig+0x64c>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80010c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80010c4:	d167      	bne.n	8001196 <HAL_RCC_OscConfig+0x40a>
 80010c6:	2302      	movs	r3, #2
 80010c8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010cc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80010d0:	fa93 f3a3 	rbit	r3, r3
 80010d4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80010d8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010dc:	fab3 f383 	clz	r3, r3
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80010e4:	d802      	bhi.n	80010ec <HAL_RCC_OscConfig+0x360>
 80010e6:	4bbc      	ldr	r3, [pc, #752]	@ (80013d8 <HAL_RCC_OscConfig+0x64c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	e013      	b.n	8001114 <HAL_RCC_OscConfig+0x388>
 80010ec:	2302      	movs	r3, #2
 80010ee:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80010f6:	fa93 f3a3 	rbit	r3, r3
 80010fa:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80010fe:	2302      	movs	r3, #2
 8001100:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001104:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001108:	fa93 f3a3 	rbit	r3, r3
 800110c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001110:	4bb1      	ldr	r3, [pc, #708]	@ (80013d8 <HAL_RCC_OscConfig+0x64c>)
 8001112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001114:	2202      	movs	r2, #2
 8001116:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800111a:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800111e:	fa92 f2a2 	rbit	r2, r2
 8001122:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001126:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800112a:	fab2 f282 	clz	r2, r2
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	f042 0220 	orr.w	r2, r2, #32
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	f002 021f 	and.w	r2, r2, #31
 800113a:	2101      	movs	r1, #1
 800113c:	fa01 f202 	lsl.w	r2, r1, r2
 8001140:	4013      	ands	r3, r2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d00a      	beq.n	800115c <HAL_RCC_OscConfig+0x3d0>
 8001146:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800114a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d002      	beq.n	800115c <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	f000 be35 	b.w	8001dc6 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115c:	4b9e      	ldr	r3, [pc, #632]	@ (80013d8 <HAL_RCC_OscConfig+0x64c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001164:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001168:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	21f8      	movs	r1, #248	@ 0xf8
 8001172:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001176:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 800117a:	fa91 f1a1 	rbit	r1, r1
 800117e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001182:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001186:	fab1 f181 	clz	r1, r1
 800118a:	b2c9      	uxtb	r1, r1
 800118c:	408b      	lsls	r3, r1
 800118e:	4992      	ldr	r1, [pc, #584]	@ (80013d8 <HAL_RCC_OscConfig+0x64c>)
 8001190:	4313      	orrs	r3, r2
 8001192:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001194:	e0f1      	b.n	800137a <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001196:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800119a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 8083 	beq.w	80012ae <HAL_RCC_OscConfig+0x522>
 80011a8:	2301      	movs	r3, #1
 80011aa:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ae:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80011b2:	fa93 f3a3 	rbit	r3, r3
 80011b6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80011ba:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011be:	fab3 f383 	clz	r3, r3
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80011c8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	461a      	mov	r2, r3
 80011d0:	2301      	movs	r3, #1
 80011d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fb08 	bl	80007e8 <HAL_GetTick>
 80011d8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011dc:	e00a      	b.n	80011f4 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011de:	f7ff fb03 	bl	80007e8 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d902      	bls.n	80011f4 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	f000 bde9 	b.w	8001dc6 <HAL_RCC_OscConfig+0x103a>
 80011f4:	2302      	movs	r3, #2
 80011f6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80011fe:	fa93 f3a3 	rbit	r3, r3
 8001202:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001206:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120a:	fab3 f383 	clz	r3, r3
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b3f      	cmp	r3, #63	@ 0x3f
 8001212:	d802      	bhi.n	800121a <HAL_RCC_OscConfig+0x48e>
 8001214:	4b70      	ldr	r3, [pc, #448]	@ (80013d8 <HAL_RCC_OscConfig+0x64c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	e013      	b.n	8001242 <HAL_RCC_OscConfig+0x4b6>
 800121a:	2302      	movs	r3, #2
 800121c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001224:	fa93 f3a3 	rbit	r3, r3
 8001228:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800122c:	2302      	movs	r3, #2
 800122e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001232:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001236:	fa93 f3a3 	rbit	r3, r3
 800123a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800123e:	4b66      	ldr	r3, [pc, #408]	@ (80013d8 <HAL_RCC_OscConfig+0x64c>)
 8001240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001242:	2202      	movs	r2, #2
 8001244:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001248:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800124c:	fa92 f2a2 	rbit	r2, r2
 8001250:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001254:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001258:	fab2 f282 	clz	r2, r2
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	f042 0220 	orr.w	r2, r2, #32
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	f002 021f 	and.w	r2, r2, #31
 8001268:	2101      	movs	r1, #1
 800126a:	fa01 f202 	lsl.w	r2, r1, r2
 800126e:	4013      	ands	r3, r2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0b4      	beq.n	80011de <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001274:	4b58      	ldr	r3, [pc, #352]	@ (80013d8 <HAL_RCC_OscConfig+0x64c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800127c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001280:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	21f8      	movs	r1, #248	@ 0xf8
 800128a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001292:	fa91 f1a1 	rbit	r1, r1
 8001296:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800129a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800129e:	fab1 f181 	clz	r1, r1
 80012a2:	b2c9      	uxtb	r1, r1
 80012a4:	408b      	lsls	r3, r1
 80012a6:	494c      	ldr	r1, [pc, #304]	@ (80013d8 <HAL_RCC_OscConfig+0x64c>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
 80012ac:	e065      	b.n	800137a <HAL_RCC_OscConfig+0x5ee>
 80012ae:	2301      	movs	r3, #1
 80012b0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80012b8:	fa93 f3a3 	rbit	r3, r3
 80012bc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80012c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012c4:	fab3 f383 	clz	r3, r3
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80012ce:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	461a      	mov	r2, r3
 80012d6:	2300      	movs	r3, #0
 80012d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012da:	f7ff fa85 	bl	80007e8 <HAL_GetTick>
 80012de:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e2:	e00a      	b.n	80012fa <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e4:	f7ff fa80 	bl	80007e8 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d902      	bls.n	80012fa <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	f000 bd66 	b.w	8001dc6 <HAL_RCC_OscConfig+0x103a>
 80012fa:	2302      	movs	r3, #2
 80012fc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001300:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001304:	fa93 f3a3 	rbit	r3, r3
 8001308:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 800130c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001310:	fab3 f383 	clz	r3, r3
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b3f      	cmp	r3, #63	@ 0x3f
 8001318:	d802      	bhi.n	8001320 <HAL_RCC_OscConfig+0x594>
 800131a:	4b2f      	ldr	r3, [pc, #188]	@ (80013d8 <HAL_RCC_OscConfig+0x64c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	e013      	b.n	8001348 <HAL_RCC_OscConfig+0x5bc>
 8001320:	2302      	movs	r3, #2
 8001322:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001326:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001332:	2302      	movs	r3, #2
 8001334:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001338:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800133c:	fa93 f3a3 	rbit	r3, r3
 8001340:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001344:	4b24      	ldr	r3, [pc, #144]	@ (80013d8 <HAL_RCC_OscConfig+0x64c>)
 8001346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001348:	2202      	movs	r2, #2
 800134a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800134e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001352:	fa92 f2a2 	rbit	r2, r2
 8001356:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800135a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800135e:	fab2 f282 	clz	r2, r2
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	f042 0220 	orr.w	r2, r2, #32
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	f002 021f 	and.w	r2, r2, #31
 800136e:	2101      	movs	r1, #1
 8001370:	fa01 f202 	lsl.w	r2, r1, r2
 8001374:	4013      	ands	r3, r2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1b4      	bne.n	80012e4 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800137a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800137e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 8119 	beq.w	80015c2 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001390:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001394:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 8082 	beq.w	80014a6 <HAL_RCC_OscConfig+0x71a>
 80013a2:	2301      	movs	r3, #1
 80013a4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80013ac:	fa93 f3a3 	rbit	r3, r3
 80013b0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80013b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013b8:	fab3 f383 	clz	r3, r3
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	461a      	mov	r2, r3
 80013c0:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <HAL_RCC_OscConfig+0x650>)
 80013c2:	4413      	add	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	461a      	mov	r2, r3
 80013c8:	2301      	movs	r3, #1
 80013ca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013cc:	f7ff fa0c 	bl	80007e8 <HAL_GetTick>
 80013d0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d4:	e00f      	b.n	80013f6 <HAL_RCC_OscConfig+0x66a>
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000
 80013dc:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e0:	f7ff fa02 	bl	80007e8 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d902      	bls.n	80013f6 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	f000 bce8 	b.w	8001dc6 <HAL_RCC_OscConfig+0x103a>
 80013f6:	2302      	movs	r3, #2
 80013f8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001400:	fa93 f2a3 	rbit	r2, r3
 8001404:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001408:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001412:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001416:	2202      	movs	r2, #2
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800141e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	fa93 f2a3 	rbit	r2, r3
 8001428:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800142c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001436:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800143a:	2202      	movs	r2, #2
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001442:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	fa93 f2a3 	rbit	r2, r3
 800144c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001450:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001454:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001456:	4bb0      	ldr	r3, [pc, #704]	@ (8001718 <HAL_RCC_OscConfig+0x98c>)
 8001458:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800145a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800145e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001462:	2102      	movs	r1, #2
 8001464:	6019      	str	r1, [r3, #0]
 8001466:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800146a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	fa93 f1a3 	rbit	r1, r3
 8001474:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001478:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800147c:	6019      	str	r1, [r3, #0]
  return result;
 800147e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001482:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	fab3 f383 	clz	r3, r3
 800148c:	b2db      	uxtb	r3, r3
 800148e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001492:	b2db      	uxtb	r3, r3
 8001494:	f003 031f 	and.w	r3, r3, #31
 8001498:	2101      	movs	r1, #1
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	4013      	ands	r3, r2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d09d      	beq.n	80013e0 <HAL_RCC_OscConfig+0x654>
 80014a4:	e08d      	b.n	80015c2 <HAL_RCC_OscConfig+0x836>
 80014a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014aa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014b6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	fa93 f2a3 	rbit	r2, r3
 80014c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014c4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014c8:	601a      	str	r2, [r3, #0]
  return result;
 80014ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014ce:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014d2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d4:	fab3 f383 	clz	r3, r3
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	4b8f      	ldr	r3, [pc, #572]	@ (800171c <HAL_RCC_OscConfig+0x990>)
 80014de:	4413      	add	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	461a      	mov	r2, r3
 80014e4:	2300      	movs	r3, #0
 80014e6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e8:	f7ff f97e 	bl	80007e8 <HAL_GetTick>
 80014ec:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f0:	e00a      	b.n	8001508 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f2:	f7ff f979 	bl	80007e8 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d902      	bls.n	8001508 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	f000 bc5f 	b.w	8001dc6 <HAL_RCC_OscConfig+0x103a>
 8001508:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800150c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001510:	2202      	movs	r2, #2
 8001512:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001514:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001518:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	fa93 f2a3 	rbit	r2, r3
 8001522:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001526:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001530:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001534:	2202      	movs	r2, #2
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800153c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	fa93 f2a3 	rbit	r2, r3
 8001546:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800154a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001554:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001558:	2202      	movs	r2, #2
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001560:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	fa93 f2a3 	rbit	r2, r3
 800156a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800156e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001572:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001574:	4b68      	ldr	r3, [pc, #416]	@ (8001718 <HAL_RCC_OscConfig+0x98c>)
 8001576:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001578:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800157c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001580:	2102      	movs	r1, #2
 8001582:	6019      	str	r1, [r3, #0]
 8001584:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001588:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	fa93 f1a3 	rbit	r1, r3
 8001592:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001596:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800159a:	6019      	str	r1, [r3, #0]
  return result;
 800159c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015a0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	fab3 f383 	clz	r3, r3
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	f003 031f 	and.w	r3, r3, #31
 80015b6:	2101      	movs	r1, #1
 80015b8:	fa01 f303 	lsl.w	r3, r1, r3
 80015bc:	4013      	ands	r3, r2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d197      	bne.n	80014f2 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 819c 	beq.w	8001910 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d8:	2300      	movs	r3, #0
 80015da:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015de:	4b4e      	ldr	r3, [pc, #312]	@ (8001718 <HAL_RCC_OscConfig+0x98c>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d116      	bne.n	8001618 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	4b4b      	ldr	r3, [pc, #300]	@ (8001718 <HAL_RCC_OscConfig+0x98c>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	4a4a      	ldr	r2, [pc, #296]	@ (8001718 <HAL_RCC_OscConfig+0x98c>)
 80015f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f4:	61d3      	str	r3, [r2, #28]
 80015f6:	4b48      	ldr	r3, [pc, #288]	@ (8001718 <HAL_RCC_OscConfig+0x98c>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80015fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001602:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800160c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001610:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001612:	2301      	movs	r3, #1
 8001614:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001618:	4b41      	ldr	r3, [pc, #260]	@ (8001720 <HAL_RCC_OscConfig+0x994>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001620:	2b00      	cmp	r3, #0
 8001622:	d11a      	bne.n	800165a <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001624:	4b3e      	ldr	r3, [pc, #248]	@ (8001720 <HAL_RCC_OscConfig+0x994>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a3d      	ldr	r2, [pc, #244]	@ (8001720 <HAL_RCC_OscConfig+0x994>)
 800162a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800162e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001630:	f7ff f8da 	bl	80007e8 <HAL_GetTick>
 8001634:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001638:	e009      	b.n	800164e <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163a:	f7ff f8d5 	bl	80007e8 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	@ 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e3bb      	b.n	8001dc6 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164e:	4b34      	ldr	r3, [pc, #208]	@ (8001720 <HAL_RCC_OscConfig+0x994>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0ef      	beq.n	800163a <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800165a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800165e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d106      	bne.n	8001678 <HAL_RCC_OscConfig+0x8ec>
 800166a:	4b2b      	ldr	r3, [pc, #172]	@ (8001718 <HAL_RCC_OscConfig+0x98c>)
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	4a2a      	ldr	r2, [pc, #168]	@ (8001718 <HAL_RCC_OscConfig+0x98c>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6213      	str	r3, [r2, #32]
 8001676:	e035      	b.n	80016e4 <HAL_RCC_OscConfig+0x958>
 8001678:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800167c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d10c      	bne.n	80016a2 <HAL_RCC_OscConfig+0x916>
 8001688:	4b23      	ldr	r3, [pc, #140]	@ (8001718 <HAL_RCC_OscConfig+0x98c>)
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	4a22      	ldr	r2, [pc, #136]	@ (8001718 <HAL_RCC_OscConfig+0x98c>)
 800168e:	f023 0301 	bic.w	r3, r3, #1
 8001692:	6213      	str	r3, [r2, #32]
 8001694:	4b20      	ldr	r3, [pc, #128]	@ (8001718 <HAL_RCC_OscConfig+0x98c>)
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	4a1f      	ldr	r2, [pc, #124]	@ (8001718 <HAL_RCC_OscConfig+0x98c>)
 800169a:	f023 0304 	bic.w	r3, r3, #4
 800169e:	6213      	str	r3, [r2, #32]
 80016a0:	e020      	b.n	80016e4 <HAL_RCC_OscConfig+0x958>
 80016a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b05      	cmp	r3, #5
 80016b0:	d10c      	bne.n	80016cc <HAL_RCC_OscConfig+0x940>
 80016b2:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <HAL_RCC_OscConfig+0x98c>)
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	4a18      	ldr	r2, [pc, #96]	@ (8001718 <HAL_RCC_OscConfig+0x98c>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	6213      	str	r3, [r2, #32]
 80016be:	4b16      	ldr	r3, [pc, #88]	@ (8001718 <HAL_RCC_OscConfig+0x98c>)
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	4a15      	ldr	r2, [pc, #84]	@ (8001718 <HAL_RCC_OscConfig+0x98c>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6213      	str	r3, [r2, #32]
 80016ca:	e00b      	b.n	80016e4 <HAL_RCC_OscConfig+0x958>
 80016cc:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <HAL_RCC_OscConfig+0x98c>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	4a11      	ldr	r2, [pc, #68]	@ (8001718 <HAL_RCC_OscConfig+0x98c>)
 80016d2:	f023 0301 	bic.w	r3, r3, #1
 80016d6:	6213      	str	r3, [r2, #32]
 80016d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001718 <HAL_RCC_OscConfig+0x98c>)
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001718 <HAL_RCC_OscConfig+0x98c>)
 80016de:	f023 0304 	bic.w	r3, r3, #4
 80016e2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 8085 	beq.w	8001800 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f6:	f7ff f877 	bl	80007e8 <HAL_GetTick>
 80016fa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fe:	e011      	b.n	8001724 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001700:	f7ff f872 	bl	80007e8 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001710:	4293      	cmp	r3, r2
 8001712:	d907      	bls.n	8001724 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e356      	b.n	8001dc6 <HAL_RCC_OscConfig+0x103a>
 8001718:	40021000 	.word	0x40021000
 800171c:	10908120 	.word	0x10908120
 8001720:	40007000 	.word	0x40007000
 8001724:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001728:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800172c:	2202      	movs	r2, #2
 800172e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001730:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001734:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	fa93 f2a3 	rbit	r2, r3
 800173e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001742:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800174c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001750:	2202      	movs	r2, #2
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001758:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	fa93 f2a3 	rbit	r2, r3
 8001762:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001766:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800176a:	601a      	str	r2, [r3, #0]
  return result;
 800176c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001770:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001774:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001776:	fab3 f383 	clz	r3, r3
 800177a:	b2db      	uxtb	r3, r3
 800177c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d102      	bne.n	800178c <HAL_RCC_OscConfig+0xa00>
 8001786:	4b98      	ldr	r3, [pc, #608]	@ (80019e8 <HAL_RCC_OscConfig+0xc5c>)
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	e013      	b.n	80017b4 <HAL_RCC_OscConfig+0xa28>
 800178c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001790:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001794:	2202      	movs	r2, #2
 8001796:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001798:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800179c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	fa93 f2a3 	rbit	r2, r3
 80017a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017aa:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	4b8d      	ldr	r3, [pc, #564]	@ (80019e8 <HAL_RCC_OscConfig+0xc5c>)
 80017b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017b8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80017bc:	2102      	movs	r1, #2
 80017be:	6011      	str	r1, [r2, #0]
 80017c0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017c4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80017c8:	6812      	ldr	r2, [r2, #0]
 80017ca:	fa92 f1a2 	rbit	r1, r2
 80017ce:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017d2:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80017d6:	6011      	str	r1, [r2, #0]
  return result;
 80017d8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017dc:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	fab2 f282 	clz	r2, r2
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	f002 021f 	and.w	r2, r2, #31
 80017f2:	2101      	movs	r1, #1
 80017f4:	fa01 f202 	lsl.w	r2, r1, r2
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d080      	beq.n	8001700 <HAL_RCC_OscConfig+0x974>
 80017fe:	e07d      	b.n	80018fc <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001800:	f7fe fff2 	bl	80007e8 <HAL_GetTick>
 8001804:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001808:	e00b      	b.n	8001822 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800180a:	f7fe ffed 	bl	80007e8 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e2d1      	b.n	8001dc6 <HAL_RCC_OscConfig+0x103a>
 8001822:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001826:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800182a:	2202      	movs	r2, #2
 800182c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001832:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	fa93 f2a3 	rbit	r2, r3
 800183c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001840:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800184a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800184e:	2202      	movs	r2, #2
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001856:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	fa93 f2a3 	rbit	r2, r3
 8001860:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001864:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001868:	601a      	str	r2, [r3, #0]
  return result;
 800186a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800186e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001872:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001874:	fab3 f383 	clz	r3, r3
 8001878:	b2db      	uxtb	r3, r3
 800187a:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	d102      	bne.n	800188a <HAL_RCC_OscConfig+0xafe>
 8001884:	4b58      	ldr	r3, [pc, #352]	@ (80019e8 <HAL_RCC_OscConfig+0xc5c>)
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	e013      	b.n	80018b2 <HAL_RCC_OscConfig+0xb26>
 800188a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800188e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001892:	2202      	movs	r2, #2
 8001894:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001896:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800189a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	fa93 f2a3 	rbit	r2, r3
 80018a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018a8:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	4b4e      	ldr	r3, [pc, #312]	@ (80019e8 <HAL_RCC_OscConfig+0xc5c>)
 80018b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018b6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80018ba:	2102      	movs	r1, #2
 80018bc:	6011      	str	r1, [r2, #0]
 80018be:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018c2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	fa92 f1a2 	rbit	r1, r2
 80018cc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018d0:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80018d4:	6011      	str	r1, [r2, #0]
  return result;
 80018d6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018da:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	fab2 f282 	clz	r2, r2
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	f002 021f 	and.w	r2, r2, #31
 80018f0:	2101      	movs	r1, #1
 80018f2:	fa01 f202 	lsl.w	r2, r1, r2
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d186      	bne.n	800180a <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018fc:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001900:	2b01      	cmp	r3, #1
 8001902:	d105      	bne.n	8001910 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001904:	4b38      	ldr	r3, [pc, #224]	@ (80019e8 <HAL_RCC_OscConfig+0xc5c>)
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	4a37      	ldr	r2, [pc, #220]	@ (80019e8 <HAL_RCC_OscConfig+0xc5c>)
 800190a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800190e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001910:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001914:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 8251 	beq.w	8001dc4 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001922:	4b31      	ldr	r3, [pc, #196]	@ (80019e8 <HAL_RCC_OscConfig+0xc5c>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	2b08      	cmp	r3, #8
 800192c:	f000 820f 	beq.w	8001d4e <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001930:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001934:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	2b02      	cmp	r3, #2
 800193e:	f040 8165 	bne.w	8001c0c <HAL_RCC_OscConfig+0xe80>
 8001942:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001946:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800194a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800194e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001950:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001954:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	fa93 f2a3 	rbit	r2, r3
 800195e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001962:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001966:	601a      	str	r2, [r3, #0]
  return result;
 8001968:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800196c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001970:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001972:	fab3 f383 	clz	r3, r3
 8001976:	b2db      	uxtb	r3, r3
 8001978:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800197c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	461a      	mov	r2, r3
 8001984:	2300      	movs	r3, #0
 8001986:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001988:	f7fe ff2e 	bl	80007e8 <HAL_GetTick>
 800198c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001990:	e009      	b.n	80019a6 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001992:	f7fe ff29 	bl	80007e8 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e20f      	b.n	8001dc6 <HAL_RCC_OscConfig+0x103a>
 80019a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019aa:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80019ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019b8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	fa93 f2a3 	rbit	r2, r3
 80019c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80019ca:	601a      	str	r2, [r3, #0]
  return result;
 80019cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019d0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80019d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d6:	fab3 f383 	clz	r3, r3
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80019de:	d805      	bhi.n	80019ec <HAL_RCC_OscConfig+0xc60>
 80019e0:	4b01      	ldr	r3, [pc, #4]	@ (80019e8 <HAL_RCC_OscConfig+0xc5c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	e02a      	b.n	8001a3c <HAL_RCC_OscConfig+0xcb0>
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000
 80019ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019f0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80019f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019fe:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	fa93 f2a3 	rbit	r2, r3
 8001a08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a0c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a16:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001a1a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a24:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	fa93 f2a3 	rbit	r2, r3
 8001a2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a32:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	4bca      	ldr	r3, [pc, #808]	@ (8001d64 <HAL_RCC_OscConfig+0xfd8>)
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a40:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a44:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001a48:	6011      	str	r1, [r2, #0]
 8001a4a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a4e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	fa92 f1a2 	rbit	r1, r2
 8001a58:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a5c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001a60:	6011      	str	r1, [r2, #0]
  return result;
 8001a62:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a66:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	fab2 f282 	clz	r2, r2
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	f042 0220 	orr.w	r2, r2, #32
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	f002 021f 	and.w	r2, r2, #31
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d184      	bne.n	8001992 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a88:	4bb6      	ldr	r3, [pc, #728]	@ (8001d64 <HAL_RCC_OscConfig+0xfd8>)
 8001a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8c:	f023 020f 	bic.w	r2, r3, #15
 8001a90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a94:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9c:	49b1      	ldr	r1, [pc, #708]	@ (8001d64 <HAL_RCC_OscConfig+0xfd8>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001aa2:	4bb0      	ldr	r3, [pc, #704]	@ (8001d64 <HAL_RCC_OscConfig+0xfd8>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001aaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6a19      	ldr	r1, [r3, #32]
 8001ab6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	430b      	orrs	r3, r1
 8001ac4:	49a7      	ldr	r1, [pc, #668]	@ (8001d64 <HAL_RCC_OscConfig+0xfd8>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	604b      	str	r3, [r1, #4]
 8001aca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ace:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001ad2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ad6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001adc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	fa93 f2a3 	rbit	r2, r3
 8001ae6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aea:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001aee:	601a      	str	r2, [r3, #0]
  return result;
 8001af0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001af4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001af8:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001afa:	fab3 f383 	clz	r3, r3
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b04:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b10:	f7fe fe6a 	bl	80007e8 <HAL_GetTick>
 8001b14:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b18:	e009      	b.n	8001b2e <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b1a:	f7fe fe65 	bl	80007e8 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e14b      	b.n	8001dc6 <HAL_RCC_OscConfig+0x103a>
 8001b2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b32:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b36:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b40:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	fa93 f2a3 	rbit	r2, r3
 8001b4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b4e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b52:	601a      	str	r2, [r3, #0]
  return result;
 8001b54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b58:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b5e:	fab3 f383 	clz	r3, r3
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b66:	d802      	bhi.n	8001b6e <HAL_RCC_OscConfig+0xde2>
 8001b68:	4b7e      	ldr	r3, [pc, #504]	@ (8001d64 <HAL_RCC_OscConfig+0xfd8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	e027      	b.n	8001bbe <HAL_RCC_OscConfig+0xe32>
 8001b6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b72:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b80:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	fa93 f2a3 	rbit	r2, r3
 8001b8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b8e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b98:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001b9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ba6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	fa93 f2a3 	rbit	r2, r3
 8001bb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bb4:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	4b6a      	ldr	r3, [pc, #424]	@ (8001d64 <HAL_RCC_OscConfig+0xfd8>)
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001bc2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001bc6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001bca:	6011      	str	r1, [r2, #0]
 8001bcc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001bd0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	fa92 f1a2 	rbit	r1, r2
 8001bda:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001bde:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001be2:	6011      	str	r1, [r2, #0]
  return result;
 8001be4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001be8:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	fab2 f282 	clz	r2, r2
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	f042 0220 	orr.w	r2, r2, #32
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	f002 021f 	and.w	r2, r2, #31
 8001bfe:	2101      	movs	r1, #1
 8001c00:	fa01 f202 	lsl.w	r2, r1, r2
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d087      	beq.n	8001b1a <HAL_RCC_OscConfig+0xd8e>
 8001c0a:	e0db      	b.n	8001dc4 <HAL_RCC_OscConfig+0x1038>
 8001c0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c10:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c1e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	fa93 f2a3 	rbit	r2, r3
 8001c28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c2c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c30:	601a      	str	r2, [r3, #0]
  return result;
 8001c32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c36:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c3a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3c:	fab3 f383 	clz	r3, r3
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c46:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	2300      	movs	r3, #0
 8001c50:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c52:	f7fe fdc9 	bl	80007e8 <HAL_GetTick>
 8001c56:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5a:	e009      	b.n	8001c70 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7fe fdc4 	bl	80007e8 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e0aa      	b.n	8001dc6 <HAL_RCC_OscConfig+0x103a>
 8001c70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c74:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c82:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	fa93 f2a3 	rbit	r2, r3
 8001c8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c90:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001c94:	601a      	str	r2, [r3, #0]
  return result;
 8001c96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c9a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001c9e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca0:	fab3 f383 	clz	r3, r3
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ca8:	d802      	bhi.n	8001cb0 <HAL_RCC_OscConfig+0xf24>
 8001caa:	4b2e      	ldr	r3, [pc, #184]	@ (8001d64 <HAL_RCC_OscConfig+0xfd8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	e027      	b.n	8001d00 <HAL_RCC_OscConfig+0xf74>
 8001cb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cb4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001cb8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cc2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	fa93 f2a3 	rbit	r2, r3
 8001ccc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cd0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cda:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001cde:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ce8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	fa93 f2a3 	rbit	r2, r3
 8001cf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cf6:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	4b19      	ldr	r3, [pc, #100]	@ (8001d64 <HAL_RCC_OscConfig+0xfd8>)
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d00:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d04:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001d08:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001d0c:	6011      	str	r1, [r2, #0]
 8001d0e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d12:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	fa92 f1a2 	rbit	r1, r2
 8001d1c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d20:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001d24:	6011      	str	r1, [r2, #0]
  return result;
 8001d26:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d2a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	fab2 f282 	clz	r2, r2
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	f042 0220 	orr.w	r2, r2, #32
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	f002 021f 	and.w	r2, r2, #31
 8001d40:	2101      	movs	r1, #1
 8001d42:	fa01 f202 	lsl.w	r2, r1, r2
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d187      	bne.n	8001c5c <HAL_RCC_OscConfig+0xed0>
 8001d4c:	e03a      	b.n	8001dc4 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d52:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d104      	bne.n	8001d68 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e031      	b.n	8001dc6 <HAL_RCC_OscConfig+0x103a>
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d68:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <HAL_RCC_OscConfig+0x1044>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001d70:	4b17      	ldr	r3, [pc, #92]	@ (8001dd0 <HAL_RCC_OscConfig+0x1044>)
 8001d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d74:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d78:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001d7c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001d80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d84:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d117      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d90:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001d94:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d9c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d10b      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001da8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dac:	f003 020f 	and.w	r2, r3, #15
 8001db0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001db4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40021000 	.word	0x40021000

08001dd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b09e      	sub	sp, #120	@ 0x78
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e154      	b.n	8002096 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dec:	4b89      	ldr	r3, [pc, #548]	@ (8002014 <HAL_RCC_ClockConfig+0x240>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d910      	bls.n	8001e1c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfa:	4b86      	ldr	r3, [pc, #536]	@ (8002014 <HAL_RCC_ClockConfig+0x240>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f023 0207 	bic.w	r2, r3, #7
 8001e02:	4984      	ldr	r1, [pc, #528]	@ (8002014 <HAL_RCC_ClockConfig+0x240>)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0a:	4b82      	ldr	r3, [pc, #520]	@ (8002014 <HAL_RCC_ClockConfig+0x240>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d001      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e13c      	b.n	8002096 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d008      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e28:	4b7b      	ldr	r3, [pc, #492]	@ (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	4978      	ldr	r1, [pc, #480]	@ (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 80cd 	beq.w	8001fe2 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d137      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xec>
 8001e50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e54:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e58:	fa93 f3a3 	rbit	r3, r3
 8001e5c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001e5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e68:	d802      	bhi.n	8001e70 <HAL_RCC_ClockConfig+0x9c>
 8001e6a:	4b6b      	ldr	r3, [pc, #428]	@ (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	e00f      	b.n	8001e90 <HAL_RCC_ClockConfig+0xbc>
 8001e70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e78:	fa93 f3a3 	rbit	r3, r3
 8001e7c:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e7e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e82:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e8c:	4b62      	ldr	r3, [pc, #392]	@ (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e90:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e94:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001e96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e98:	fa92 f2a2 	rbit	r2, r2
 8001e9c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001e9e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001ea0:	fab2 f282 	clz	r2, r2
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	f042 0220 	orr.w	r2, r2, #32
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	f002 021f 	and.w	r2, r2, #31
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d171      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0ea      	b.n	8002096 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d137      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x164>
 8001ec8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ecc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ed0:	fa93 f3a3 	rbit	r3, r3
 8001ed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001ed6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed8:	fab3 f383 	clz	r3, r3
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ee0:	d802      	bhi.n	8001ee8 <HAL_RCC_ClockConfig+0x114>
 8001ee2:	4b4d      	ldr	r3, [pc, #308]	@ (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	e00f      	b.n	8001f08 <HAL_RCC_ClockConfig+0x134>
 8001ee8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001eec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ef0:	fa93 f3a3 	rbit	r3, r3
 8001ef4:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ef6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001efa:	643b      	str	r3, [r7, #64]	@ 0x40
 8001efc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f04:	4b44      	ldr	r3, [pc, #272]	@ (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f0c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001f0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f10:	fa92 f2a2 	rbit	r2, r2
 8001f14:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001f16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f18:	fab2 f282 	clz	r2, r2
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	f042 0220 	orr.w	r2, r2, #32
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	f002 021f 	and.w	r2, r2, #31
 8001f28:	2101      	movs	r1, #1
 8001f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d135      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0ae      	b.n	8002096 <HAL_RCC_ClockConfig+0x2c2>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f4e:	d802      	bhi.n	8001f56 <HAL_RCC_ClockConfig+0x182>
 8001f50:	4b31      	ldr	r3, [pc, #196]	@ (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	e00d      	b.n	8001f72 <HAL_RCC_ClockConfig+0x19e>
 8001f56:	2302      	movs	r3, #2
 8001f58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f5c:	fa93 f3a3 	rbit	r3, r3
 8001f60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f62:	2302      	movs	r3, #2
 8001f64:	623b      	str	r3, [r7, #32]
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	fa93 f3a3 	rbit	r3, r3
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	4b2a      	ldr	r3, [pc, #168]	@ (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f72:	2202      	movs	r2, #2
 8001f74:	61ba      	str	r2, [r7, #24]
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	fa92 f2a2 	rbit	r2, r2
 8001f7c:	617a      	str	r2, [r7, #20]
  return result;
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	fab2 f282 	clz	r2, r2
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	f042 0220 	orr.w	r2, r2, #32
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	f002 021f 	and.w	r2, r2, #31
 8001f90:	2101      	movs	r1, #1
 8001f92:	fa01 f202 	lsl.w	r2, r1, r2
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e07a      	b.n	8002096 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f023 0203 	bic.w	r2, r3, #3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	491a      	ldr	r1, [pc, #104]	@ (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb2:	f7fe fc19 	bl	80007e8 <HAL_GetTick>
 8001fb6:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb8:	e00a      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fba:	f7fe fc15 	bl	80007e8 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e062      	b.n	8002096 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd0:	4b11      	ldr	r3, [pc, #68]	@ (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 020c 	and.w	r2, r3, #12
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d1eb      	bne.n	8001fba <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8002014 <HAL_RCC_ClockConfig+0x240>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d215      	bcs.n	800201c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff0:	4b08      	ldr	r3, [pc, #32]	@ (8002014 <HAL_RCC_ClockConfig+0x240>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f023 0207 	bic.w	r2, r3, #7
 8001ff8:	4906      	ldr	r1, [pc, #24]	@ (8002014 <HAL_RCC_ClockConfig+0x240>)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002000:	4b04      	ldr	r3, [pc, #16]	@ (8002014 <HAL_RCC_ClockConfig+0x240>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d006      	beq.n	800201c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e041      	b.n	8002096 <HAL_RCC_ClockConfig+0x2c2>
 8002012:	bf00      	nop
 8002014:	40022000 	.word	0x40022000
 8002018:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002028:	4b1d      	ldr	r3, [pc, #116]	@ (80020a0 <HAL_RCC_ClockConfig+0x2cc>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	491a      	ldr	r1, [pc, #104]	@ (80020a0 <HAL_RCC_ClockConfig+0x2cc>)
 8002036:	4313      	orrs	r3, r2
 8002038:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d009      	beq.n	800205a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002046:	4b16      	ldr	r3, [pc, #88]	@ (80020a0 <HAL_RCC_ClockConfig+0x2cc>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4912      	ldr	r1, [pc, #72]	@ (80020a0 <HAL_RCC_ClockConfig+0x2cc>)
 8002056:	4313      	orrs	r3, r2
 8002058:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800205a:	f000 f829 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 800205e:	4601      	mov	r1, r0
 8002060:	4b0f      	ldr	r3, [pc, #60]	@ (80020a0 <HAL_RCC_ClockConfig+0x2cc>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002068:	22f0      	movs	r2, #240	@ 0xf0
 800206a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	fa92 f2a2 	rbit	r2, r2
 8002072:	60fa      	str	r2, [r7, #12]
  return result;
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	fab2 f282 	clz	r2, r2
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	40d3      	lsrs	r3, r2
 800207e:	4a09      	ldr	r2, [pc, #36]	@ (80020a4 <HAL_RCC_ClockConfig+0x2d0>)
 8002080:	5cd3      	ldrb	r3, [r2, r3]
 8002082:	fa21 f303 	lsr.w	r3, r1, r3
 8002086:	4a08      	ldr	r2, [pc, #32]	@ (80020a8 <HAL_RCC_ClockConfig+0x2d4>)
 8002088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800208a:	4b08      	ldr	r3, [pc, #32]	@ (80020ac <HAL_RCC_ClockConfig+0x2d8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe fb66 	bl	8000760 <HAL_InitTick>
  
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3778      	adds	r7, #120	@ 0x78
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000
 80020a4:	08003824 	.word	0x08003824
 80020a8:	20000000 	.word	0x20000000
 80020ac:	20000004 	.word	0x20000004

080020b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80020ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002148 <HAL_RCC_GetSysClockFreq+0x98>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d002      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0x30>
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d003      	beq.n	80020e6 <HAL_RCC_GetSysClockFreq+0x36>
 80020de:	e029      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020e0:	4b1a      	ldr	r3, [pc, #104]	@ (800214c <HAL_RCC_GetSysClockFreq+0x9c>)
 80020e2:	613b      	str	r3, [r7, #16]
      break;
 80020e4:	e029      	b.n	800213a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	0c9b      	lsrs	r3, r3, #18
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	4a18      	ldr	r2, [pc, #96]	@ (8002150 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020f0:	5cd3      	ldrb	r3, [r2, r3]
 80020f2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80020f4:	4b14      	ldr	r3, [pc, #80]	@ (8002148 <HAL_RCC_GetSysClockFreq+0x98>)
 80020f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	4a15      	ldr	r2, [pc, #84]	@ (8002154 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020fe:	5cd3      	ldrb	r3, [r2, r3]
 8002100:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800210c:	4a0f      	ldr	r2, [pc, #60]	@ (800214c <HAL_RCC_GetSysClockFreq+0x9c>)
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	fbb2 f2f3 	udiv	r2, r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	fb02 f303 	mul.w	r3, r2, r3
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	e007      	b.n	800212e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800211e:	4a0b      	ldr	r2, [pc, #44]	@ (800214c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	fbb2 f2f3 	udiv	r2, r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	fb02 f303 	mul.w	r3, r2, r3
 800212c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	613b      	str	r3, [r7, #16]
      break;
 8002132:	e002      	b.n	800213a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002134:	4b05      	ldr	r3, [pc, #20]	@ (800214c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002136:	613b      	str	r3, [r7, #16]
      break;
 8002138:	bf00      	nop
    }
  }
  return sysclockfreq;
 800213a:	693b      	ldr	r3, [r7, #16]
}
 800213c:	4618      	mov	r0, r3
 800213e:	371c      	adds	r7, #28
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	40021000 	.word	0x40021000
 800214c:	007a1200 	.word	0x007a1200
 8002150:	0800383c 	.word	0x0800383c
 8002154:	0800384c 	.word	0x0800384c

08002158 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800215c:	4b03      	ldr	r3, [pc, #12]	@ (800216c <HAL_RCC_GetHCLKFreq+0x14>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20000000 	.word	0x20000000

08002170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002176:	f7ff ffef 	bl	8002158 <HAL_RCC_GetHCLKFreq>
 800217a:	4601      	mov	r1, r0
 800217c:	4b0b      	ldr	r3, [pc, #44]	@ (80021ac <HAL_RCC_GetPCLK1Freq+0x3c>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002184:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002188:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	fa92 f2a2 	rbit	r2, r2
 8002190:	603a      	str	r2, [r7, #0]
  return result;
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	fab2 f282 	clz	r2, r2
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	40d3      	lsrs	r3, r2
 800219c:	4a04      	ldr	r2, [pc, #16]	@ (80021b0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800219e:	5cd3      	ldrb	r3, [r2, r3]
 80021a0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40021000 	.word	0x40021000
 80021b0:	08003834 	.word	0x08003834

080021b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021ba:	f7ff ffcd 	bl	8002158 <HAL_RCC_GetHCLKFreq>
 80021be:	4601      	mov	r1, r0
 80021c0:	4b0b      	ldr	r3, [pc, #44]	@ (80021f0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80021c8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80021cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	fa92 f2a2 	rbit	r2, r2
 80021d4:	603a      	str	r2, [r7, #0]
  return result;
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	fab2 f282 	clz	r2, r2
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	40d3      	lsrs	r3, r2
 80021e0:	4a04      	ldr	r2, [pc, #16]	@ (80021f4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80021e2:	5cd3      	ldrb	r3, [r2, r3]
 80021e4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40021000 	.word	0x40021000
 80021f4:	08003834 	.word	0x08003834

080021f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b092      	sub	sp, #72	@ 0x48
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002204:	2300      	movs	r3, #0
 8002206:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002208:	2300      	movs	r3, #0
 800220a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 80d2 	beq.w	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800221c:	4b4d      	ldr	r3, [pc, #308]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10e      	bne.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002228:	4b4a      	ldr	r3, [pc, #296]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	4a49      	ldr	r2, [pc, #292]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800222e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002232:	61d3      	str	r3, [r2, #28]
 8002234:	4b47      	ldr	r3, [pc, #284]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002240:	2301      	movs	r3, #1
 8002242:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002246:	4b44      	ldr	r3, [pc, #272]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d118      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002252:	4b41      	ldr	r3, [pc, #260]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a40      	ldr	r2, [pc, #256]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800225c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225e:	f7fe fac3 	bl	80007e8 <HAL_GetTick>
 8002262:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	e008      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002266:	f7fe fabf 	bl	80007e8 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b64      	cmp	r3, #100	@ 0x64
 8002272:	d901      	bls.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e1d4      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002278:	4b37      	ldr	r3, [pc, #220]	@ (8002358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002284:	4b33      	ldr	r3, [pc, #204]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800228c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800228e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 8082 	beq.w	800239a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800229e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d07a      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022b2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80022bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b25      	ldr	r3, [pc, #148]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	461a      	mov	r2, r3
 80022ce:	2301      	movs	r3, #1
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80022e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022e2:	fab3 f383 	clz	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	461a      	mov	r2, r3
 80022ea:	4b1c      	ldr	r3, [pc, #112]	@ (800235c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	461a      	mov	r2, r3
 80022f2:	2300      	movs	r3, #0
 80022f4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022f6:	4a17      	ldr	r2, [pc, #92]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80022f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022fa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d049      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002306:	f7fe fa6f 	bl	80007e8 <HAL_GetTick>
 800230a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230c:	e00a      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230e:	f7fe fa6b 	bl	80007e8 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800231c:	4293      	cmp	r3, r2
 800231e:	d901      	bls.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e17e      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8002324:	2302      	movs	r3, #2
 8002326:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002330:	2302      	movs	r3, #2
 8002332:	623b      	str	r3, [r7, #32]
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	61fb      	str	r3, [r7, #28]
  return result;
 800233c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d108      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800234e:	4b01      	ldr	r3, [pc, #4]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	e00d      	b.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002354:	40021000 	.word	0x40021000
 8002358:	40007000 	.word	0x40007000
 800235c:	10908100 	.word	0x10908100
 8002360:	2302      	movs	r3, #2
 8002362:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	4b9a      	ldr	r3, [pc, #616]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800236e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002370:	2202      	movs	r2, #2
 8002372:	613a      	str	r2, [r7, #16]
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	fa92 f2a2 	rbit	r2, r2
 800237a:	60fa      	str	r2, [r7, #12]
  return result;
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	fab2 f282 	clz	r2, r2
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	f002 021f 	and.w	r2, r2, #31
 800238e:	2101      	movs	r1, #1
 8002390:	fa01 f202 	lsl.w	r2, r1, r2
 8002394:	4013      	ands	r3, r2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0b9      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800239a:	4b8f      	ldr	r3, [pc, #572]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	498c      	ldr	r1, [pc, #560]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d105      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b4:	4b88      	ldr	r3, [pc, #544]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	4a87      	ldr	r2, [pc, #540]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d008      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023cc:	4b82      	ldr	r3, [pc, #520]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d0:	f023 0203 	bic.w	r2, r3, #3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	497f      	ldr	r1, [pc, #508]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d008      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023ea:	4b7b      	ldr	r3, [pc, #492]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	4978      	ldr	r1, [pc, #480]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002408:	4b73      	ldr	r3, [pc, #460]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800240a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	4970      	ldr	r1, [pc, #448]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002416:	4313      	orrs	r3, r2
 8002418:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0320 	and.w	r3, r3, #32
 8002422:	2b00      	cmp	r3, #0
 8002424:	d008      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002426:	4b6c      	ldr	r3, [pc, #432]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	f023 0210 	bic.w	r2, r3, #16
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	4969      	ldr	r1, [pc, #420]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002434:	4313      	orrs	r3, r2
 8002436:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002444:	4b64      	ldr	r3, [pc, #400]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002450:	4961      	ldr	r1, [pc, #388]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002452:	4313      	orrs	r3, r2
 8002454:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800245e:	2b00      	cmp	r3, #0
 8002460:	d008      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002462:	4b5d      	ldr	r3, [pc, #372]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002466:	f023 0220 	bic.w	r2, r3, #32
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	495a      	ldr	r1, [pc, #360]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002470:	4313      	orrs	r3, r2
 8002472:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002480:	4b55      	ldr	r3, [pc, #340]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002484:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248c:	4952      	ldr	r1, [pc, #328]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800248e:	4313      	orrs	r3, r2
 8002490:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d008      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800249e:	4b4e      	ldr	r3, [pc, #312]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	494b      	ldr	r1, [pc, #300]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0310 	and.w	r3, r3, #16
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024bc:	4b46      	ldr	r3, [pc, #280]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	4943      	ldr	r1, [pc, #268]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d008      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024da:	4b3f      	ldr	r3, [pc, #252]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	493c      	ldr	r1, [pc, #240]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024f8:	4b37      	ldr	r3, [pc, #220]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fc:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002504:	4934      	ldr	r1, [pc, #208]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002506:	4313      	orrs	r3, r2
 8002508:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002512:	2b00      	cmp	r3, #0
 8002514:	d008      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002516:	4b30      	ldr	r3, [pc, #192]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251a:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002522:	492d      	ldr	r1, [pc, #180]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002524:	4313      	orrs	r3, r2
 8002526:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d008      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002534:	4b28      	ldr	r3, [pc, #160]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002538:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002540:	4925      	ldr	r1, [pc, #148]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002542:	4313      	orrs	r3, r2
 8002544:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d008      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002552:	4b21      	ldr	r3, [pc, #132]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	491e      	ldr	r1, [pc, #120]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002560:	4313      	orrs	r3, r2
 8002562:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002570:	4b19      	ldr	r3, [pc, #100]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002574:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800257c:	4916      	ldr	r1, [pc, #88]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800257e:	4313      	orrs	r3, r2
 8002580:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d008      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800258e:	4b12      	ldr	r3, [pc, #72]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800259a:	490f      	ldr	r1, [pc, #60]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800259c:	4313      	orrs	r3, r2
 800259e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80025ac:	4b0a      	ldr	r3, [pc, #40]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b8:	4907      	ldr	r1, [pc, #28]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00c      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80025ca:	4b03      	ldr	r3, [pc, #12]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	e002      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80025d6:	bf00      	nop
 80025d8:	40021000 	.word	0x40021000
 80025dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025de:	4913      	ldr	r1, [pc, #76]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80025f0:	4b0e      	ldr	r3, [pc, #56]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fc:	490b      	ldr	r1, [pc, #44]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d008      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800260e:	4b07      	ldr	r3, [pc, #28]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002612:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800261a:	4904      	ldr	r1, [pc, #16]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800261c:	4313      	orrs	r3, r2
 800261e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3748      	adds	r7, #72	@ 0x48
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000

08002630 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e040      	b.n	80026c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7fe f802 	bl	800065c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2224      	movs	r2, #36	@ 0x24
 800265c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0201 	bic.w	r2, r2, #1
 800266c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f9fc 	bl	8002a74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f825 	bl	80026cc <UART_SetConfig>
 8002682:	4603      	mov	r3, r0
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e01b      	b.n	80026c4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800269a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 fa7b 	bl	8002bb8 <UART_CheckIdleState>
 80026c2:	4603      	mov	r3, r0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026d4:	2300      	movs	r3, #0
 80026d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	4b92      	ldr	r3, [pc, #584]	@ (8002940 <UART_SetConfig+0x274>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	6979      	ldr	r1, [r7, #20]
 8002700:	430b      	orrs	r3, r1
 8002702:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	4313      	orrs	r3, r2
 8002728:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	430a      	orrs	r2, r1
 800273c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a80      	ldr	r2, [pc, #512]	@ (8002944 <UART_SetConfig+0x278>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d120      	bne.n	800278a <UART_SetConfig+0xbe>
 8002748:	4b7f      	ldr	r3, [pc, #508]	@ (8002948 <UART_SetConfig+0x27c>)
 800274a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	2b03      	cmp	r3, #3
 8002752:	d817      	bhi.n	8002784 <UART_SetConfig+0xb8>
 8002754:	a201      	add	r2, pc, #4	@ (adr r2, 800275c <UART_SetConfig+0x90>)
 8002756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275a:	bf00      	nop
 800275c:	0800276d 	.word	0x0800276d
 8002760:	08002779 	.word	0x08002779
 8002764:	0800277f 	.word	0x0800277f
 8002768:	08002773 	.word	0x08002773
 800276c:	2301      	movs	r3, #1
 800276e:	77fb      	strb	r3, [r7, #31]
 8002770:	e0b5      	b.n	80028de <UART_SetConfig+0x212>
 8002772:	2302      	movs	r3, #2
 8002774:	77fb      	strb	r3, [r7, #31]
 8002776:	e0b2      	b.n	80028de <UART_SetConfig+0x212>
 8002778:	2304      	movs	r3, #4
 800277a:	77fb      	strb	r3, [r7, #31]
 800277c:	e0af      	b.n	80028de <UART_SetConfig+0x212>
 800277e:	2308      	movs	r3, #8
 8002780:	77fb      	strb	r3, [r7, #31]
 8002782:	e0ac      	b.n	80028de <UART_SetConfig+0x212>
 8002784:	2310      	movs	r3, #16
 8002786:	77fb      	strb	r3, [r7, #31]
 8002788:	e0a9      	b.n	80028de <UART_SetConfig+0x212>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a6f      	ldr	r2, [pc, #444]	@ (800294c <UART_SetConfig+0x280>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d124      	bne.n	80027de <UART_SetConfig+0x112>
 8002794:	4b6c      	ldr	r3, [pc, #432]	@ (8002948 <UART_SetConfig+0x27c>)
 8002796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002798:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800279c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80027a0:	d011      	beq.n	80027c6 <UART_SetConfig+0xfa>
 80027a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80027a6:	d817      	bhi.n	80027d8 <UART_SetConfig+0x10c>
 80027a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80027ac:	d011      	beq.n	80027d2 <UART_SetConfig+0x106>
 80027ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80027b2:	d811      	bhi.n	80027d8 <UART_SetConfig+0x10c>
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <UART_SetConfig+0xf4>
 80027b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027bc:	d006      	beq.n	80027cc <UART_SetConfig+0x100>
 80027be:	e00b      	b.n	80027d8 <UART_SetConfig+0x10c>
 80027c0:	2300      	movs	r3, #0
 80027c2:	77fb      	strb	r3, [r7, #31]
 80027c4:	e08b      	b.n	80028de <UART_SetConfig+0x212>
 80027c6:	2302      	movs	r3, #2
 80027c8:	77fb      	strb	r3, [r7, #31]
 80027ca:	e088      	b.n	80028de <UART_SetConfig+0x212>
 80027cc:	2304      	movs	r3, #4
 80027ce:	77fb      	strb	r3, [r7, #31]
 80027d0:	e085      	b.n	80028de <UART_SetConfig+0x212>
 80027d2:	2308      	movs	r3, #8
 80027d4:	77fb      	strb	r3, [r7, #31]
 80027d6:	e082      	b.n	80028de <UART_SetConfig+0x212>
 80027d8:	2310      	movs	r3, #16
 80027da:	77fb      	strb	r3, [r7, #31]
 80027dc:	e07f      	b.n	80028de <UART_SetConfig+0x212>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a5b      	ldr	r2, [pc, #364]	@ (8002950 <UART_SetConfig+0x284>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d124      	bne.n	8002832 <UART_SetConfig+0x166>
 80027e8:	4b57      	ldr	r3, [pc, #348]	@ (8002948 <UART_SetConfig+0x27c>)
 80027ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ec:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80027f0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80027f4:	d011      	beq.n	800281a <UART_SetConfig+0x14e>
 80027f6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80027fa:	d817      	bhi.n	800282c <UART_SetConfig+0x160>
 80027fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002800:	d011      	beq.n	8002826 <UART_SetConfig+0x15a>
 8002802:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002806:	d811      	bhi.n	800282c <UART_SetConfig+0x160>
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <UART_SetConfig+0x148>
 800280c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002810:	d006      	beq.n	8002820 <UART_SetConfig+0x154>
 8002812:	e00b      	b.n	800282c <UART_SetConfig+0x160>
 8002814:	2300      	movs	r3, #0
 8002816:	77fb      	strb	r3, [r7, #31]
 8002818:	e061      	b.n	80028de <UART_SetConfig+0x212>
 800281a:	2302      	movs	r3, #2
 800281c:	77fb      	strb	r3, [r7, #31]
 800281e:	e05e      	b.n	80028de <UART_SetConfig+0x212>
 8002820:	2304      	movs	r3, #4
 8002822:	77fb      	strb	r3, [r7, #31]
 8002824:	e05b      	b.n	80028de <UART_SetConfig+0x212>
 8002826:	2308      	movs	r3, #8
 8002828:	77fb      	strb	r3, [r7, #31]
 800282a:	e058      	b.n	80028de <UART_SetConfig+0x212>
 800282c:	2310      	movs	r3, #16
 800282e:	77fb      	strb	r3, [r7, #31]
 8002830:	e055      	b.n	80028de <UART_SetConfig+0x212>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a47      	ldr	r2, [pc, #284]	@ (8002954 <UART_SetConfig+0x288>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d124      	bne.n	8002886 <UART_SetConfig+0x1ba>
 800283c:	4b42      	ldr	r3, [pc, #264]	@ (8002948 <UART_SetConfig+0x27c>)
 800283e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002840:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002844:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002848:	d011      	beq.n	800286e <UART_SetConfig+0x1a2>
 800284a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800284e:	d817      	bhi.n	8002880 <UART_SetConfig+0x1b4>
 8002850:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002854:	d011      	beq.n	800287a <UART_SetConfig+0x1ae>
 8002856:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800285a:	d811      	bhi.n	8002880 <UART_SetConfig+0x1b4>
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <UART_SetConfig+0x19c>
 8002860:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002864:	d006      	beq.n	8002874 <UART_SetConfig+0x1a8>
 8002866:	e00b      	b.n	8002880 <UART_SetConfig+0x1b4>
 8002868:	2300      	movs	r3, #0
 800286a:	77fb      	strb	r3, [r7, #31]
 800286c:	e037      	b.n	80028de <UART_SetConfig+0x212>
 800286e:	2302      	movs	r3, #2
 8002870:	77fb      	strb	r3, [r7, #31]
 8002872:	e034      	b.n	80028de <UART_SetConfig+0x212>
 8002874:	2304      	movs	r3, #4
 8002876:	77fb      	strb	r3, [r7, #31]
 8002878:	e031      	b.n	80028de <UART_SetConfig+0x212>
 800287a:	2308      	movs	r3, #8
 800287c:	77fb      	strb	r3, [r7, #31]
 800287e:	e02e      	b.n	80028de <UART_SetConfig+0x212>
 8002880:	2310      	movs	r3, #16
 8002882:	77fb      	strb	r3, [r7, #31]
 8002884:	e02b      	b.n	80028de <UART_SetConfig+0x212>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a33      	ldr	r2, [pc, #204]	@ (8002958 <UART_SetConfig+0x28c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d124      	bne.n	80028da <UART_SetConfig+0x20e>
 8002890:	4b2d      	ldr	r3, [pc, #180]	@ (8002948 <UART_SetConfig+0x27c>)
 8002892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002894:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002898:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800289c:	d011      	beq.n	80028c2 <UART_SetConfig+0x1f6>
 800289e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80028a2:	d817      	bhi.n	80028d4 <UART_SetConfig+0x208>
 80028a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028a8:	d011      	beq.n	80028ce <UART_SetConfig+0x202>
 80028aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028ae:	d811      	bhi.n	80028d4 <UART_SetConfig+0x208>
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <UART_SetConfig+0x1f0>
 80028b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028b8:	d006      	beq.n	80028c8 <UART_SetConfig+0x1fc>
 80028ba:	e00b      	b.n	80028d4 <UART_SetConfig+0x208>
 80028bc:	2300      	movs	r3, #0
 80028be:	77fb      	strb	r3, [r7, #31]
 80028c0:	e00d      	b.n	80028de <UART_SetConfig+0x212>
 80028c2:	2302      	movs	r3, #2
 80028c4:	77fb      	strb	r3, [r7, #31]
 80028c6:	e00a      	b.n	80028de <UART_SetConfig+0x212>
 80028c8:	2304      	movs	r3, #4
 80028ca:	77fb      	strb	r3, [r7, #31]
 80028cc:	e007      	b.n	80028de <UART_SetConfig+0x212>
 80028ce:	2308      	movs	r3, #8
 80028d0:	77fb      	strb	r3, [r7, #31]
 80028d2:	e004      	b.n	80028de <UART_SetConfig+0x212>
 80028d4:	2310      	movs	r3, #16
 80028d6:	77fb      	strb	r3, [r7, #31]
 80028d8:	e001      	b.n	80028de <UART_SetConfig+0x212>
 80028da:	2310      	movs	r3, #16
 80028dc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028e6:	d16b      	bne.n	80029c0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80028e8:	7ffb      	ldrb	r3, [r7, #31]
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d838      	bhi.n	8002960 <UART_SetConfig+0x294>
 80028ee:	a201      	add	r2, pc, #4	@ (adr r2, 80028f4 <UART_SetConfig+0x228>)
 80028f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f4:	08002919 	.word	0x08002919
 80028f8:	08002921 	.word	0x08002921
 80028fc:	08002929 	.word	0x08002929
 8002900:	08002961 	.word	0x08002961
 8002904:	0800292f 	.word	0x0800292f
 8002908:	08002961 	.word	0x08002961
 800290c:	08002961 	.word	0x08002961
 8002910:	08002961 	.word	0x08002961
 8002914:	08002937 	.word	0x08002937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002918:	f7ff fc2a 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 800291c:	61b8      	str	r0, [r7, #24]
        break;
 800291e:	e024      	b.n	800296a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002920:	f7ff fc48 	bl	80021b4 <HAL_RCC_GetPCLK2Freq>
 8002924:	61b8      	str	r0, [r7, #24]
        break;
 8002926:	e020      	b.n	800296a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002928:	4b0c      	ldr	r3, [pc, #48]	@ (800295c <UART_SetConfig+0x290>)
 800292a:	61bb      	str	r3, [r7, #24]
        break;
 800292c:	e01d      	b.n	800296a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800292e:	f7ff fbbf 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 8002932:	61b8      	str	r0, [r7, #24]
        break;
 8002934:	e019      	b.n	800296a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002936:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800293a:	61bb      	str	r3, [r7, #24]
        break;
 800293c:	e015      	b.n	800296a <UART_SetConfig+0x29e>
 800293e:	bf00      	nop
 8002940:	efff69f3 	.word	0xefff69f3
 8002944:	40013800 	.word	0x40013800
 8002948:	40021000 	.word	0x40021000
 800294c:	40004400 	.word	0x40004400
 8002950:	40004800 	.word	0x40004800
 8002954:	40004c00 	.word	0x40004c00
 8002958:	40005000 	.word	0x40005000
 800295c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	77bb      	strb	r3, [r7, #30]
        break;
 8002968:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d073      	beq.n	8002a58 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	005a      	lsls	r2, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	085b      	lsrs	r3, r3, #1
 800297a:	441a      	add	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	fbb2 f3f3 	udiv	r3, r2, r3
 8002984:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	2b0f      	cmp	r3, #15
 800298a:	d916      	bls.n	80029ba <UART_SetConfig+0x2ee>
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002992:	d212      	bcs.n	80029ba <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	b29b      	uxth	r3, r3
 8002998:	f023 030f 	bic.w	r3, r3, #15
 800299c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	085b      	lsrs	r3, r3, #1
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	89fb      	ldrh	r3, [r7, #14]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	89fa      	ldrh	r2, [r7, #14]
 80029b6:	60da      	str	r2, [r3, #12]
 80029b8:	e04e      	b.n	8002a58 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	77bb      	strb	r3, [r7, #30]
 80029be:	e04b      	b.n	8002a58 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80029c0:	7ffb      	ldrb	r3, [r7, #31]
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d827      	bhi.n	8002a16 <UART_SetConfig+0x34a>
 80029c6:	a201      	add	r2, pc, #4	@ (adr r2, 80029cc <UART_SetConfig+0x300>)
 80029c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029cc:	080029f1 	.word	0x080029f1
 80029d0:	080029f9 	.word	0x080029f9
 80029d4:	08002a01 	.word	0x08002a01
 80029d8:	08002a17 	.word	0x08002a17
 80029dc:	08002a07 	.word	0x08002a07
 80029e0:	08002a17 	.word	0x08002a17
 80029e4:	08002a17 	.word	0x08002a17
 80029e8:	08002a17 	.word	0x08002a17
 80029ec:	08002a0f 	.word	0x08002a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029f0:	f7ff fbbe 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 80029f4:	61b8      	str	r0, [r7, #24]
        break;
 80029f6:	e013      	b.n	8002a20 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029f8:	f7ff fbdc 	bl	80021b4 <HAL_RCC_GetPCLK2Freq>
 80029fc:	61b8      	str	r0, [r7, #24]
        break;
 80029fe:	e00f      	b.n	8002a20 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a00:	4b1b      	ldr	r3, [pc, #108]	@ (8002a70 <UART_SetConfig+0x3a4>)
 8002a02:	61bb      	str	r3, [r7, #24]
        break;
 8002a04:	e00c      	b.n	8002a20 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a06:	f7ff fb53 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 8002a0a:	61b8      	str	r0, [r7, #24]
        break;
 8002a0c:	e008      	b.n	8002a20 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a12:	61bb      	str	r3, [r7, #24]
        break;
 8002a14:	e004      	b.n	8002a20 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	77bb      	strb	r3, [r7, #30]
        break;
 8002a1e:	bf00      	nop
    }

    if (pclk != 0U)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d018      	beq.n	8002a58 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	085a      	lsrs	r2, r3, #1
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	441a      	add	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	2b0f      	cmp	r3, #15
 8002a3e:	d909      	bls.n	8002a54 <UART_SetConfig+0x388>
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a46:	d205      	bcs.n	8002a54 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	e001      	b.n	8002a58 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002a64:	7fbb      	ldrb	r3, [r7, #30]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3720      	adds	r7, #32
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	007a1200 	.word	0x007a1200

08002a74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00a      	beq.n	8002a9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00a      	beq.n	8002ae2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00a      	beq.n	8002b26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00a      	beq.n	8002b48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d01a      	beq.n	8002b8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b72:	d10a      	bne.n	8002b8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	605a      	str	r2, [r3, #4]
  }
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b098      	sub	sp, #96	@ 0x60
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002bc8:	f7fd fe0e 	bl	80007e8 <HAL_GetTick>
 8002bcc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d12e      	bne.n	8002c3a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bdc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002be4:	2200      	movs	r2, #0
 8002be6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f88c 	bl	8002d08 <UART_WaitOnFlagUntilTimeout>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d021      	beq.n	8002c3a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bfe:	e853 3f00 	ldrex	r3, [r3]
 8002c02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c14:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c16:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c1c:	e841 2300 	strex	r3, r2, [r1]
 8002c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1e6      	bne.n	8002bf6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e062      	b.n	8002d00 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d149      	bne.n	8002cdc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c50:	2200      	movs	r2, #0
 8002c52:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f856 	bl	8002d08 <UART_WaitOnFlagUntilTimeout>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d03c      	beq.n	8002cdc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6a:	e853 3f00 	ldrex	r3, [r3]
 8002c6e:	623b      	str	r3, [r7, #32]
   return(result);
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c80:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c82:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c88:	e841 2300 	strex	r3, r2, [r1]
 8002c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1e6      	bne.n	8002c62 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	3308      	adds	r3, #8
 8002c9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	e853 3f00 	ldrex	r3, [r3]
 8002ca2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f023 0301 	bic.w	r3, r3, #1
 8002caa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	3308      	adds	r3, #8
 8002cb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002cb4:	61fa      	str	r2, [r7, #28]
 8002cb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb8:	69b9      	ldr	r1, [r7, #24]
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	e841 2300 	strex	r3, r2, [r1]
 8002cc0:	617b      	str	r3, [r7, #20]
   return(result);
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1e5      	bne.n	8002c94 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e011      	b.n	8002d00 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3758      	adds	r7, #88	@ 0x58
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	4613      	mov	r3, r2
 8002d16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d18:	e04f      	b.n	8002dba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d20:	d04b      	beq.n	8002dba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d22:	f7fd fd61 	bl	80007e8 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d302      	bcc.n	8002d38 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e04e      	b.n	8002dda <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0304 	and.w	r3, r3, #4
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d037      	beq.n	8002dba <UART_WaitOnFlagUntilTimeout+0xb2>
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b80      	cmp	r3, #128	@ 0x80
 8002d4e:	d034      	beq.n	8002dba <UART_WaitOnFlagUntilTimeout+0xb2>
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b40      	cmp	r3, #64	@ 0x40
 8002d54:	d031      	beq.n	8002dba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d110      	bne.n	8002d86 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2208      	movs	r2, #8
 8002d6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 f838 	bl	8002de2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2208      	movs	r2, #8
 8002d76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e029      	b.n	8002dda <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d94:	d111      	bne.n	8002dba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 f81e 	bl	8002de2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e00f      	b.n	8002dda <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	69da      	ldr	r2, [r3, #28]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	bf0c      	ite	eq
 8002dca:	2301      	moveq	r3, #1
 8002dcc:	2300      	movne	r3, #0
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d0a0      	beq.n	8002d1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b095      	sub	sp, #84	@ 0x54
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df2:	e853 3f00 	ldrex	r3, [r3]
 8002df6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e08:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e0a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e10:	e841 2300 	strex	r3, r2, [r1]
 8002e14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1e6      	bne.n	8002dea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3308      	adds	r3, #8
 8002e22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	e853 3f00 	ldrex	r3, [r3]
 8002e2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f023 0301 	bic.w	r3, r3, #1
 8002e32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	3308      	adds	r3, #8
 8002e3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e44:	e841 2300 	strex	r3, r2, [r1]
 8002e48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1e5      	bne.n	8002e1c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d118      	bne.n	8002e8a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	e853 3f00 	ldrex	r3, [r3]
 8002e64:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f023 0310 	bic.w	r3, r3, #16
 8002e6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e76:	61bb      	str	r3, [r7, #24]
 8002e78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7a:	6979      	ldr	r1, [r7, #20]
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	e841 2300 	strex	r3, r2, [r1]
 8002e82:	613b      	str	r3, [r7, #16]
   return(result);
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1e6      	bne.n	8002e58 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002e9e:	bf00      	nop
 8002ea0:	3754      	adds	r7, #84	@ 0x54
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <std>:
 8002eac:	2300      	movs	r3, #0
 8002eae:	b510      	push	{r4, lr}
 8002eb0:	4604      	mov	r4, r0
 8002eb2:	e9c0 3300 	strd	r3, r3, [r0]
 8002eb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002eba:	6083      	str	r3, [r0, #8]
 8002ebc:	8181      	strh	r1, [r0, #12]
 8002ebe:	6643      	str	r3, [r0, #100]	@ 0x64
 8002ec0:	81c2      	strh	r2, [r0, #14]
 8002ec2:	6183      	str	r3, [r0, #24]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	2208      	movs	r2, #8
 8002ec8:	305c      	adds	r0, #92	@ 0x5c
 8002eca:	f000 f9e7 	bl	800329c <memset>
 8002ece:	4b0d      	ldr	r3, [pc, #52]	@ (8002f04 <std+0x58>)
 8002ed0:	6263      	str	r3, [r4, #36]	@ 0x24
 8002ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8002f08 <std+0x5c>)
 8002ed4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8002f0c <std+0x60>)
 8002ed8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002eda:	4b0d      	ldr	r3, [pc, #52]	@ (8002f10 <std+0x64>)
 8002edc:	6323      	str	r3, [r4, #48]	@ 0x30
 8002ede:	4b0d      	ldr	r3, [pc, #52]	@ (8002f14 <std+0x68>)
 8002ee0:	6224      	str	r4, [r4, #32]
 8002ee2:	429c      	cmp	r4, r3
 8002ee4:	d006      	beq.n	8002ef4 <std+0x48>
 8002ee6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002eea:	4294      	cmp	r4, r2
 8002eec:	d002      	beq.n	8002ef4 <std+0x48>
 8002eee:	33d0      	adds	r3, #208	@ 0xd0
 8002ef0:	429c      	cmp	r4, r3
 8002ef2:	d105      	bne.n	8002f00 <std+0x54>
 8002ef4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002efc:	f000 ba46 	b.w	800338c <__retarget_lock_init_recursive>
 8002f00:	bd10      	pop	{r4, pc}
 8002f02:	bf00      	nop
 8002f04:	080030ed 	.word	0x080030ed
 8002f08:	0800310f 	.word	0x0800310f
 8002f0c:	08003147 	.word	0x08003147
 8002f10:	0800316b 	.word	0x0800316b
 8002f14:	20000114 	.word	0x20000114

08002f18 <stdio_exit_handler>:
 8002f18:	4a02      	ldr	r2, [pc, #8]	@ (8002f24 <stdio_exit_handler+0xc>)
 8002f1a:	4903      	ldr	r1, [pc, #12]	@ (8002f28 <stdio_exit_handler+0x10>)
 8002f1c:	4803      	ldr	r0, [pc, #12]	@ (8002f2c <stdio_exit_handler+0x14>)
 8002f1e:	f000 b869 	b.w	8002ff4 <_fwalk_sglue>
 8002f22:	bf00      	nop
 8002f24:	2000000c 	.word	0x2000000c
 8002f28:	0800368d 	.word	0x0800368d
 8002f2c:	2000001c 	.word	0x2000001c

08002f30 <cleanup_stdio>:
 8002f30:	6841      	ldr	r1, [r0, #4]
 8002f32:	4b0c      	ldr	r3, [pc, #48]	@ (8002f64 <cleanup_stdio+0x34>)
 8002f34:	4299      	cmp	r1, r3
 8002f36:	b510      	push	{r4, lr}
 8002f38:	4604      	mov	r4, r0
 8002f3a:	d001      	beq.n	8002f40 <cleanup_stdio+0x10>
 8002f3c:	f000 fba6 	bl	800368c <_fflush_r>
 8002f40:	68a1      	ldr	r1, [r4, #8]
 8002f42:	4b09      	ldr	r3, [pc, #36]	@ (8002f68 <cleanup_stdio+0x38>)
 8002f44:	4299      	cmp	r1, r3
 8002f46:	d002      	beq.n	8002f4e <cleanup_stdio+0x1e>
 8002f48:	4620      	mov	r0, r4
 8002f4a:	f000 fb9f 	bl	800368c <_fflush_r>
 8002f4e:	68e1      	ldr	r1, [r4, #12]
 8002f50:	4b06      	ldr	r3, [pc, #24]	@ (8002f6c <cleanup_stdio+0x3c>)
 8002f52:	4299      	cmp	r1, r3
 8002f54:	d004      	beq.n	8002f60 <cleanup_stdio+0x30>
 8002f56:	4620      	mov	r0, r4
 8002f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f5c:	f000 bb96 	b.w	800368c <_fflush_r>
 8002f60:	bd10      	pop	{r4, pc}
 8002f62:	bf00      	nop
 8002f64:	20000114 	.word	0x20000114
 8002f68:	2000017c 	.word	0x2000017c
 8002f6c:	200001e4 	.word	0x200001e4

08002f70 <global_stdio_init.part.0>:
 8002f70:	b510      	push	{r4, lr}
 8002f72:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <global_stdio_init.part.0+0x30>)
 8002f74:	4c0b      	ldr	r4, [pc, #44]	@ (8002fa4 <global_stdio_init.part.0+0x34>)
 8002f76:	4a0c      	ldr	r2, [pc, #48]	@ (8002fa8 <global_stdio_init.part.0+0x38>)
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	2104      	movs	r1, #4
 8002f80:	f7ff ff94 	bl	8002eac <std>
 8002f84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002f88:	2201      	movs	r2, #1
 8002f8a:	2109      	movs	r1, #9
 8002f8c:	f7ff ff8e 	bl	8002eac <std>
 8002f90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002f94:	2202      	movs	r2, #2
 8002f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f9a:	2112      	movs	r1, #18
 8002f9c:	f7ff bf86 	b.w	8002eac <std>
 8002fa0:	2000024c 	.word	0x2000024c
 8002fa4:	20000114 	.word	0x20000114
 8002fa8:	08002f19 	.word	0x08002f19

08002fac <__sfp_lock_acquire>:
 8002fac:	4801      	ldr	r0, [pc, #4]	@ (8002fb4 <__sfp_lock_acquire+0x8>)
 8002fae:	f000 b9ee 	b.w	800338e <__retarget_lock_acquire_recursive>
 8002fb2:	bf00      	nop
 8002fb4:	20000255 	.word	0x20000255

08002fb8 <__sfp_lock_release>:
 8002fb8:	4801      	ldr	r0, [pc, #4]	@ (8002fc0 <__sfp_lock_release+0x8>)
 8002fba:	f000 b9e9 	b.w	8003390 <__retarget_lock_release_recursive>
 8002fbe:	bf00      	nop
 8002fc0:	20000255 	.word	0x20000255

08002fc4 <__sinit>:
 8002fc4:	b510      	push	{r4, lr}
 8002fc6:	4604      	mov	r4, r0
 8002fc8:	f7ff fff0 	bl	8002fac <__sfp_lock_acquire>
 8002fcc:	6a23      	ldr	r3, [r4, #32]
 8002fce:	b11b      	cbz	r3, 8002fd8 <__sinit+0x14>
 8002fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fd4:	f7ff bff0 	b.w	8002fb8 <__sfp_lock_release>
 8002fd8:	4b04      	ldr	r3, [pc, #16]	@ (8002fec <__sinit+0x28>)
 8002fda:	6223      	str	r3, [r4, #32]
 8002fdc:	4b04      	ldr	r3, [pc, #16]	@ (8002ff0 <__sinit+0x2c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1f5      	bne.n	8002fd0 <__sinit+0xc>
 8002fe4:	f7ff ffc4 	bl	8002f70 <global_stdio_init.part.0>
 8002fe8:	e7f2      	b.n	8002fd0 <__sinit+0xc>
 8002fea:	bf00      	nop
 8002fec:	08002f31 	.word	0x08002f31
 8002ff0:	2000024c 	.word	0x2000024c

08002ff4 <_fwalk_sglue>:
 8002ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ff8:	4607      	mov	r7, r0
 8002ffa:	4688      	mov	r8, r1
 8002ffc:	4614      	mov	r4, r2
 8002ffe:	2600      	movs	r6, #0
 8003000:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003004:	f1b9 0901 	subs.w	r9, r9, #1
 8003008:	d505      	bpl.n	8003016 <_fwalk_sglue+0x22>
 800300a:	6824      	ldr	r4, [r4, #0]
 800300c:	2c00      	cmp	r4, #0
 800300e:	d1f7      	bne.n	8003000 <_fwalk_sglue+0xc>
 8003010:	4630      	mov	r0, r6
 8003012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003016:	89ab      	ldrh	r3, [r5, #12]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d907      	bls.n	800302c <_fwalk_sglue+0x38>
 800301c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003020:	3301      	adds	r3, #1
 8003022:	d003      	beq.n	800302c <_fwalk_sglue+0x38>
 8003024:	4629      	mov	r1, r5
 8003026:	4638      	mov	r0, r7
 8003028:	47c0      	blx	r8
 800302a:	4306      	orrs	r6, r0
 800302c:	3568      	adds	r5, #104	@ 0x68
 800302e:	e7e9      	b.n	8003004 <_fwalk_sglue+0x10>

08003030 <_puts_r>:
 8003030:	6a03      	ldr	r3, [r0, #32]
 8003032:	b570      	push	{r4, r5, r6, lr}
 8003034:	6884      	ldr	r4, [r0, #8]
 8003036:	4605      	mov	r5, r0
 8003038:	460e      	mov	r6, r1
 800303a:	b90b      	cbnz	r3, 8003040 <_puts_r+0x10>
 800303c:	f7ff ffc2 	bl	8002fc4 <__sinit>
 8003040:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003042:	07db      	lsls	r3, r3, #31
 8003044:	d405      	bmi.n	8003052 <_puts_r+0x22>
 8003046:	89a3      	ldrh	r3, [r4, #12]
 8003048:	0598      	lsls	r0, r3, #22
 800304a:	d402      	bmi.n	8003052 <_puts_r+0x22>
 800304c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800304e:	f000 f99e 	bl	800338e <__retarget_lock_acquire_recursive>
 8003052:	89a3      	ldrh	r3, [r4, #12]
 8003054:	0719      	lsls	r1, r3, #28
 8003056:	d502      	bpl.n	800305e <_puts_r+0x2e>
 8003058:	6923      	ldr	r3, [r4, #16]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d135      	bne.n	80030ca <_puts_r+0x9a>
 800305e:	4621      	mov	r1, r4
 8003060:	4628      	mov	r0, r5
 8003062:	f000 f8c5 	bl	80031f0 <__swsetup_r>
 8003066:	b380      	cbz	r0, 80030ca <_puts_r+0x9a>
 8003068:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800306c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800306e:	07da      	lsls	r2, r3, #31
 8003070:	d405      	bmi.n	800307e <_puts_r+0x4e>
 8003072:	89a3      	ldrh	r3, [r4, #12]
 8003074:	059b      	lsls	r3, r3, #22
 8003076:	d402      	bmi.n	800307e <_puts_r+0x4e>
 8003078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800307a:	f000 f989 	bl	8003390 <__retarget_lock_release_recursive>
 800307e:	4628      	mov	r0, r5
 8003080:	bd70      	pop	{r4, r5, r6, pc}
 8003082:	2b00      	cmp	r3, #0
 8003084:	da04      	bge.n	8003090 <_puts_r+0x60>
 8003086:	69a2      	ldr	r2, [r4, #24]
 8003088:	429a      	cmp	r2, r3
 800308a:	dc17      	bgt.n	80030bc <_puts_r+0x8c>
 800308c:	290a      	cmp	r1, #10
 800308e:	d015      	beq.n	80030bc <_puts_r+0x8c>
 8003090:	6823      	ldr	r3, [r4, #0]
 8003092:	1c5a      	adds	r2, r3, #1
 8003094:	6022      	str	r2, [r4, #0]
 8003096:	7019      	strb	r1, [r3, #0]
 8003098:	68a3      	ldr	r3, [r4, #8]
 800309a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800309e:	3b01      	subs	r3, #1
 80030a0:	60a3      	str	r3, [r4, #8]
 80030a2:	2900      	cmp	r1, #0
 80030a4:	d1ed      	bne.n	8003082 <_puts_r+0x52>
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	da11      	bge.n	80030ce <_puts_r+0x9e>
 80030aa:	4622      	mov	r2, r4
 80030ac:	210a      	movs	r1, #10
 80030ae:	4628      	mov	r0, r5
 80030b0:	f000 f85f 	bl	8003172 <__swbuf_r>
 80030b4:	3001      	adds	r0, #1
 80030b6:	d0d7      	beq.n	8003068 <_puts_r+0x38>
 80030b8:	250a      	movs	r5, #10
 80030ba:	e7d7      	b.n	800306c <_puts_r+0x3c>
 80030bc:	4622      	mov	r2, r4
 80030be:	4628      	mov	r0, r5
 80030c0:	f000 f857 	bl	8003172 <__swbuf_r>
 80030c4:	3001      	adds	r0, #1
 80030c6:	d1e7      	bne.n	8003098 <_puts_r+0x68>
 80030c8:	e7ce      	b.n	8003068 <_puts_r+0x38>
 80030ca:	3e01      	subs	r6, #1
 80030cc:	e7e4      	b.n	8003098 <_puts_r+0x68>
 80030ce:	6823      	ldr	r3, [r4, #0]
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	6022      	str	r2, [r4, #0]
 80030d4:	220a      	movs	r2, #10
 80030d6:	701a      	strb	r2, [r3, #0]
 80030d8:	e7ee      	b.n	80030b8 <_puts_r+0x88>
	...

080030dc <puts>:
 80030dc:	4b02      	ldr	r3, [pc, #8]	@ (80030e8 <puts+0xc>)
 80030de:	4601      	mov	r1, r0
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	f7ff bfa5 	b.w	8003030 <_puts_r>
 80030e6:	bf00      	nop
 80030e8:	20000018 	.word	0x20000018

080030ec <__sread>:
 80030ec:	b510      	push	{r4, lr}
 80030ee:	460c      	mov	r4, r1
 80030f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030f4:	f000 f8fc 	bl	80032f0 <_read_r>
 80030f8:	2800      	cmp	r0, #0
 80030fa:	bfab      	itete	ge
 80030fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80030fe:	89a3      	ldrhlt	r3, [r4, #12]
 8003100:	181b      	addge	r3, r3, r0
 8003102:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003106:	bfac      	ite	ge
 8003108:	6563      	strge	r3, [r4, #84]	@ 0x54
 800310a:	81a3      	strhlt	r3, [r4, #12]
 800310c:	bd10      	pop	{r4, pc}

0800310e <__swrite>:
 800310e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003112:	461f      	mov	r7, r3
 8003114:	898b      	ldrh	r3, [r1, #12]
 8003116:	05db      	lsls	r3, r3, #23
 8003118:	4605      	mov	r5, r0
 800311a:	460c      	mov	r4, r1
 800311c:	4616      	mov	r6, r2
 800311e:	d505      	bpl.n	800312c <__swrite+0x1e>
 8003120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003124:	2302      	movs	r3, #2
 8003126:	2200      	movs	r2, #0
 8003128:	f000 f8d0 	bl	80032cc <_lseek_r>
 800312c:	89a3      	ldrh	r3, [r4, #12]
 800312e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003132:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003136:	81a3      	strh	r3, [r4, #12]
 8003138:	4632      	mov	r2, r6
 800313a:	463b      	mov	r3, r7
 800313c:	4628      	mov	r0, r5
 800313e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003142:	f000 b8e7 	b.w	8003314 <_write_r>

08003146 <__sseek>:
 8003146:	b510      	push	{r4, lr}
 8003148:	460c      	mov	r4, r1
 800314a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800314e:	f000 f8bd 	bl	80032cc <_lseek_r>
 8003152:	1c43      	adds	r3, r0, #1
 8003154:	89a3      	ldrh	r3, [r4, #12]
 8003156:	bf15      	itete	ne
 8003158:	6560      	strne	r0, [r4, #84]	@ 0x54
 800315a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800315e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003162:	81a3      	strheq	r3, [r4, #12]
 8003164:	bf18      	it	ne
 8003166:	81a3      	strhne	r3, [r4, #12]
 8003168:	bd10      	pop	{r4, pc}

0800316a <__sclose>:
 800316a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800316e:	f000 b89d 	b.w	80032ac <_close_r>

08003172 <__swbuf_r>:
 8003172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003174:	460e      	mov	r6, r1
 8003176:	4614      	mov	r4, r2
 8003178:	4605      	mov	r5, r0
 800317a:	b118      	cbz	r0, 8003184 <__swbuf_r+0x12>
 800317c:	6a03      	ldr	r3, [r0, #32]
 800317e:	b90b      	cbnz	r3, 8003184 <__swbuf_r+0x12>
 8003180:	f7ff ff20 	bl	8002fc4 <__sinit>
 8003184:	69a3      	ldr	r3, [r4, #24]
 8003186:	60a3      	str	r3, [r4, #8]
 8003188:	89a3      	ldrh	r3, [r4, #12]
 800318a:	071a      	lsls	r2, r3, #28
 800318c:	d501      	bpl.n	8003192 <__swbuf_r+0x20>
 800318e:	6923      	ldr	r3, [r4, #16]
 8003190:	b943      	cbnz	r3, 80031a4 <__swbuf_r+0x32>
 8003192:	4621      	mov	r1, r4
 8003194:	4628      	mov	r0, r5
 8003196:	f000 f82b 	bl	80031f0 <__swsetup_r>
 800319a:	b118      	cbz	r0, 80031a4 <__swbuf_r+0x32>
 800319c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80031a0:	4638      	mov	r0, r7
 80031a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031a4:	6823      	ldr	r3, [r4, #0]
 80031a6:	6922      	ldr	r2, [r4, #16]
 80031a8:	1a98      	subs	r0, r3, r2
 80031aa:	6963      	ldr	r3, [r4, #20]
 80031ac:	b2f6      	uxtb	r6, r6
 80031ae:	4283      	cmp	r3, r0
 80031b0:	4637      	mov	r7, r6
 80031b2:	dc05      	bgt.n	80031c0 <__swbuf_r+0x4e>
 80031b4:	4621      	mov	r1, r4
 80031b6:	4628      	mov	r0, r5
 80031b8:	f000 fa68 	bl	800368c <_fflush_r>
 80031bc:	2800      	cmp	r0, #0
 80031be:	d1ed      	bne.n	800319c <__swbuf_r+0x2a>
 80031c0:	68a3      	ldr	r3, [r4, #8]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	60a3      	str	r3, [r4, #8]
 80031c6:	6823      	ldr	r3, [r4, #0]
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	6022      	str	r2, [r4, #0]
 80031cc:	701e      	strb	r6, [r3, #0]
 80031ce:	6962      	ldr	r2, [r4, #20]
 80031d0:	1c43      	adds	r3, r0, #1
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d004      	beq.n	80031e0 <__swbuf_r+0x6e>
 80031d6:	89a3      	ldrh	r3, [r4, #12]
 80031d8:	07db      	lsls	r3, r3, #31
 80031da:	d5e1      	bpl.n	80031a0 <__swbuf_r+0x2e>
 80031dc:	2e0a      	cmp	r6, #10
 80031de:	d1df      	bne.n	80031a0 <__swbuf_r+0x2e>
 80031e0:	4621      	mov	r1, r4
 80031e2:	4628      	mov	r0, r5
 80031e4:	f000 fa52 	bl	800368c <_fflush_r>
 80031e8:	2800      	cmp	r0, #0
 80031ea:	d0d9      	beq.n	80031a0 <__swbuf_r+0x2e>
 80031ec:	e7d6      	b.n	800319c <__swbuf_r+0x2a>
	...

080031f0 <__swsetup_r>:
 80031f0:	b538      	push	{r3, r4, r5, lr}
 80031f2:	4b29      	ldr	r3, [pc, #164]	@ (8003298 <__swsetup_r+0xa8>)
 80031f4:	4605      	mov	r5, r0
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	460c      	mov	r4, r1
 80031fa:	b118      	cbz	r0, 8003204 <__swsetup_r+0x14>
 80031fc:	6a03      	ldr	r3, [r0, #32]
 80031fe:	b90b      	cbnz	r3, 8003204 <__swsetup_r+0x14>
 8003200:	f7ff fee0 	bl	8002fc4 <__sinit>
 8003204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003208:	0719      	lsls	r1, r3, #28
 800320a:	d422      	bmi.n	8003252 <__swsetup_r+0x62>
 800320c:	06da      	lsls	r2, r3, #27
 800320e:	d407      	bmi.n	8003220 <__swsetup_r+0x30>
 8003210:	2209      	movs	r2, #9
 8003212:	602a      	str	r2, [r5, #0]
 8003214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003218:	81a3      	strh	r3, [r4, #12]
 800321a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800321e:	e033      	b.n	8003288 <__swsetup_r+0x98>
 8003220:	0758      	lsls	r0, r3, #29
 8003222:	d512      	bpl.n	800324a <__swsetup_r+0x5a>
 8003224:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003226:	b141      	cbz	r1, 800323a <__swsetup_r+0x4a>
 8003228:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800322c:	4299      	cmp	r1, r3
 800322e:	d002      	beq.n	8003236 <__swsetup_r+0x46>
 8003230:	4628      	mov	r0, r5
 8003232:	f000 f8af 	bl	8003394 <_free_r>
 8003236:	2300      	movs	r3, #0
 8003238:	6363      	str	r3, [r4, #52]	@ 0x34
 800323a:	89a3      	ldrh	r3, [r4, #12]
 800323c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003240:	81a3      	strh	r3, [r4, #12]
 8003242:	2300      	movs	r3, #0
 8003244:	6063      	str	r3, [r4, #4]
 8003246:	6923      	ldr	r3, [r4, #16]
 8003248:	6023      	str	r3, [r4, #0]
 800324a:	89a3      	ldrh	r3, [r4, #12]
 800324c:	f043 0308 	orr.w	r3, r3, #8
 8003250:	81a3      	strh	r3, [r4, #12]
 8003252:	6923      	ldr	r3, [r4, #16]
 8003254:	b94b      	cbnz	r3, 800326a <__swsetup_r+0x7a>
 8003256:	89a3      	ldrh	r3, [r4, #12]
 8003258:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800325c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003260:	d003      	beq.n	800326a <__swsetup_r+0x7a>
 8003262:	4621      	mov	r1, r4
 8003264:	4628      	mov	r0, r5
 8003266:	f000 fa5f 	bl	8003728 <__smakebuf_r>
 800326a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800326e:	f013 0201 	ands.w	r2, r3, #1
 8003272:	d00a      	beq.n	800328a <__swsetup_r+0x9a>
 8003274:	2200      	movs	r2, #0
 8003276:	60a2      	str	r2, [r4, #8]
 8003278:	6962      	ldr	r2, [r4, #20]
 800327a:	4252      	negs	r2, r2
 800327c:	61a2      	str	r2, [r4, #24]
 800327e:	6922      	ldr	r2, [r4, #16]
 8003280:	b942      	cbnz	r2, 8003294 <__swsetup_r+0xa4>
 8003282:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003286:	d1c5      	bne.n	8003214 <__swsetup_r+0x24>
 8003288:	bd38      	pop	{r3, r4, r5, pc}
 800328a:	0799      	lsls	r1, r3, #30
 800328c:	bf58      	it	pl
 800328e:	6962      	ldrpl	r2, [r4, #20]
 8003290:	60a2      	str	r2, [r4, #8]
 8003292:	e7f4      	b.n	800327e <__swsetup_r+0x8e>
 8003294:	2000      	movs	r0, #0
 8003296:	e7f7      	b.n	8003288 <__swsetup_r+0x98>
 8003298:	20000018 	.word	0x20000018

0800329c <memset>:
 800329c:	4402      	add	r2, r0
 800329e:	4603      	mov	r3, r0
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d100      	bne.n	80032a6 <memset+0xa>
 80032a4:	4770      	bx	lr
 80032a6:	f803 1b01 	strb.w	r1, [r3], #1
 80032aa:	e7f9      	b.n	80032a0 <memset+0x4>

080032ac <_close_r>:
 80032ac:	b538      	push	{r3, r4, r5, lr}
 80032ae:	4d06      	ldr	r5, [pc, #24]	@ (80032c8 <_close_r+0x1c>)
 80032b0:	2300      	movs	r3, #0
 80032b2:	4604      	mov	r4, r0
 80032b4:	4608      	mov	r0, r1
 80032b6:	602b      	str	r3, [r5, #0]
 80032b8:	f7fd f924 	bl	8000504 <_close>
 80032bc:	1c43      	adds	r3, r0, #1
 80032be:	d102      	bne.n	80032c6 <_close_r+0x1a>
 80032c0:	682b      	ldr	r3, [r5, #0]
 80032c2:	b103      	cbz	r3, 80032c6 <_close_r+0x1a>
 80032c4:	6023      	str	r3, [r4, #0]
 80032c6:	bd38      	pop	{r3, r4, r5, pc}
 80032c8:	20000250 	.word	0x20000250

080032cc <_lseek_r>:
 80032cc:	b538      	push	{r3, r4, r5, lr}
 80032ce:	4d07      	ldr	r5, [pc, #28]	@ (80032ec <_lseek_r+0x20>)
 80032d0:	4604      	mov	r4, r0
 80032d2:	4608      	mov	r0, r1
 80032d4:	4611      	mov	r1, r2
 80032d6:	2200      	movs	r2, #0
 80032d8:	602a      	str	r2, [r5, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	f7fd f939 	bl	8000552 <_lseek>
 80032e0:	1c43      	adds	r3, r0, #1
 80032e2:	d102      	bne.n	80032ea <_lseek_r+0x1e>
 80032e4:	682b      	ldr	r3, [r5, #0]
 80032e6:	b103      	cbz	r3, 80032ea <_lseek_r+0x1e>
 80032e8:	6023      	str	r3, [r4, #0]
 80032ea:	bd38      	pop	{r3, r4, r5, pc}
 80032ec:	20000250 	.word	0x20000250

080032f0 <_read_r>:
 80032f0:	b538      	push	{r3, r4, r5, lr}
 80032f2:	4d07      	ldr	r5, [pc, #28]	@ (8003310 <_read_r+0x20>)
 80032f4:	4604      	mov	r4, r0
 80032f6:	4608      	mov	r0, r1
 80032f8:	4611      	mov	r1, r2
 80032fa:	2200      	movs	r2, #0
 80032fc:	602a      	str	r2, [r5, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	f7fd f8e3 	bl	80004ca <_read>
 8003304:	1c43      	adds	r3, r0, #1
 8003306:	d102      	bne.n	800330e <_read_r+0x1e>
 8003308:	682b      	ldr	r3, [r5, #0]
 800330a:	b103      	cbz	r3, 800330e <_read_r+0x1e>
 800330c:	6023      	str	r3, [r4, #0]
 800330e:	bd38      	pop	{r3, r4, r5, pc}
 8003310:	20000250 	.word	0x20000250

08003314 <_write_r>:
 8003314:	b538      	push	{r3, r4, r5, lr}
 8003316:	4d07      	ldr	r5, [pc, #28]	@ (8003334 <_write_r+0x20>)
 8003318:	4604      	mov	r4, r0
 800331a:	4608      	mov	r0, r1
 800331c:	4611      	mov	r1, r2
 800331e:	2200      	movs	r2, #0
 8003320:	602a      	str	r2, [r5, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	f7fc ffe3 	bl	80002ee <_write>
 8003328:	1c43      	adds	r3, r0, #1
 800332a:	d102      	bne.n	8003332 <_write_r+0x1e>
 800332c:	682b      	ldr	r3, [r5, #0]
 800332e:	b103      	cbz	r3, 8003332 <_write_r+0x1e>
 8003330:	6023      	str	r3, [r4, #0]
 8003332:	bd38      	pop	{r3, r4, r5, pc}
 8003334:	20000250 	.word	0x20000250

08003338 <__errno>:
 8003338:	4b01      	ldr	r3, [pc, #4]	@ (8003340 <__errno+0x8>)
 800333a:	6818      	ldr	r0, [r3, #0]
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	20000018 	.word	0x20000018

08003344 <__libc_init_array>:
 8003344:	b570      	push	{r4, r5, r6, lr}
 8003346:	4d0d      	ldr	r5, [pc, #52]	@ (800337c <__libc_init_array+0x38>)
 8003348:	4c0d      	ldr	r4, [pc, #52]	@ (8003380 <__libc_init_array+0x3c>)
 800334a:	1b64      	subs	r4, r4, r5
 800334c:	10a4      	asrs	r4, r4, #2
 800334e:	2600      	movs	r6, #0
 8003350:	42a6      	cmp	r6, r4
 8003352:	d109      	bne.n	8003368 <__libc_init_array+0x24>
 8003354:	4d0b      	ldr	r5, [pc, #44]	@ (8003384 <__libc_init_array+0x40>)
 8003356:	4c0c      	ldr	r4, [pc, #48]	@ (8003388 <__libc_init_array+0x44>)
 8003358:	f000 fa54 	bl	8003804 <_init>
 800335c:	1b64      	subs	r4, r4, r5
 800335e:	10a4      	asrs	r4, r4, #2
 8003360:	2600      	movs	r6, #0
 8003362:	42a6      	cmp	r6, r4
 8003364:	d105      	bne.n	8003372 <__libc_init_array+0x2e>
 8003366:	bd70      	pop	{r4, r5, r6, pc}
 8003368:	f855 3b04 	ldr.w	r3, [r5], #4
 800336c:	4798      	blx	r3
 800336e:	3601      	adds	r6, #1
 8003370:	e7ee      	b.n	8003350 <__libc_init_array+0xc>
 8003372:	f855 3b04 	ldr.w	r3, [r5], #4
 8003376:	4798      	blx	r3
 8003378:	3601      	adds	r6, #1
 800337a:	e7f2      	b.n	8003362 <__libc_init_array+0x1e>
 800337c:	0800385c 	.word	0x0800385c
 8003380:	0800385c 	.word	0x0800385c
 8003384:	0800385c 	.word	0x0800385c
 8003388:	08003860 	.word	0x08003860

0800338c <__retarget_lock_init_recursive>:
 800338c:	4770      	bx	lr

0800338e <__retarget_lock_acquire_recursive>:
 800338e:	4770      	bx	lr

08003390 <__retarget_lock_release_recursive>:
 8003390:	4770      	bx	lr
	...

08003394 <_free_r>:
 8003394:	b538      	push	{r3, r4, r5, lr}
 8003396:	4605      	mov	r5, r0
 8003398:	2900      	cmp	r1, #0
 800339a:	d041      	beq.n	8003420 <_free_r+0x8c>
 800339c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033a0:	1f0c      	subs	r4, r1, #4
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	bfb8      	it	lt
 80033a6:	18e4      	addlt	r4, r4, r3
 80033a8:	f000 f8e0 	bl	800356c <__malloc_lock>
 80033ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003424 <_free_r+0x90>)
 80033ae:	6813      	ldr	r3, [r2, #0]
 80033b0:	b933      	cbnz	r3, 80033c0 <_free_r+0x2c>
 80033b2:	6063      	str	r3, [r4, #4]
 80033b4:	6014      	str	r4, [r2, #0]
 80033b6:	4628      	mov	r0, r5
 80033b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033bc:	f000 b8dc 	b.w	8003578 <__malloc_unlock>
 80033c0:	42a3      	cmp	r3, r4
 80033c2:	d908      	bls.n	80033d6 <_free_r+0x42>
 80033c4:	6820      	ldr	r0, [r4, #0]
 80033c6:	1821      	adds	r1, r4, r0
 80033c8:	428b      	cmp	r3, r1
 80033ca:	bf01      	itttt	eq
 80033cc:	6819      	ldreq	r1, [r3, #0]
 80033ce:	685b      	ldreq	r3, [r3, #4]
 80033d0:	1809      	addeq	r1, r1, r0
 80033d2:	6021      	streq	r1, [r4, #0]
 80033d4:	e7ed      	b.n	80033b2 <_free_r+0x1e>
 80033d6:	461a      	mov	r2, r3
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	b10b      	cbz	r3, 80033e0 <_free_r+0x4c>
 80033dc:	42a3      	cmp	r3, r4
 80033de:	d9fa      	bls.n	80033d6 <_free_r+0x42>
 80033e0:	6811      	ldr	r1, [r2, #0]
 80033e2:	1850      	adds	r0, r2, r1
 80033e4:	42a0      	cmp	r0, r4
 80033e6:	d10b      	bne.n	8003400 <_free_r+0x6c>
 80033e8:	6820      	ldr	r0, [r4, #0]
 80033ea:	4401      	add	r1, r0
 80033ec:	1850      	adds	r0, r2, r1
 80033ee:	4283      	cmp	r3, r0
 80033f0:	6011      	str	r1, [r2, #0]
 80033f2:	d1e0      	bne.n	80033b6 <_free_r+0x22>
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	6053      	str	r3, [r2, #4]
 80033fa:	4408      	add	r0, r1
 80033fc:	6010      	str	r0, [r2, #0]
 80033fe:	e7da      	b.n	80033b6 <_free_r+0x22>
 8003400:	d902      	bls.n	8003408 <_free_r+0x74>
 8003402:	230c      	movs	r3, #12
 8003404:	602b      	str	r3, [r5, #0]
 8003406:	e7d6      	b.n	80033b6 <_free_r+0x22>
 8003408:	6820      	ldr	r0, [r4, #0]
 800340a:	1821      	adds	r1, r4, r0
 800340c:	428b      	cmp	r3, r1
 800340e:	bf04      	itt	eq
 8003410:	6819      	ldreq	r1, [r3, #0]
 8003412:	685b      	ldreq	r3, [r3, #4]
 8003414:	6063      	str	r3, [r4, #4]
 8003416:	bf04      	itt	eq
 8003418:	1809      	addeq	r1, r1, r0
 800341a:	6021      	streq	r1, [r4, #0]
 800341c:	6054      	str	r4, [r2, #4]
 800341e:	e7ca      	b.n	80033b6 <_free_r+0x22>
 8003420:	bd38      	pop	{r3, r4, r5, pc}
 8003422:	bf00      	nop
 8003424:	2000025c 	.word	0x2000025c

08003428 <sbrk_aligned>:
 8003428:	b570      	push	{r4, r5, r6, lr}
 800342a:	4e0f      	ldr	r6, [pc, #60]	@ (8003468 <sbrk_aligned+0x40>)
 800342c:	460c      	mov	r4, r1
 800342e:	6831      	ldr	r1, [r6, #0]
 8003430:	4605      	mov	r5, r0
 8003432:	b911      	cbnz	r1, 800343a <sbrk_aligned+0x12>
 8003434:	f000 f9d6 	bl	80037e4 <_sbrk_r>
 8003438:	6030      	str	r0, [r6, #0]
 800343a:	4621      	mov	r1, r4
 800343c:	4628      	mov	r0, r5
 800343e:	f000 f9d1 	bl	80037e4 <_sbrk_r>
 8003442:	1c43      	adds	r3, r0, #1
 8003444:	d103      	bne.n	800344e <sbrk_aligned+0x26>
 8003446:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800344a:	4620      	mov	r0, r4
 800344c:	bd70      	pop	{r4, r5, r6, pc}
 800344e:	1cc4      	adds	r4, r0, #3
 8003450:	f024 0403 	bic.w	r4, r4, #3
 8003454:	42a0      	cmp	r0, r4
 8003456:	d0f8      	beq.n	800344a <sbrk_aligned+0x22>
 8003458:	1a21      	subs	r1, r4, r0
 800345a:	4628      	mov	r0, r5
 800345c:	f000 f9c2 	bl	80037e4 <_sbrk_r>
 8003460:	3001      	adds	r0, #1
 8003462:	d1f2      	bne.n	800344a <sbrk_aligned+0x22>
 8003464:	e7ef      	b.n	8003446 <sbrk_aligned+0x1e>
 8003466:	bf00      	nop
 8003468:	20000258 	.word	0x20000258

0800346c <_malloc_r>:
 800346c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003470:	1ccd      	adds	r5, r1, #3
 8003472:	f025 0503 	bic.w	r5, r5, #3
 8003476:	3508      	adds	r5, #8
 8003478:	2d0c      	cmp	r5, #12
 800347a:	bf38      	it	cc
 800347c:	250c      	movcc	r5, #12
 800347e:	2d00      	cmp	r5, #0
 8003480:	4606      	mov	r6, r0
 8003482:	db01      	blt.n	8003488 <_malloc_r+0x1c>
 8003484:	42a9      	cmp	r1, r5
 8003486:	d904      	bls.n	8003492 <_malloc_r+0x26>
 8003488:	230c      	movs	r3, #12
 800348a:	6033      	str	r3, [r6, #0]
 800348c:	2000      	movs	r0, #0
 800348e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003492:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003568 <_malloc_r+0xfc>
 8003496:	f000 f869 	bl	800356c <__malloc_lock>
 800349a:	f8d8 3000 	ldr.w	r3, [r8]
 800349e:	461c      	mov	r4, r3
 80034a0:	bb44      	cbnz	r4, 80034f4 <_malloc_r+0x88>
 80034a2:	4629      	mov	r1, r5
 80034a4:	4630      	mov	r0, r6
 80034a6:	f7ff ffbf 	bl	8003428 <sbrk_aligned>
 80034aa:	1c43      	adds	r3, r0, #1
 80034ac:	4604      	mov	r4, r0
 80034ae:	d158      	bne.n	8003562 <_malloc_r+0xf6>
 80034b0:	f8d8 4000 	ldr.w	r4, [r8]
 80034b4:	4627      	mov	r7, r4
 80034b6:	2f00      	cmp	r7, #0
 80034b8:	d143      	bne.n	8003542 <_malloc_r+0xd6>
 80034ba:	2c00      	cmp	r4, #0
 80034bc:	d04b      	beq.n	8003556 <_malloc_r+0xea>
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	4639      	mov	r1, r7
 80034c2:	4630      	mov	r0, r6
 80034c4:	eb04 0903 	add.w	r9, r4, r3
 80034c8:	f000 f98c 	bl	80037e4 <_sbrk_r>
 80034cc:	4581      	cmp	r9, r0
 80034ce:	d142      	bne.n	8003556 <_malloc_r+0xea>
 80034d0:	6821      	ldr	r1, [r4, #0]
 80034d2:	1a6d      	subs	r5, r5, r1
 80034d4:	4629      	mov	r1, r5
 80034d6:	4630      	mov	r0, r6
 80034d8:	f7ff ffa6 	bl	8003428 <sbrk_aligned>
 80034dc:	3001      	adds	r0, #1
 80034de:	d03a      	beq.n	8003556 <_malloc_r+0xea>
 80034e0:	6823      	ldr	r3, [r4, #0]
 80034e2:	442b      	add	r3, r5
 80034e4:	6023      	str	r3, [r4, #0]
 80034e6:	f8d8 3000 	ldr.w	r3, [r8]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	bb62      	cbnz	r2, 8003548 <_malloc_r+0xdc>
 80034ee:	f8c8 7000 	str.w	r7, [r8]
 80034f2:	e00f      	b.n	8003514 <_malloc_r+0xa8>
 80034f4:	6822      	ldr	r2, [r4, #0]
 80034f6:	1b52      	subs	r2, r2, r5
 80034f8:	d420      	bmi.n	800353c <_malloc_r+0xd0>
 80034fa:	2a0b      	cmp	r2, #11
 80034fc:	d917      	bls.n	800352e <_malloc_r+0xc2>
 80034fe:	1961      	adds	r1, r4, r5
 8003500:	42a3      	cmp	r3, r4
 8003502:	6025      	str	r5, [r4, #0]
 8003504:	bf18      	it	ne
 8003506:	6059      	strne	r1, [r3, #4]
 8003508:	6863      	ldr	r3, [r4, #4]
 800350a:	bf08      	it	eq
 800350c:	f8c8 1000 	streq.w	r1, [r8]
 8003510:	5162      	str	r2, [r4, r5]
 8003512:	604b      	str	r3, [r1, #4]
 8003514:	4630      	mov	r0, r6
 8003516:	f000 f82f 	bl	8003578 <__malloc_unlock>
 800351a:	f104 000b 	add.w	r0, r4, #11
 800351e:	1d23      	adds	r3, r4, #4
 8003520:	f020 0007 	bic.w	r0, r0, #7
 8003524:	1ac2      	subs	r2, r0, r3
 8003526:	bf1c      	itt	ne
 8003528:	1a1b      	subne	r3, r3, r0
 800352a:	50a3      	strne	r3, [r4, r2]
 800352c:	e7af      	b.n	800348e <_malloc_r+0x22>
 800352e:	6862      	ldr	r2, [r4, #4]
 8003530:	42a3      	cmp	r3, r4
 8003532:	bf0c      	ite	eq
 8003534:	f8c8 2000 	streq.w	r2, [r8]
 8003538:	605a      	strne	r2, [r3, #4]
 800353a:	e7eb      	b.n	8003514 <_malloc_r+0xa8>
 800353c:	4623      	mov	r3, r4
 800353e:	6864      	ldr	r4, [r4, #4]
 8003540:	e7ae      	b.n	80034a0 <_malloc_r+0x34>
 8003542:	463c      	mov	r4, r7
 8003544:	687f      	ldr	r7, [r7, #4]
 8003546:	e7b6      	b.n	80034b6 <_malloc_r+0x4a>
 8003548:	461a      	mov	r2, r3
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	42a3      	cmp	r3, r4
 800354e:	d1fb      	bne.n	8003548 <_malloc_r+0xdc>
 8003550:	2300      	movs	r3, #0
 8003552:	6053      	str	r3, [r2, #4]
 8003554:	e7de      	b.n	8003514 <_malloc_r+0xa8>
 8003556:	230c      	movs	r3, #12
 8003558:	6033      	str	r3, [r6, #0]
 800355a:	4630      	mov	r0, r6
 800355c:	f000 f80c 	bl	8003578 <__malloc_unlock>
 8003560:	e794      	b.n	800348c <_malloc_r+0x20>
 8003562:	6005      	str	r5, [r0, #0]
 8003564:	e7d6      	b.n	8003514 <_malloc_r+0xa8>
 8003566:	bf00      	nop
 8003568:	2000025c 	.word	0x2000025c

0800356c <__malloc_lock>:
 800356c:	4801      	ldr	r0, [pc, #4]	@ (8003574 <__malloc_lock+0x8>)
 800356e:	f7ff bf0e 	b.w	800338e <__retarget_lock_acquire_recursive>
 8003572:	bf00      	nop
 8003574:	20000254 	.word	0x20000254

08003578 <__malloc_unlock>:
 8003578:	4801      	ldr	r0, [pc, #4]	@ (8003580 <__malloc_unlock+0x8>)
 800357a:	f7ff bf09 	b.w	8003390 <__retarget_lock_release_recursive>
 800357e:	bf00      	nop
 8003580:	20000254 	.word	0x20000254

08003584 <__sflush_r>:
 8003584:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800358c:	0716      	lsls	r6, r2, #28
 800358e:	4605      	mov	r5, r0
 8003590:	460c      	mov	r4, r1
 8003592:	d454      	bmi.n	800363e <__sflush_r+0xba>
 8003594:	684b      	ldr	r3, [r1, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	dc02      	bgt.n	80035a0 <__sflush_r+0x1c>
 800359a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800359c:	2b00      	cmp	r3, #0
 800359e:	dd48      	ble.n	8003632 <__sflush_r+0xae>
 80035a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80035a2:	2e00      	cmp	r6, #0
 80035a4:	d045      	beq.n	8003632 <__sflush_r+0xae>
 80035a6:	2300      	movs	r3, #0
 80035a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80035ac:	682f      	ldr	r7, [r5, #0]
 80035ae:	6a21      	ldr	r1, [r4, #32]
 80035b0:	602b      	str	r3, [r5, #0]
 80035b2:	d030      	beq.n	8003616 <__sflush_r+0x92>
 80035b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80035b6:	89a3      	ldrh	r3, [r4, #12]
 80035b8:	0759      	lsls	r1, r3, #29
 80035ba:	d505      	bpl.n	80035c8 <__sflush_r+0x44>
 80035bc:	6863      	ldr	r3, [r4, #4]
 80035be:	1ad2      	subs	r2, r2, r3
 80035c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80035c2:	b10b      	cbz	r3, 80035c8 <__sflush_r+0x44>
 80035c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80035c6:	1ad2      	subs	r2, r2, r3
 80035c8:	2300      	movs	r3, #0
 80035ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80035cc:	6a21      	ldr	r1, [r4, #32]
 80035ce:	4628      	mov	r0, r5
 80035d0:	47b0      	blx	r6
 80035d2:	1c43      	adds	r3, r0, #1
 80035d4:	89a3      	ldrh	r3, [r4, #12]
 80035d6:	d106      	bne.n	80035e6 <__sflush_r+0x62>
 80035d8:	6829      	ldr	r1, [r5, #0]
 80035da:	291d      	cmp	r1, #29
 80035dc:	d82b      	bhi.n	8003636 <__sflush_r+0xb2>
 80035de:	4a2a      	ldr	r2, [pc, #168]	@ (8003688 <__sflush_r+0x104>)
 80035e0:	40ca      	lsrs	r2, r1
 80035e2:	07d6      	lsls	r6, r2, #31
 80035e4:	d527      	bpl.n	8003636 <__sflush_r+0xb2>
 80035e6:	2200      	movs	r2, #0
 80035e8:	6062      	str	r2, [r4, #4]
 80035ea:	04d9      	lsls	r1, r3, #19
 80035ec:	6922      	ldr	r2, [r4, #16]
 80035ee:	6022      	str	r2, [r4, #0]
 80035f0:	d504      	bpl.n	80035fc <__sflush_r+0x78>
 80035f2:	1c42      	adds	r2, r0, #1
 80035f4:	d101      	bne.n	80035fa <__sflush_r+0x76>
 80035f6:	682b      	ldr	r3, [r5, #0]
 80035f8:	b903      	cbnz	r3, 80035fc <__sflush_r+0x78>
 80035fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80035fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80035fe:	602f      	str	r7, [r5, #0]
 8003600:	b1b9      	cbz	r1, 8003632 <__sflush_r+0xae>
 8003602:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003606:	4299      	cmp	r1, r3
 8003608:	d002      	beq.n	8003610 <__sflush_r+0x8c>
 800360a:	4628      	mov	r0, r5
 800360c:	f7ff fec2 	bl	8003394 <_free_r>
 8003610:	2300      	movs	r3, #0
 8003612:	6363      	str	r3, [r4, #52]	@ 0x34
 8003614:	e00d      	b.n	8003632 <__sflush_r+0xae>
 8003616:	2301      	movs	r3, #1
 8003618:	4628      	mov	r0, r5
 800361a:	47b0      	blx	r6
 800361c:	4602      	mov	r2, r0
 800361e:	1c50      	adds	r0, r2, #1
 8003620:	d1c9      	bne.n	80035b6 <__sflush_r+0x32>
 8003622:	682b      	ldr	r3, [r5, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0c6      	beq.n	80035b6 <__sflush_r+0x32>
 8003628:	2b1d      	cmp	r3, #29
 800362a:	d001      	beq.n	8003630 <__sflush_r+0xac>
 800362c:	2b16      	cmp	r3, #22
 800362e:	d11e      	bne.n	800366e <__sflush_r+0xea>
 8003630:	602f      	str	r7, [r5, #0]
 8003632:	2000      	movs	r0, #0
 8003634:	e022      	b.n	800367c <__sflush_r+0xf8>
 8003636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800363a:	b21b      	sxth	r3, r3
 800363c:	e01b      	b.n	8003676 <__sflush_r+0xf2>
 800363e:	690f      	ldr	r7, [r1, #16]
 8003640:	2f00      	cmp	r7, #0
 8003642:	d0f6      	beq.n	8003632 <__sflush_r+0xae>
 8003644:	0793      	lsls	r3, r2, #30
 8003646:	680e      	ldr	r6, [r1, #0]
 8003648:	bf08      	it	eq
 800364a:	694b      	ldreq	r3, [r1, #20]
 800364c:	600f      	str	r7, [r1, #0]
 800364e:	bf18      	it	ne
 8003650:	2300      	movne	r3, #0
 8003652:	eba6 0807 	sub.w	r8, r6, r7
 8003656:	608b      	str	r3, [r1, #8]
 8003658:	f1b8 0f00 	cmp.w	r8, #0
 800365c:	dde9      	ble.n	8003632 <__sflush_r+0xae>
 800365e:	6a21      	ldr	r1, [r4, #32]
 8003660:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003662:	4643      	mov	r3, r8
 8003664:	463a      	mov	r2, r7
 8003666:	4628      	mov	r0, r5
 8003668:	47b0      	blx	r6
 800366a:	2800      	cmp	r0, #0
 800366c:	dc08      	bgt.n	8003680 <__sflush_r+0xfc>
 800366e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003676:	81a3      	strh	r3, [r4, #12]
 8003678:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800367c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003680:	4407      	add	r7, r0
 8003682:	eba8 0800 	sub.w	r8, r8, r0
 8003686:	e7e7      	b.n	8003658 <__sflush_r+0xd4>
 8003688:	20400001 	.word	0x20400001

0800368c <_fflush_r>:
 800368c:	b538      	push	{r3, r4, r5, lr}
 800368e:	690b      	ldr	r3, [r1, #16]
 8003690:	4605      	mov	r5, r0
 8003692:	460c      	mov	r4, r1
 8003694:	b913      	cbnz	r3, 800369c <_fflush_r+0x10>
 8003696:	2500      	movs	r5, #0
 8003698:	4628      	mov	r0, r5
 800369a:	bd38      	pop	{r3, r4, r5, pc}
 800369c:	b118      	cbz	r0, 80036a6 <_fflush_r+0x1a>
 800369e:	6a03      	ldr	r3, [r0, #32]
 80036a0:	b90b      	cbnz	r3, 80036a6 <_fflush_r+0x1a>
 80036a2:	f7ff fc8f 	bl	8002fc4 <__sinit>
 80036a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0f3      	beq.n	8003696 <_fflush_r+0xa>
 80036ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80036b0:	07d0      	lsls	r0, r2, #31
 80036b2:	d404      	bmi.n	80036be <_fflush_r+0x32>
 80036b4:	0599      	lsls	r1, r3, #22
 80036b6:	d402      	bmi.n	80036be <_fflush_r+0x32>
 80036b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036ba:	f7ff fe68 	bl	800338e <__retarget_lock_acquire_recursive>
 80036be:	4628      	mov	r0, r5
 80036c0:	4621      	mov	r1, r4
 80036c2:	f7ff ff5f 	bl	8003584 <__sflush_r>
 80036c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036c8:	07da      	lsls	r2, r3, #31
 80036ca:	4605      	mov	r5, r0
 80036cc:	d4e4      	bmi.n	8003698 <_fflush_r+0xc>
 80036ce:	89a3      	ldrh	r3, [r4, #12]
 80036d0:	059b      	lsls	r3, r3, #22
 80036d2:	d4e1      	bmi.n	8003698 <_fflush_r+0xc>
 80036d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036d6:	f7ff fe5b 	bl	8003390 <__retarget_lock_release_recursive>
 80036da:	e7dd      	b.n	8003698 <_fflush_r+0xc>

080036dc <__swhatbuf_r>:
 80036dc:	b570      	push	{r4, r5, r6, lr}
 80036de:	460c      	mov	r4, r1
 80036e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036e4:	2900      	cmp	r1, #0
 80036e6:	b096      	sub	sp, #88	@ 0x58
 80036e8:	4615      	mov	r5, r2
 80036ea:	461e      	mov	r6, r3
 80036ec:	da0d      	bge.n	800370a <__swhatbuf_r+0x2e>
 80036ee:	89a3      	ldrh	r3, [r4, #12]
 80036f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80036f4:	f04f 0100 	mov.w	r1, #0
 80036f8:	bf14      	ite	ne
 80036fa:	2340      	movne	r3, #64	@ 0x40
 80036fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003700:	2000      	movs	r0, #0
 8003702:	6031      	str	r1, [r6, #0]
 8003704:	602b      	str	r3, [r5, #0]
 8003706:	b016      	add	sp, #88	@ 0x58
 8003708:	bd70      	pop	{r4, r5, r6, pc}
 800370a:	466a      	mov	r2, sp
 800370c:	f000 f848 	bl	80037a0 <_fstat_r>
 8003710:	2800      	cmp	r0, #0
 8003712:	dbec      	blt.n	80036ee <__swhatbuf_r+0x12>
 8003714:	9901      	ldr	r1, [sp, #4]
 8003716:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800371a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800371e:	4259      	negs	r1, r3
 8003720:	4159      	adcs	r1, r3
 8003722:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003726:	e7eb      	b.n	8003700 <__swhatbuf_r+0x24>

08003728 <__smakebuf_r>:
 8003728:	898b      	ldrh	r3, [r1, #12]
 800372a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800372c:	079d      	lsls	r5, r3, #30
 800372e:	4606      	mov	r6, r0
 8003730:	460c      	mov	r4, r1
 8003732:	d507      	bpl.n	8003744 <__smakebuf_r+0x1c>
 8003734:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003738:	6023      	str	r3, [r4, #0]
 800373a:	6123      	str	r3, [r4, #16]
 800373c:	2301      	movs	r3, #1
 800373e:	6163      	str	r3, [r4, #20]
 8003740:	b003      	add	sp, #12
 8003742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003744:	ab01      	add	r3, sp, #4
 8003746:	466a      	mov	r2, sp
 8003748:	f7ff ffc8 	bl	80036dc <__swhatbuf_r>
 800374c:	9f00      	ldr	r7, [sp, #0]
 800374e:	4605      	mov	r5, r0
 8003750:	4639      	mov	r1, r7
 8003752:	4630      	mov	r0, r6
 8003754:	f7ff fe8a 	bl	800346c <_malloc_r>
 8003758:	b948      	cbnz	r0, 800376e <__smakebuf_r+0x46>
 800375a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800375e:	059a      	lsls	r2, r3, #22
 8003760:	d4ee      	bmi.n	8003740 <__smakebuf_r+0x18>
 8003762:	f023 0303 	bic.w	r3, r3, #3
 8003766:	f043 0302 	orr.w	r3, r3, #2
 800376a:	81a3      	strh	r3, [r4, #12]
 800376c:	e7e2      	b.n	8003734 <__smakebuf_r+0xc>
 800376e:	89a3      	ldrh	r3, [r4, #12]
 8003770:	6020      	str	r0, [r4, #0]
 8003772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003776:	81a3      	strh	r3, [r4, #12]
 8003778:	9b01      	ldr	r3, [sp, #4]
 800377a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800377e:	b15b      	cbz	r3, 8003798 <__smakebuf_r+0x70>
 8003780:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003784:	4630      	mov	r0, r6
 8003786:	f000 f81d 	bl	80037c4 <_isatty_r>
 800378a:	b128      	cbz	r0, 8003798 <__smakebuf_r+0x70>
 800378c:	89a3      	ldrh	r3, [r4, #12]
 800378e:	f023 0303 	bic.w	r3, r3, #3
 8003792:	f043 0301 	orr.w	r3, r3, #1
 8003796:	81a3      	strh	r3, [r4, #12]
 8003798:	89a3      	ldrh	r3, [r4, #12]
 800379a:	431d      	orrs	r5, r3
 800379c:	81a5      	strh	r5, [r4, #12]
 800379e:	e7cf      	b.n	8003740 <__smakebuf_r+0x18>

080037a0 <_fstat_r>:
 80037a0:	b538      	push	{r3, r4, r5, lr}
 80037a2:	4d07      	ldr	r5, [pc, #28]	@ (80037c0 <_fstat_r+0x20>)
 80037a4:	2300      	movs	r3, #0
 80037a6:	4604      	mov	r4, r0
 80037a8:	4608      	mov	r0, r1
 80037aa:	4611      	mov	r1, r2
 80037ac:	602b      	str	r3, [r5, #0]
 80037ae:	f7fc feb5 	bl	800051c <_fstat>
 80037b2:	1c43      	adds	r3, r0, #1
 80037b4:	d102      	bne.n	80037bc <_fstat_r+0x1c>
 80037b6:	682b      	ldr	r3, [r5, #0]
 80037b8:	b103      	cbz	r3, 80037bc <_fstat_r+0x1c>
 80037ba:	6023      	str	r3, [r4, #0]
 80037bc:	bd38      	pop	{r3, r4, r5, pc}
 80037be:	bf00      	nop
 80037c0:	20000250 	.word	0x20000250

080037c4 <_isatty_r>:
 80037c4:	b538      	push	{r3, r4, r5, lr}
 80037c6:	4d06      	ldr	r5, [pc, #24]	@ (80037e0 <_isatty_r+0x1c>)
 80037c8:	2300      	movs	r3, #0
 80037ca:	4604      	mov	r4, r0
 80037cc:	4608      	mov	r0, r1
 80037ce:	602b      	str	r3, [r5, #0]
 80037d0:	f7fc feb4 	bl	800053c <_isatty>
 80037d4:	1c43      	adds	r3, r0, #1
 80037d6:	d102      	bne.n	80037de <_isatty_r+0x1a>
 80037d8:	682b      	ldr	r3, [r5, #0]
 80037da:	b103      	cbz	r3, 80037de <_isatty_r+0x1a>
 80037dc:	6023      	str	r3, [r4, #0]
 80037de:	bd38      	pop	{r3, r4, r5, pc}
 80037e0:	20000250 	.word	0x20000250

080037e4 <_sbrk_r>:
 80037e4:	b538      	push	{r3, r4, r5, lr}
 80037e6:	4d06      	ldr	r5, [pc, #24]	@ (8003800 <_sbrk_r+0x1c>)
 80037e8:	2300      	movs	r3, #0
 80037ea:	4604      	mov	r4, r0
 80037ec:	4608      	mov	r0, r1
 80037ee:	602b      	str	r3, [r5, #0]
 80037f0:	f7fc febc 	bl	800056c <_sbrk>
 80037f4:	1c43      	adds	r3, r0, #1
 80037f6:	d102      	bne.n	80037fe <_sbrk_r+0x1a>
 80037f8:	682b      	ldr	r3, [r5, #0]
 80037fa:	b103      	cbz	r3, 80037fe <_sbrk_r+0x1a>
 80037fc:	6023      	str	r3, [r4, #0]
 80037fe:	bd38      	pop	{r3, r4, r5, pc}
 8003800:	20000250 	.word	0x20000250

08003804 <_init>:
 8003804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003806:	bf00      	nop
 8003808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800380a:	bc08      	pop	{r3}
 800380c:	469e      	mov	lr, r3
 800380e:	4770      	bx	lr

08003810 <_fini>:
 8003810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003812:	bf00      	nop
 8003814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003816:	bc08      	pop	{r3}
 8003818:	469e      	mov	lr, r3
 800381a:	4770      	bx	lr
